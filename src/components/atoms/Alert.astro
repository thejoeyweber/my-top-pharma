---
/**
 * Alert Component
 * 
 * A reusable alert component for displaying information, success, warning, or error messages.
 */

interface Props {
  type?: 'info' | 'success' | 'warning' | 'error';
  title?: string;
  message?: string;
  class?: string;
  dismissible?: boolean;
}

const {
  type = 'info',
  title,
  message,
  class: className = '',
  dismissible = false,
} = Astro.props;

// Define base classes
const baseClasses = 'rounded-lg p-4 border flex gap-3 text-sm';

// Define variant classes
const variantClasses = {
  info: 'bg-blue-50 border-blue-200 text-blue-800',
  success: 'bg-green-50 border-green-200 text-green-800',
  warning: 'bg-amber-50 border-amber-200 text-amber-800',
  error: 'bg-red-50 border-red-200 text-red-800',
};

// Define icon SVGs
const icons = {
  info: `<svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5 text-blue-500" viewBox="0 0 20 20" fill="currentColor">
    <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd" />
  </svg>`,
  success: `<svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5 text-green-500" viewBox="0 0 20 20" fill="currentColor">
    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
  </svg>`,
  warning: `<svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5 text-amber-500" viewBox="0 0 20 20" fill="currentColor">
    <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd" />
  </svg>`,
  error: `<svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5 text-red-500" viewBox="0 0 20 20" fill="currentColor">
    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
  </svg>`,
};

// Combine all classes
const classes = [baseClasses, variantClasses[type], className].join(' ');
---

<div class={classes} role="alert">
  <div class="flex-shrink-0">
    <span set:html={icons[type]} />
  </div>
  <div class="flex-1">
    {title && <div class="font-medium mb-1">{title}</div>}
    {message && <div>{message}</div>}
    {!message && <slot />}
  </div>
  {dismissible && (
    <button class="flex-shrink-0 text-gray-500 hover:text-gray-700" type="button" aria-label="Close">
      <svg class="w-5 h-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
        <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
      </svg>
    </button>
  )}
</div>

<script>
  // Add event listeners to dismissible alerts
  document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('[role="alert"] button').forEach(button => {
      button.addEventListener('click', () => {
        const alert = button.closest('[role="alert"]');
        if (alert) {
          alert.classList.add('opacity-0', 'transition-opacity', 'duration-300');
          setTimeout(() => {
            alert.remove();
          }, 300);
        }
      });
    });
  });
</script> 