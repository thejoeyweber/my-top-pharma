---
/**
 * Card Component
 * 
 * A reusable card component for displaying content with various styles.
 */

interface Props {
  title?: string;
  variant?: 'default' | 'bordered' | 'elevated';
  padding?: 'none' | 'sm' | 'md' | 'lg';
  class?: string;
  headerClass?: string;
  bodyClass?: string;
  footerClass?: string;
}

const {
  title,
  variant = 'default',
  padding = 'md',
  class: className = '',
  headerClass = '',
  bodyClass = '',
  footerClass = '',
} = Astro.props;

// Get slots
const hasHeader = title || Astro.slots.has('header');
const hasFooter = Astro.slots.has('footer');

// Define base classes
const baseClasses = 'overflow-hidden transition-shadow rounded-lg';

// Define variant classes
const variantClasses = {
  default: 'bg-white shadow',
  bordered: 'bg-white border border-gray-200',
  elevated: 'bg-white shadow-md hover:shadow-lg',
};

// Define padding classes
const paddingClasses = {
  none: '',
  sm: 'p-3',
  md: 'p-5',
  lg: 'p-7',
};

// Build class lists
const cardClasses = [baseClasses, variantClasses[variant], className].join(' ');
const headerDefaultClasses = 'px-5 py-4 border-b border-gray-200 font-medium';
const bodyDefaultClasses = paddingClasses[padding];
const footerDefaultClasses = 'px-5 py-4 bg-gray-50 border-t border-gray-200';
---

<div class={cardClasses}>
  {hasHeader && (
    <div class={`${headerDefaultClasses} ${headerClass}`}>
      {title ? <h3 class="text-lg font-semibold">{title}</h3> : <slot name="header" />}
    </div>
  )}
  
  <div class={`${bodyDefaultClasses} ${bodyClass}`}>
    <slot />
  </div>
  
  {hasFooter && (
    <div class={`${footerDefaultClasses} ${footerClass}`}>
      <slot name="footer" />
    </div>
  )}
</div> 