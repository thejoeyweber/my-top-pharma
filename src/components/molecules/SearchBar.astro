---
/**
 * SearchBar Component
 * 
 * A search input with autocomplete functionality for filtering content.
 * Includes a search icon and clear button for enhanced user experience.
 */

interface Props {
  placeholder?: string;
  id?: string;
  name?: string;
  value?: string;
  class?: string;
}

const {
  placeholder = "Search...",
  id = "search",
  name = "search",
  value = "",
  class: className = "",
} = Astro.props;
---

<div class:list={["search-bar relative w-full", className]}>
  <div class="relative">
    <div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
      </svg>
    </div>
    <input
      type="text"
      id={id}
      name={name}
      value={value}
      placeholder={placeholder}
      class="block w-full rounded-md border border-gray-300 bg-white py-2 pl-10 pr-10 text-sm placeholder-gray-500 focus:border-primary-500 focus:outline-none focus:ring-1 focus:ring-primary-500"
    />
    <button
      type="button"
      class="clear-button absolute inset-y-0 right-0 flex items-center pr-3 text-gray-400 hover:text-gray-600 focus:outline-none"
      style="display: none;"
    >
      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
      </svg>
    </button>
  </div>
  <div class="search-results hidden absolute z-10 mt-1 max-h-60 w-full overflow-auto rounded-md bg-white py-1 text-base shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none sm:text-sm">
    <!-- Autocomplete results will be inserted here via JavaScript -->
  </div>
</div>

<script>
  // Handle search input functionality
  document.addEventListener('DOMContentLoaded', () => {
    const searchInputs = document.querySelectorAll('.search-bar input');
    
    searchInputs.forEach(input => {
      const searchBar = input.closest('.search-bar');
      const clearButton = searchBar?.querySelector('.clear-button');
      
      // Show/hide clear button based on input content
      input.addEventListener('input', () => {
        if (input.value) {
          clearButton?.setAttribute('style', 'display: flex;');
        } else {
          clearButton?.setAttribute('style', 'display: none;');
        }
      });
      
      // Clear the input when the clear button is clicked
      clearButton?.addEventListener('click', () => {
        input.value = '';
        clearButton.setAttribute('style', 'display: none;');
        // Trigger input event to update any listeners
        input.dispatchEvent(new Event('input', { bubbles: true }));
        input.focus();
      });
    });
  });
</script> 