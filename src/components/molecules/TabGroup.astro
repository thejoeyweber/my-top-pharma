---
/**
 * TabGroup Component
 * 
 * A responsive tab navigation component for organizing content into tabs.
 * Includes support for active state styling and accessibility features.
 * 
 * @example
 * ```astro
 * <TabGroup
 *   tabs={[
 *     { id: 'overview', label: 'Overview' },
 *     { id: 'details', label: 'Details' },
 *     { id: 'related', label: 'Related' }
 *   ]}
 *   activeTab="overview"
 * />
 * 
 * <!-- Then create tab panels with matching IDs -->
 * <div id="tab-content-overview" role="tabpanel" aria-labelledby="tab-overview">
 *   Overview content goes here
 * </div>
 * ```
 */

export interface TabItem {
  /**
   * Unique identifier for the tab, used in URL hash and aria attributes
   */
  id: string;
  
  /**
   * Display label for the tab
   */
  label: string;
  
  /**
   * Optional SVG icon HTML to display before the label
   */
  icon?: string;
  
  /**
   * Whether the tab is disabled
   * @default false
   */
  disabled?: boolean;
}

export interface TabGroupProps {
  /**
   * Array of tab items to display
   */
  tabs: TabItem[];
  
  /**
   * ID of the initially active tab
   */
  activeTab: string;
  
  /**
   * ARIA label for the tab list for accessibility
   * @default 'Content tabs'
   */
  ariaLabel?: string;
  
  /**
   * ID prefix for the tab panels
   * @default 'tab-content'
   */
  tabPanelId?: string;
  
  /**
   * CSS class to apply to the container
   */
  class?: string;
  
  /**
   * Whether to persist active tab in URL hash
   * @default true
   */
  useHash?: boolean;
  
  /**
   * Whether tabs should be full width
   * @default false
   */
  fullWidth?: boolean;
}

// Type alias for Props
type Props = TabGroupProps;

const { 
  tabs, 
  activeTab, 
  ariaLabel = 'Content tabs', 
  tabPanelId = 'tab-content',
  class: className = '',
  useHash = true,
  fullWidth = false
} = Astro.props;

// Generate a unique ID for this tab group to avoid conflicts with multiple instances
const tabGroupId = `tabgroup-${Math.random().toString(36).substring(2, 9)}`;
---

<div 
  class:list={["tab-group border-b border-gray-200", className]} 
  data-tab-group={tabGroupId}
  data-use-hash={useHash}
  data-tab-panel-id={tabPanelId}
>
  <nav 
    class:list={[
      "flex -mb-px overflow-x-auto", 
      fullWidth ? "w-full" : "space-x-8"
    ]} 
    aria-label={ariaLabel} 
    role="tablist"
  >
    {tabs.map(tab => {
      const isActive = activeTab === tab.id;
      const isDisabled = tab.disabled === true;
      
      return (
        <a
          id={`tab-${tab.id}`}
          href={useHash ? `#${tab.id}` : `javascript:void(0)`}
          class:list={[
            "whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm flex items-center gap-2 transition-colors focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2",
            fullWidth && "flex-1 justify-center",
            isActive
              ? "border-primary-500 text-primary-600"
              : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300",
            isDisabled && "opacity-50 cursor-not-allowed pointer-events-none"
          ]}
          aria-controls={`${tabPanelId}-${tab.id}`}
          aria-selected={isActive ? "true" : "false"}
          aria-disabled={isDisabled ? "true" : "false"}
          role="tab"
          tabindex={isActive ? "0" : "-1"}
          data-tab-id={tab.id}
        >
          {tab.icon && <span class="tab-icon" set:html={tab.icon} />}
          <span class="tab-label">{tab.label}</span>
        </a>
      );
    })}
  </nav>
</div>

<script>
  // Helper function to initialize a tab group
  function initializeTabGroup(tabGroupEl: HTMLElement) {
    // Get configuration from data attributes
    const tabGroupId = tabGroupEl.dataset.tabGroup;
    const useHash = tabGroupEl.dataset.useHash === 'true';
    const tabPanelId = tabGroupEl.dataset.tabPanelId || 'tab-content';
    
    // Find all tab buttons in this group
    const tabButtons = tabGroupEl.querySelectorAll<HTMLElement>('[role="tab"]');
    
    // Store tab IDs for this group
    const tabIds = Array.from(tabButtons).map(tab => tab.dataset.tabId);
    
    // Function to activate a tab
    function activateTab(tabId: string) {
      // Skip if tabId is not valid
      if (!tabIds.includes(tabId)) return;
      
      // Update URL hash if enabled
      if (useHash && tabId && window.location.hash !== `#${tabId}`) {
        history.pushState(null, '', `#${tabId}`);
      }
      
      // Update tab buttons
      tabButtons.forEach(button => {
        const isActive = button.dataset.tabId === tabId;
        
        // Update ARIA attributes
        button.setAttribute('aria-selected', isActive ? 'true' : 'false');
        button.setAttribute('tabindex', isActive ? '0' : '-1');
        
        // Update classes
        if (isActive) {
          button.classList.remove('border-transparent', 'text-gray-500');
          button.classList.add('border-primary-500', 'text-primary-600');
        } else {
          button.classList.add('border-transparent', 'text-gray-500');
          button.classList.remove('border-primary-500', 'text-primary-600');
        }
      });
      
      // Find and update tab panels
      const allPanels = document.querySelectorAll(`[id^="${tabPanelId}-"]`);
      allPanels.forEach(panel => {
        const isPanelActive = panel.id === `${tabPanelId}-${tabId}`;
        panel.classList.toggle('hidden', !isPanelActive);
        panel.setAttribute('aria-hidden', isPanelActive ? 'false' : 'true');
      });
    }
    
    // Add click handlers to tabs
    tabButtons.forEach(button => {
      button.addEventListener('click', (e) => {
        // Don't process disabled tabs
        if (button.getAttribute('aria-disabled') === 'true') {
          e.preventDefault();
          return;
        }
        
        const tabId = button.dataset.tabId;
        if (tabId) {
          e.preventDefault();
          activateTab(tabId);
        }
      });
    });
    
    // Handle keyboard navigation
    tabGroupEl.addEventListener('keydown', (e) => {
      // Only handle arrow keys
      if (e.key !== 'ArrowLeft' && e.key !== 'ArrowRight') return;
      
      const activeTab = tabGroupEl.querySelector<HTMLElement>('[aria-selected="true"]');
      if (!activeTab) return;
      
      const currentIndex = tabIds.indexOf(activeTab.dataset.tabId || '');
      if (currentIndex === -1) return;
      
      let newIndex;
      if (e.key === 'ArrowLeft') {
        // Move left, wrap around to end
        newIndex = currentIndex === 0 ? tabIds.length - 1 : currentIndex - 1;
      } else {
        // Move right, wrap around to beginning
        newIndex = currentIndex === tabIds.length - 1 ? 0 : currentIndex + 1;
      }
      
      // Skip disabled tabs
      const newButton = tabGroupEl.querySelector<HTMLElement>(`[data-tab-id="${tabIds[newIndex]}"]`);
      if (newButton?.getAttribute('aria-disabled') === 'true') return;
      
      // Activate the new tab and focus it
      activateTab(tabIds[newIndex]);
      newButton?.focus();
    });
    
    // Set initial active tab based on URL hash if enabled
    if (useHash && window.location.hash) {
      const hashTabId = window.location.hash.replace('#', '');
      if (tabIds.includes(hashTabId)) {
        activateTab(hashTabId);
        return; // Exit early, no need to set default
      }
    }
    
    // Otherwise activate the first available tab
    const firstTabId = tabIds[0];
    if (firstTabId) {
      activateTab(firstTabId);
    }
  }
  
  // Initialize all tab groups when the DOM is ready
  function initializeAllTabGroups() {
    document.querySelectorAll<HTMLElement>('.tab-group[data-tab-group]').forEach(tabGroup => {
      initializeTabGroup(tabGroup);
    });
  }
  
  // Run on page load
  document.addEventListener('DOMContentLoaded', initializeAllTabGroups);
  
  // Run after page transitions in Astro
  document.addEventListener('astro:page-load', initializeAllTabGroups);
  
  // Handle hash changes to update tabs
  window.addEventListener('hashchange', () => {
    const hash = window.location.hash.replace('#', '');
    if (!hash) return;
    
    document.querySelectorAll<HTMLElement>('.tab-group[data-tab-group][data-use-hash="true"]').forEach(tabGroup => {
      const tabIds = Array.from(tabGroup.querySelectorAll('[role="tab"]')).map(tab => 
        (tab as HTMLElement).dataset.tabId
      );
      
      if (tabIds.includes(hash)) {
        const activeTab = tabGroup.querySelector<HTMLElement>(`[data-tab-id="${hash}"]`);
        activeTab?.click();
      }
    });
  });
</script> 