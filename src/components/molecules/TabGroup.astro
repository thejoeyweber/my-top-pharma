---
/**
 * TabGroup Component
 * 
 * Accessible tab navigation following WAI-ARIA patterns.
 * 
 * @example
 * ```astro
 * <TabGroup
 *   tabs={[
 *     { id: 'overview', label: 'Overview' },
 *     { id: 'details', label: 'Details' },
 *     { id: 'related', label: 'Related' }
 *   ]}
 *   activeTab="overview"
 *   tabPanelId="company-tab-content" // Prefix for panel IDs
 * />
 * 
 * <!-- Tab panels must have matching IDs: `prefix-tabId` -->
 * <div id="company-tab-content-overview" role="tabpanel" aria-labelledby="tab-overview">
 *   Overview content...
 * </div>
 * <div id="company-tab-content-details" role="tabpanel" aria-labelledby="tab-details" hidden>
 *   Details content...
 * </div>
 * ```
 */
import type { HTMLAttributes } from 'astro/types';

export interface TabItem {
  /**
   * Unique identifier for the tab, used in URL hash and aria attributes
   */
  id: string;
  
  /**
   * Display label for the tab
   */
  label: string;
  
  /**
   * Optional SVG icon HTML to display before the label
   */
  icon?: string;
  
  /**
   * Whether the tab is disabled
   * @default false
   */
  disabled?: boolean;
  
  /**
   * Optional count to display next to the tab label
   */
  count?: number | null;
}

interface Props extends HTMLAttributes<'div'> {
  /**
   * Array of tab items to display
   */
  tabs: TabItem[];
  
  /**
   * ID of the initially active tab
   */
  activeTab: string;
  
  /**
   * ARIA label for the tab list for accessibility
   * @default 'Content tabs'
   */
  ariaLabel?: string;
  
  /**
   * ID prefix for the tab panels
   * @default 'tab-content'
   */
  tabPanelId: string;
  
  /**
   * CSS class to apply to the container
   */
  class?: string;
  
  /**
   * Whether to persist active tab in URL hash
   * @default true
   */
  useHash?: boolean;
  
  /**
   * Whether tabs should be full width
   * @default false
   */
  fullWidth?: boolean;
}

const { 
  tabs,
  activeTab,
  ariaLabel = 'Content tabs',
  tabPanelId,
  class: className,
  useHash = true,
  fullWidth = false
} = Astro.props;

const tabGroupId = `tabgroup-${Math.random().toString(36).substring(2, 9)}`;
---

<div 
  class:list={["tab-group border-b border-gray-200", className]}
  data-tab-group={tabGroupId}
  data-use-hash={useHash}
  data-tab-panel-id={tabPanelId} 
>
  <nav 
    class:list={[
      "flex -mb-px overflow-x-auto", 
      fullWidth ? "w-full" : "space-x-8"
    ]} 
    aria-label={ariaLabel} 
    role="tablist"
  >
    {tabs.map(tab => {
      const isActive = activeTab === tab.id;
      const isDisabled = tab.disabled === true;
      const uniqueTabId = `${tabGroupId}-tab-${tab.id}`;
      const uniquePanelId = `${tabPanelId}-${tab.id}`;
      
      return (
        <a
          id={uniqueTabId}
          href={useHash ? `#${tab.id}` : `javascript:void(0)`}
          class:list={[
            "whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm flex items-center gap-2 transition-colors focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2",
            fullWidth && "flex-1 justify-center",
            isActive
              ? "border-primary-500 text-primary-600"
              : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300",
            isDisabled && "opacity-50 cursor-not-allowed pointer-events-none"
          ]}
          aria-controls={uniquePanelId}
          aria-selected={isActive ? "true" : "false"}
          aria-disabled={isDisabled ? "true" : "false"}
          role="tab"
          tabindex={isActive ? 0 : -1}
          data-tab-id={tab.id}
          data-tab-panel-id={uniquePanelId}
        >
          {tab.icon && <span class="tab-icon" set:html={tab.icon} />}
          <span class="tab-label">{tab.label}</span>
          {typeof tab.count === 'number' && (
            <span class:list={[
              "ml-2 rounded-full px-2 py-0.5 text-xs font-medium",
              isActive ? 'bg-primary-100 text-primary-600' : 'bg-gray-100 text-gray-600'
            ]}>
              {tab.count}
            </span>
          )}
        </a>
      );
    })}
  </nav>
</div>

<script>
  class TabGroupController {
    tabGroupEl: HTMLElement;
    tabPanelId: string;
    tabButtons: NodeListOf<HTMLAnchorElement>;
    tabPanels: NodeListOf<HTMLElement>;
    tabIds: string[];
    currentTabIndex: number;

    constructor(tabGroupEl: HTMLElement) {
      this.tabGroupEl = tabGroupEl;
      this.tabPanelId = tabGroupEl.dataset.tabPanelId || 'tab-content';
      this.tabButtons = tabGroupEl.querySelectorAll('a[role="tab"]');
      this.tabPanels = document.querySelectorAll(`[id^="${this.tabPanelId}-"]`);
      this.tabIds = Array.from(this.tabButtons).map(tab => tab.dataset.tabId || '');
      this.currentTabIndex = this.tabIds.findIndex(id => this.tabButtons[this.tabIds.indexOf(id)]?.getAttribute('aria-selected') === 'true');
      if (this.currentTabIndex === -1) this.currentTabIndex = 0;

      this.addEventListeners();
      this.initializeActiveTab();
    }

    initializeActiveTab() {
      const hash = window.location.hash.substring(1);
      const initialTabId = this.tabIds.includes(hash) ? hash : this.tabIds[this.currentTabIndex];
      if (initialTabId) {
        this.activateTab(initialTabId, false);
      }
    }

    addEventListeners() {
      this.tabButtons.forEach(button => {
        button.addEventListener('click', (e) => {
          e.preventDefault();
          if (button.getAttribute('aria-disabled') === 'true') return;
          const tabId = button.dataset.tabId;
          if (tabId) {
            this.activateTab(tabId);
          }
        });
      });

      this.tabGroupEl.addEventListener('keydown', (e) => {
        if (e.key === 'ArrowLeft' || e.key === 'ArrowRight') {
          e.preventDefault();
          const direction = e.key === 'ArrowLeft' ? -1 : 1;
          let nextIndex = (this.currentTabIndex + direction + this.tabIds.length) % this.tabIds.length;

          while (this.tabButtons[nextIndex]?.getAttribute('aria-disabled') === 'true') {
            nextIndex = (nextIndex + direction + this.tabIds.length) % this.tabIds.length;
            if (nextIndex === this.currentTabIndex) return;
          }
          
          this.tabButtons[nextIndex].focus();
          this.activateTab(this.tabIds[nextIndex]);
        }
      });
      
      window.addEventListener('hashchange', () => {
        const hash = window.location.hash.substring(1);
        if (this.tabIds.includes(hash)) {
          this.activateTab(hash, false);
        }
      });
    }

    activateTab(tabId: string, pushState = true) {
      if (!this.tabIds.includes(tabId)) return;

      this.currentTabIndex = this.tabIds.indexOf(tabId);

      if (pushState && window.location.hash !== `#${tabId}`) {
        history.pushState(null, '', `#${tabId}`);
      }

      this.tabButtons.forEach((button, index) => {
        const isActive = index === this.currentTabIndex;
        button.setAttribute('aria-selected', isActive ? 'true' : 'false');
        button.setAttribute('tabindex', isActive ? '0' : '-1');
        
        const activeClasses = ['border-primary-500', 'text-primary-600'];
        const inactiveClasses = ['border-transparent', 'text-gray-500', 'hover:text-gray-700', 'hover:border-gray-300'];
        const countActiveClasses = ['bg-primary-100', 'text-primary-600'];
        const countInactiveClasses = ['bg-gray-100', 'text-gray-600'];

        if (isActive) {
          button.classList.add(...activeClasses);
          button.classList.remove(...inactiveClasses);
          button.querySelector('.ml-2')?.classList.add(...countActiveClasses);
          button.querySelector('.ml-2')?.classList.remove(...countInactiveClasses);
        } else {
          button.classList.remove(...activeClasses);
          button.classList.add(...inactiveClasses);
          button.querySelector('.ml-2')?.classList.remove(...countActiveClasses);
          button.querySelector('.ml-2')?.classList.add(...countInactiveClasses);
        }
      });

      this.tabPanels.forEach(panel => {
        const panelTabId = panel.id.replace(`${this.tabPanelId}-`, '');
        const isPanelActive = panelTabId === tabId;
        panel.toggleAttribute('hidden', !isPanelActive);
        panel.setAttribute('aria-hidden', String(!isPanelActive));

        if (isPanelActive) {
          panel.dispatchEvent(new CustomEvent('tab:visible', { bubbles: true }));
        }
      });
    }
  }

  document.querySelectorAll<HTMLElement>('.tab-group[data-tab-group]').forEach(tabGroupEl => {
    new TabGroupController(tabGroupEl);
  });
</script> 