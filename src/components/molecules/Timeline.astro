---
/**
 * Timeline Component
 * 
 * Displays a chronological timeline of events or stages.
 */
import type { ProductStage, ProductTimeline } from '../../types/products';
import { getStageName, getStageColor } from '../../utils/dataUtils';

interface Props {
  events: ProductTimeline[] | any[];
  title?: string;
  currentStage?: ProductStage;
}

const { events, title, currentStage } = Astro.props;

// Sort events in reverse chronological order (most recent first)
const sortedEvents = [...events].sort((a, b) => {
  const dateA = a.date ? new Date(a.date) : (a.startDate ? new Date(a.startDate) : new Date(0)); 
  const dateB = b.date ? new Date(b.date) : (b.startDate ? new Date(b.startDate) : new Date(0));
  return dateB.getTime() - dateA.getTime(); // Reversed order by swapping A and B
});

// Format date for display (MMM DD, YYYY)
const formatDate = (dateString: string) => {
  if (!dateString) return '';
  try {
    const date = new Date(dateString);
    if (isNaN(date.getTime())) return '';
    return date.toLocaleDateString('en-US', { 
      month: 'short', 
      day: 'numeric', 
      year: 'numeric' 
    });
  } catch (e) {
    return '';
  }
};

// Get icon for stage
const getStageIcon = (stage: ProductStage) => {
  // Icons for different stages
  const icons = {
    'discovery': '<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-[color:var(--color-primary-500)]" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 3v2m6-2v2M9 19v2m6-2v2M5 9H3m2 6H3m18-6h-2m2 6h-2M7 19h10a2 2 0 002-2V7a2 2 0 00-2-2H7a2 2 0 00-2 2v10a2 2 0 002 2zM9 9h6v6H9V9z" /></path></svg>',
    'preclinical': '<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-[color:var(--color-primary-500)]" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19.428 15.428a2 2 0 00-1.022-.547l-2.387-.477a6 6 0 00-3.86.517l-.318.158a6 6 0 01-3.86.517L6.05 15.21a2 2 0 00-1.806.547M8 4h8l-1 1v5.172a2 2 0 00.586 1.414l5 5c1.26 1.26.367 3.414-1.415 3.414H4.828c-1.782 0-2.674-2.154-1.414-3.414l5-5A2 2 0 009 10.172V5L8 4z" /></path></svg>',
    'phase1': '<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-[color:var(--color-primary-500)]" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253" /></path></svg>',
    'phase2': '<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-[color:var(--color-primary-500)]" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19.428 15.428a2 2 0 00-1.022-.547l-2.387-.477a6 6 0 00-3.86.517l-.318.158a6 6 0 01-3.86.517L6.05 15.21a2 2 0 00-1.806.547M8 4h8l-1 1v5.172a2 2 0 00.586 1.414l5 5c1.26 1.26.367 3.414-1.415 3.414H4.828c-1.782 0-2.674-2.154-1.414-3.414l5-5A2 2 0 009 10.172V5L8 4z" /></path></svg>',
    'phase3': '<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-[color:var(--color-primary-500)]" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z" /></path></svg>',
    'submitted': '<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-[color:var(--color-primary-500)]" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" /></path></svg>',
    'approved': '<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-[color:var(--color-primary-500)]" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" /></path></svg>',
    'marketed': '<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-[color:var(--color-primary-500)]" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 9V7a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2m2 4h10a2 2 0 002-2v-6a2 2 0 00-2-2H9a2 2 0 00-2 2v6a2 2 0 002 2zm7-5a2 2 0 11-4 0 2 2 0 014 0z" /></path></svg>'
  };
  
  return icons[stage] || '<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-[color:var(--color-primary-500)]" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" /></path></svg>';
};

// Check if event is the current stage
const isCurrentStage = (stage: ProductStage) => {
  return currentStage ? stage === currentStage : false;
};
---

<div class="relative py-4">
  {/* Vertical timeline line */}
  <div class="absolute top-0 left-4 h-full w-0.5 bg-gray-200"></div>
  
  <div class="space-y-6">
    {/* Timeline Events */}
    {sortedEvents.map((event) => (
      <div class="relative pl-10">
        {/* Timeline circle point */}
        <div class={`absolute left-0 top-1.5 h-8 w-8 rounded-full border-2 border-[color:var(--color-primary-500)] bg-white flex items-center justify-center ${isCurrentStage(event.stage) ? 'ring-2 ring-offset-2 ring-[color:var(--color-primary-500)]' : ''}`}>
          <Fragment set:html={getStageIcon(event.stage)} />
        </div>
        
        {/* Timeline content */}
        <div>
          <div class="flex items-center text-sm">
            <span class="font-medium text-gray-900">{getStageName(event.stage)}</span>
            <span class="ml-2 text-gray-500">
              {event.date ? formatDate(event.date) : formatDate(event.startDate)}
              {event.endDate ? ` - ${formatDate(event.endDate)}` : (event.date ? '' : ' - Present')}
            </span>
            {isCurrentStage(event.stage) && (
              <span class="ml-2 inline-block px-2 py-0.5 text-xs rounded-full bg-[color:var(--color-primary-50)] text-[color:var(--color-primary-700)]">
                Current Stage
              </span>
            )}
          </div>
          
          {(event.description || event.milestone) && (
            <p class="mt-1 text-sm text-gray-600">
              {event.milestone && (
                <span class="font-medium">Key Milestone: </span>
              )}
              {event.description || event.milestone}
            </p>
          )}
        </div>
      </div>
    ))}
  </div>
</div> 