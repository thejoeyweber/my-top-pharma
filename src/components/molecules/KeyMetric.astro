/**
 * KeyMetric Component
 * 
 * A visual component for displaying important numeric metrics with 
 * label, value, trend indicator, and optional icon.
 */

interface Props {
  label: string;
  value: string | number;
  trend?: 'up' | 'down' | 'neutral';
  change?: string;
  icon?: string;
  size?: 'sm' | 'md' | 'lg';
}

const { 
  label, 
  value, 
  trend, 
  change, 
  icon,
  size = 'md'
} = Astro.props;

const sizeClasses = {
  sm: 'px-3 py-2 text-sm',
  md: 'px-4 py-3',
  lg: 'px-5 py-4 text-lg',
};

const trendColors = {
  up: 'text-green-600',
  down: 'text-red-600',
  neutral: 'text-gray-600',
};

<div class:list={["bg-white rounded-lg border border-gray-200 shadow-sm hover:shadow-md transition-shadow", sizeClasses[size]]}>
  <div class="flex items-center">
    {icon && (
      <div class="flex-shrink-0 mr-3">
        <span class="text-gray-500" set:html={icon}></span>
      </div>
    )}
    <div class="flex-1">
      <p class="text-sm font-medium text-gray-500">{label}</p>
      <p class="font-semibold text-gray-900">
        {typeof value === 'number' ? value.toLocaleString() : value}
      </p>
      
      {trend && change && (
        <div class="flex items-center mt-1">
          <span class:list={[trendColors[trend], "flex items-center text-xs"]}>
            {trend === 'up' && (
              <svg class="w-3 h-3 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 10l7-7m0 0l7 7m-7-7v18" />
              </svg>
            )}
            {trend === 'down' && (
              <svg class="w-3 h-3 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 14l-7 7m0 0l-7-7m7 7V3" />
              </svg>
            )}
            {change}
          </span>
        </div>
      )}
    </div>
  </div>
</div> 