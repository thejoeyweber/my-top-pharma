---
/**
 * SortSelect Component
 * 
 * A dropdown component for selecting sort options.
 * Designed for server-side sorting with URL parameters.
 * 
 * @example
 * ```astro
 * <SortSelect
 *   options={[
 *     { value: 'name_asc', label: 'Name (A-Z)' },
 *     { value: 'name_desc', label: 'Name (Z-A)' },
 *     { value: 'date_desc', label: 'Newest first' }
 *   ]}
 *   selected="name_asc"
 * />
 * ```
 */
import { updateSortParams } from '../../lib/utils/urlUtils';

export interface SortOption {
  /**
   * Unique value for the option, typically in format 'field_direction'
   */
  value: string;
  
  /**
   * Display label for the option
   */
  label: string;
  
  /**
   * Whether this option is disabled
   * @default false
   */
  disabled?: boolean;
}

export interface SortSelectProps {
  /**
   * Array of sort options to display
   */
  options: SortOption[];
  
  /**
   * Label text to display before the select
   * @default "Sort by"
   */
  label?: string;
  
  /**
   * HTML name attribute for the select element
   * @default "sort"
   */
  name?: string;
  
  /**
   * HTML id attribute for the select element
   * @default "sort-select"
   */
  id?: string;
  
  /**
   * Currently selected option value
   * @default ""
   */
  selected?: string;
  
  /**
   * Additional CSS classes to apply to the container
   */
  class?: string;
  
  /**
   * Function to generate the URL when option changes
   */
  onChange?: (value: string) => string;
}

// Type alias for Props
type Props = SortSelectProps;

const {
  options,
  label = "Sort by",
  name = "sort",
  id = "sort-select",
  selected = "",
  class: className = "",
  onChange
} = Astro.props;

/**
 * Generates a URL for a sorting option, preserving the view parameter
 */
function getOptionUrl(value: string): string {
  return updateSortParams(value, Astro.url);
}
---

<div class:list={["sort-select flex flex-col md:flex-row md:items-center gap-2", className]}>
  {label && <label for={id} class="text-sm font-medium text-gray-700 whitespace-nowrap">{label}:</label>}
  
  <div class="relative">
    <select
      id={id}
      name={name}
      onchange={`window.location.href = this.options[this.selectedIndex].dataset.url`}
      class="block w-full rounded-md border border-gray-300 bg-white py-1.5 pl-3 pr-10 text-sm text-gray-900 focus:border-primary-500 focus:outline-none focus:ring-1 focus:ring-primary-500"
      aria-label={label}
    >
      {options.map(option => {
        const url = getOptionUrl(option.value);
        return (
          <option 
            value={option.value} 
            selected={option.value === selected}
            disabled={option.disabled}
            data-url={url}
          >
            {option.label}
          </option>
        );
      })}
    </select>
    
    <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center pr-3">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-gray-400" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
        <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
      </svg>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const sortSelect = document.getElementById('sort-select') as HTMLSelectElement;
    
    sortSelect?.addEventListener('change', () => {
      const selectedOption = sortSelect.options[sortSelect.selectedIndex];
      const url = selectedOption.getAttribute('data-url');
      
      if (url) {
        window.location.href = url;
      }
    });
  });
</script> 