---
/**
 * SortSelect Component
 * 
 * A dropdown component for selecting sort options.
 * Designed for server-side sorting with URL parameters.
 * 
 * @example
 * ```astro
 * <SortSelect
 *   options={[
 *     { value: 'name_asc', label: 'Name (A-Z)' },
 *     { value: 'name_desc', label: 'Name (Z-A)' },
 *     { value: 'date_desc', label: 'Newest first' }
 *   ]}
 *   selected="name_asc"
 * />
 * ```
 */
import { updateSortParams } from '../../lib/utils/urlUtils';

export interface SortOption {
  /**
   * Unique value for the option, typically in format 'field_direction'
   */
  value: string;
  
  /**
   * Display label for the option
   */
  label: string;
  
  /**
   * Whether this option is disabled
   * @default false
   */
  disabled?: boolean;
}

export interface SortSelectProps {
  /**
   * Array of sort options to display
   */
  options: SortOption[];
  
  /**
   * Label text to display before the select
   * @default "Sort by"
   */
  label?: string;
  
  /**
   * HTML name attribute for the select element
   * @default "sort"
   */
  name?: string;
  
  /**
   * HTML id attribute for the select element
   * @default "sort-select"
   */
  id?: string;
  
  /**
   * Currently selected option value
   * @default ""
   */
  selected?: string;
  
  /**
   * Additional CSS classes to apply to the container
   */
  class?: string;
  
  /**
   * Function to generate the URL when option changes
   */
  onChange?: (value: string) => string;
}

// Type alias for Props
type Props = SortSelectProps;

const {
  options,
  label = "Sort by",
  name = "sort",
  id = "sort-select",
  selected = "",
  class: className = "",
  onChange
} = Astro.props;

/**
 * Generates a URL for a sorting option, preserving the view parameter
 */
function getOptionUrl(value: string): string {
  return updateSortParams(value, Astro.url);
}
---

<div class:list={["flex items-center gap-2 whitespace-nowrap", className]}>
  <label for={id} class="text-sm font-medium text-gray-700 flex-shrink-0">{label}</label>
  <select
    id={id}
    name={name}
    class="block w-full min-w-[140px] rounded-md border-gray-300 py-1.5 pl-3 pr-10 text-sm focus:border-primary-500 focus:outline-none focus:ring-primary-500"
    data-sort-select
  >
    {options.map((option) => (
      <option
        value={option.value}
        selected={option.value === selected}
        disabled={option.disabled}
      >
        {option.label}
      </option>
    ))}
  </select>
</div>

<script>
  // Handle sort selection
  document.querySelectorAll('[data-sort-select]').forEach(select => {
    select.addEventListener('change', (e) => {
      const value = (e.target as HTMLSelectElement).value;
      const url = new URL(window.location.href);
      url.searchParams.set('sort', value);
      window.location.href = url.toString();
    });
  });
</script> 