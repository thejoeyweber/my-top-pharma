---
/**
 * DataTable Component - Rebuilt to follow Astro best practices
 * 
 * A server-rendered table component with optional client-side enhancements.
 * Follows Astro's server-first approach with progressive enhancement.
 * 
 * @example
 * ```astro
 * <DataTable
 *   id="products-table"
 *   columns={[
 *     { key: 'name', label: 'Product Name', sortable: true, 
 *       render: (value, row) => `<a href="/products/${row.slug}">${value}</a>` },
 *     { key: 'stage', label: 'Stage', sortable: true }
 *   ]}
 *   data={products}
 *   currentPage={parseInt(Astro.url.searchParams.get('page') || '1')}
 *   sortColumn={Astro.url.searchParams.get('sort')}
 *   sortDirection={Astro.url.searchParams.get('dir') || 'asc'}
 *   pageSize={10}
 * />
 * ```
 */

export interface DataTableColumn<T = any> {
  /**
   * Unique identifier for the column, used for sorting and data lookup
   */
  key: string;
  
  /**
   * Display label for the column header
   */
  label: string;
  
  /**
   * Whether this column is sortable
   * @default false
   */
  sortable?: boolean;
  
  /**
   * Function to render the cell content
   * @param value - The value of the cell (data[row][column.key])
   * @param row - The entire row data object
   * @returns HTML string or plain text to render in the cell
   */
  render?: (value: any, row: T) => string;
  
  /**
   * Horizontal alignment of cell content
   * @default 'left'
   */
  align?: 'left' | 'center' | 'right';
  
  /**
   * Width of the column (e.g., '100px', '10%', etc.)
   */
  width?: string;
  
  /**
   * Whether to hide the column on mobile devices
   * @default false
   */
  hideMobile?: boolean;
}

export interface DataTableProps<T = any> {
  /**
   * Unique identifier for the table
   */
  id: string;
  
  /**
   * Array of column definitions
   */
  columns: DataTableColumn<T>[];
  
  /**
   * Array of data objects to display in the table
   */
  data: T[];
  
  /**
   * Default sort column
   */
  defaultSort?: string;
  
  /**
   * Default sort direction
   * @default 'asc'
   */
  defaultSortDirection?: 'asc' | 'desc';
  
  /**
   * Number of rows to display per page
   * @default 10
   */
  pageSize?: number;
  
  /**
   * Enable pagination
   * @default false
   */
  pagination?: boolean;
  
  /**
   * Enable search functionality
   * @default false
   */
  searchable?: boolean;
  
  /**
   * Custom CSS class for the container
   */
  class?: string;
  
  /**
   * Enable row hover highlighting
   * @default true
   */
  enableRowHover?: boolean;
  
  /**
   * Show empty state message when no data
   * @default true
   */
  showEmptyState?: boolean;
  
  /**
   * Custom empty state message
   * @default 'No data available'
   */
  emptyStateMessage?: string;
}

// Type alias for Props
type Props<T = any> = DataTableProps<T>;

const {
  id,
  columns,
  data,
  defaultSort,
  defaultSortDirection = 'asc',
  pageSize = 10,
  pagination = false,
  searchable = false,
  class: className = '',
  enableRowHover = true,
  showEmptyState = true,
  emptyStateMessage = 'No data available'
} = Astro.props;

// Get current URL for pagination/sorting links
const currentUrl = new URL(Astro.request.url);

// Sort data based on defaultSort
let sortedData = [...data];
if (defaultSort) {
  const sortCol = columns.find(col => col.key === defaultSort);
  if (sortCol && sortCol.sortable) {
    sortedData.sort((a, b) => {
      let aVal = a[defaultSort];
      let bVal = b[defaultSort];
      
      // Handle null/undefined values
      if (aVal === null || aVal === undefined) return defaultSortDirection === 'asc' ? 1 : -1;
      if (bVal === null || bVal === undefined) return defaultSortDirection === 'asc' ? -1 : 1;
      
      // Handle string comparison (case-insensitive)
      if (typeof aVal === 'string' && typeof bVal === 'string') {
        aVal = aVal.toLowerCase();
        bVal = bVal.toLowerCase();
      }
      
      // Comparison logic
      if (aVal === bVal) return 0;
      const result = aVal > bVal ? 1 : -1;
      return defaultSortDirection === 'asc' ? result : -result;
    });
  }
}

// Generate unique ID if not provided
const tableId = id || `table-${Math.random().toString(36).substring(2, 9)}`;
---

<div class:list={["data-table-container", className]} id={tableId}>
  <div class="overflow-x-auto">
    <table class="min-w-full divide-y divide-gray-200" data-table>
      <thead class="bg-gray-50">
        <tr>
          {columns.map((column) => (
            <th
              scope="col"
              class:list={[
                "px-6 py-3 text-xs font-medium text-gray-500 uppercase tracking-wider whitespace-nowrap",
                column.align === 'center' ? "text-center" : "",
                column.align === 'right' ? "text-right" : "",
                column.width ? "" : "flex-1",
                column.hideMobile ? "hidden sm:table-cell" : ""
              ]}
              style={column.width ? `width: ${column.width}` : ""}
            >
              <div class:list={[
                "flex items-center gap-1", 
                column.align === 'center' ? "justify-center" : "", 
                column.align === 'right' ? "justify-end" : ""
              ]}>
                {column.label}
              </div>
            </th>
          ))}
        </tr>
      </thead>
      <tbody class="bg-white divide-y divide-gray-200" data-tbody>
        {sortedData.length > 0 ? (
          sortedData.map((row) => (
            <tr class:list={[enableRowHover && "hover:bg-gray-50"]} data-row>
              {columns.map((column) => {
                const cellValue = row[column.key];
                const renderedValue = column.render ? column.render(cellValue, row) : cellValue;
                
                return (
                  <td 
                    class:list={[
                      "px-6 py-4 whitespace-nowrap text-sm", 
                      column.align === 'center' ? "text-center" : "",
                      column.align === 'right' ? "text-right" : "",
                      column.hideMobile ? "hidden sm:table-cell" : ""
                    ]}
                    data-cell-key={column.key}
                  >
                    {typeof renderedValue === 'string' && renderedValue.startsWith('<') 
                      ? <Fragment set:html={renderedValue} />
                      : renderedValue
                    }
                  </td>
                );
              })}
            </tr>
          ))
        ) : (
          showEmptyState && (
            <tr>
              <td colspan={columns.length} class="px-6 py-10 text-center text-gray-500 text-sm">
                {emptyStateMessage}
              </td>
            </tr>
          )
        )}
      </tbody>
    </table>
  </div>
</div>

<style>
  .data-table-container {
    background-color: var(--color-white);
    border-radius: var(--radius-lg);
    box-shadow: var(--shadow);
  }
</style> 