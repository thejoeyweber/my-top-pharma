---
/**
 * DataTable Component
 * 
 * A reusable data table component with sorting, filtering, and pagination capabilities.
 */

interface Column {
  key: string;
  label: string;
  sortable?: boolean;
  format?: (value: any) => string;
}

interface Props {
  columns: Column[];
  data: any[];
  caption?: string;
  class?: string;
  sortKey?: string;
  sortDir?: 'asc' | 'desc';
  itemsPerPage?: number;
  currentPage?: number;
  totalItems?: number;
  searchQuery?: string;
}

const {
  columns,
  data = [],
  caption,
  class: className = "",
  sortKey,
  sortDir = 'asc',
  itemsPerPage = 10,
  currentPage = 1,
  totalItems,
  searchQuery
} = Astro.props;

// Calculate start and end item for pagination
const showPagination = data.length > itemsPerPage;
const start = (currentPage - 1) * itemsPerPage;
const end = Math.min(start + itemsPerPage, data.length);
const pagedData = data.slice(start, end);
const totalPages = Math.ceil(data.length / itemsPerPage);
---

<div class={`overflow-x-auto ${className}`}>
  {searchQuery && (
    <div class="mb-4">
      <p class="text-sm text-gray-600">
        Showing results for: <span class="font-medium">{searchQuery}</span>
      </p>
    </div>
  )}

  <table class="w-full border-collapse">
    {caption && <caption class="sr-only">{caption}</caption>}
    
    <thead>
      <tr class="bg-gray-50 border-b border-gray-200">
        {columns.map((column) => (
          <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
            {column.sortable ? (
              <a href={`?sort=${column.key}&dir=${sortKey === column.key && sortDir === 'asc' ? 'desc' : 'asc'}`} class="flex items-center group">
                {column.label}
                <span class="ml-1 opacity-0 group-hover:opacity-100">
                  {sortKey === column.key && sortDir === 'asc' ? '↑' : '↓'}
                </span>
              </a>
            ) : column.label}
          </th>
        ))}
      </tr>
    </thead>
    
    <tbody>
      {pagedData.length > 0 ? (
        pagedData.map((row, i) => (
          <tr class={`${i % 2 === 0 ? 'bg-white' : 'bg-gray-50'} hover:bg-gray-100`}>
            {columns.map((column) => (
              <td class="px-4 py-3 text-sm">
                {column.format ? column.format(row[column.key]) : row[column.key] || '—'}
              </td>
            ))}
          </tr>
        ))
      ) : (
        <tr>
          <td colspan={columns.length} class="px-4 py-6 text-center text-sm text-gray-500">
            No data available
          </td>
        </tr>
      )}
    </tbody>
  </table>

  {showPagination && (
    <div class="py-3 flex items-center justify-between border-t border-gray-200">
      <div class="flex-1 flex justify-between sm:hidden">
        <a href={`?page=${Math.max(1, currentPage - 1)}`} class="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
          Previous
        </a>
        <a href={`?page=${Math.min(totalPages, currentPage + 1)}`} class="ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
          Next
        </a>
      </div>
      <div class="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
        <div>
          <p class="text-sm text-gray-700">
            Showing <span class="font-medium">{start + 1}</span> to <span class="font-medium">{end}</span> of <span class="font-medium">{data.length}</span> results
          </p>
        </div>
        <div>
          <nav class="relative z-0 inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
            <a
              href={`?page=${Math.max(1, currentPage - 1)}`}
              class={`relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 ${currentPage === 1 ? 'opacity-50 cursor-not-allowed' : ''}`}
            >
              <span class="sr-only">Previous</span>
              <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                <path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd" />
              </svg>
            </a>
            
            {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {
              const pageNum = i + 1;
              return (
                <a
                  href={`?page=${pageNum}`}
                  class={`relative inline-flex items-center px-4 py-2 border border-gray-300 bg-white text-sm font-medium ${pageNum === currentPage ? 'text-blue-600 bg-blue-50' : 'text-gray-700 hover:bg-gray-50'}`}
                >
                  {pageNum}
                </a>
              );
            })}
            
            <a
              href={`?page=${Math.min(totalPages, currentPage + 1)}`}
              class={`relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 ${currentPage === totalPages ? 'opacity-50 cursor-not-allowed' : ''}`}
            >
              <span class="sr-only">Next</span>
              <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
              </svg>
            </a>
          </nav>
        </div>
      </div>
    </div>
  )}
</div>

<script define:vars={{ columns, data, itemsPerPage, currentPage, totalItems }}>
  // Table functionality
  document.addEventListener('DOMContentLoaded', () => {
    const table = document.querySelector('table');
    if (!table) return;

    let currentSort = { key: sortKey, direction: sortDir };
    let filteredData = [...data];

    // Sorting function
    const sortData = (key, direction) => {
      return [...filteredData].sort((a, b) => {
        const aVal = a[key];
        const bVal = b[key];
        
        if (aVal === bVal) return 0;
        if (aVal === null || aVal === undefined) return 1;
        if (bVal === null || bVal === undefined) return -1;
        
        const modifier = direction === 'asc' ? 1 : -1;
        return aVal > bVal ? modifier : -modifier;
      });
    };

    // Update table content
    const updateTable = () => {
      const tbody = table.querySelector('tbody');
      if (!tbody) return;

      const start = (currentPage - 1) * itemsPerPage;
      const end = start + itemsPerPage;
      const pageData = filteredData.slice(start, end);

      tbody.innerHTML = pageData.map(row => `
        <tr>
          ${columns.map(column => `
            <td class="px-4 py-3 text-sm">
              ${column.format ? column.format(row[column.key]) : row[column.key] || '—'}
            </td>
          `).join('')}
        </tr>
      `).join('');

      // Update pagination info
      const showingStart = document.querySelector('[data-showing-start]');
      const showingEnd = document.querySelector('[data-showing-end]');
      if (showingStart) showingStart.textContent = start + 1;
      if (showingEnd) showingEnd.textContent = Math.min(end, filteredData.length);

      updatePagination();
    };

    // Update pagination controls
    const updatePagination = () => {
      const pagination = table.querySelector('[data-pagination]');
      if (!pagination) return;

      const totalPages = Math.ceil(filteredData.length / itemsPerPage);
      let paginationHTML = '';

      // Previous button
      paginationHTML += `
        <a
          href="${location.pathname}?page=${Math.max(1, currentPage - 1)}"
          class="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 ${currentPage === 1 ? 'opacity-50 cursor-not-allowed' : ''}"
        >
          <span class="sr-only">Previous</span>
          <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
            <path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd" />
          </svg>
        </a>
      `;

      // Page numbers
      for (let i = 1; i <= totalPages; i++) {
        if (
          i === 1 || 
          i === totalPages || 
          (i >= currentPage - 1 && i <= currentPage + 1)
        ) {
          paginationHTML += `
            <a
              href="${location.pathname}?page=${i}"
              class="relative inline-flex items-center px-4 py-2 border border-gray-300 bg-white text-sm font-medium ${
                i === currentPage 
                  ? 'text-blue-600 bg-blue-50'
                  : 'text-gray-700 hover:bg-gray-50'
              }"
            >
              ${i}
            </a>
          `;
        } else if (
          i === currentPage - 2 ||
          i === currentPage + 2
        ) {
          paginationHTML += `
            <span class="relative inline-flex items-center px-4 py-2 border border-gray-300 bg-white text-sm font-medium text-gray-700">
              ...
            </span>
          `;
        }
      }

      // Next button
      paginationHTML += `
        <a
          href="${location.pathname}?page=${Math.min(totalPages, currentPage + 1)}"
          class="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 ${currentPage === totalPages ? 'opacity-50 cursor-not-allowed' : ''}"
        >
          <span class="sr-only">Next</span>
          <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
            <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
          </svg>
        </a>
      `;

      pagination.innerHTML = paginationHTML;
    };

    // Sort column click handlers
    table.querySelectorAll('th').forEach(th => {
      th.addEventListener('click', () => {
        const key = th.querySelector('a').textContent.split(' ')[0];
        if (!key) return;

        const direction = 
          currentSort.key === key && currentSort.direction === 'asc' 
            ? 'desc' 
            : 'asc';

        currentSort = { key, direction };
        filteredData = sortData(key, direction);
        currentPage = 1;
        updateTable();
      });
    });

    // Initialize table
    updateTable();
  });
</script>

<style>
  .data-table-container {
    background-color: var(--color-white);
    border-radius: var(--radius-lg);
    box-shadow: var(--shadow);
  }
</style> 