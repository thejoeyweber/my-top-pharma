---
/**
 * ProductCard Component
 * 
 * Displays a card with product information including name, company, status, and therapeutic areas.
 */
import Card from '../atoms/Card.astro';
import Button from '../atoms/Button.astro';
import { getProductImageUrl } from '../../utils/assetUtils';
import { supabase } from '../../lib/supabase';
import type { Product, Company, TherapeuticArea } from '../../interfaces/entities';

interface Props {
  product: Product;
}

const { product } = Astro.props;

// Helper functions
const getStageName = (stage: string): string => {
  const stageMap = {
    'preclinical': 'Preclinical',
    'phase1': 'Phase 1',
    'phase2': 'Phase 2',
    'phase3': 'Phase 3',
    'approved': 'Approved',
    'market': 'Marketed',
    'discontinued': 'Discontinued'
  };
  return stageMap[stage] || stage;
};

const getStageColor = (stage: string): string => {
  const colorMap = {
    'preclinical': 'blue',
    'phase1': 'indigo',
    'phase2': 'purple',
    'phase3': 'violet',
    'approved': 'green',
    'market': 'emerald',
    'discontinued': 'red'
  };
  return colorMap[stage] || 'gray';
};

// Fetch company data if companyId is provided
let company: Company | null = null;
if (product.companyId) {
  const { data } = await supabase
    .from('companies')
    .select('*')
    .eq('id', product.companyId)
    .single();
  
  if (data) {
    company = {
      id: data.id,
      name: data.name,
      description: data.description || '',
      logoUrl: data.logo_url || '',
      websiteUrl: data.website_url || '',
      headquarters: data.headquarters || '',
      therapeuticAreas: []
    };
  }
}

// Fetch therapeutic areas if available
let therapeuticAreaNames: string[] = [];
if (product.therapeuticAreas && product.therapeuticAreas.length > 0) {
  const { data } = await supabase
    .from('therapeutic_areas')
    .select('name')
    .in('id', product.therapeuticAreas);
  
  if (data) {
    therapeuticAreaNames = data.map(ta => ta.name);
  }
}

// Get product image
const productImage = product.imageUrl || getProductImageUrl(product.name);
---

<Card>
  <div class="p-4">
    <div class="flex flex-col h-full">
      <!-- Product Header -->
      <div class="flex items-center mb-3">
        <div class="flex-1">
          <h3 class="text-lg font-medium text-gray-900">{product.name}</h3>
          {company && <p class="text-sm text-gray-500">{company.name}</p>}
        </div>
        <div class="ml-2">
          <span class={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-${getStageColor(product.stage)}-100 text-${getStageColor(product.stage)}-800`}>
            {getStageName(product.stage)}
          </span>
        </div>
      </div>
      
      <!-- Product Image (if available) -->
      {productImage && (
        <div class="bg-gray-50 rounded-md overflow-hidden mb-3 h-32 flex items-center justify-center">
          <img src={productImage} alt={`${product.name} product`} class="max-h-full max-w-full object-contain" />
        </div>
      )}
      
      <!-- Product Description -->
      <p class="text-sm text-gray-600 line-clamp-3 mb-3 flex-grow">{product.description || 'No description available.'}</p>
      
      <!-- Therapeutic Areas -->
      {therapeuticAreaNames.length > 0 && (
        <div class="mb-3">
          <h4 class="text-xs text-gray-500 mb-1">Therapeutic Areas</h4>
          <div class="flex flex-wrap gap-1">
            {therapeuticAreaNames.slice(0, 3).map(area => (
              <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-blue-100 text-blue-800">
                {area}
              </span>
            ))}
            {therapeuticAreaNames.length > 3 && (
              <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-gray-100 text-gray-800">
                +{therapeuticAreaNames.length - 3} more
              </span>
            )}
          </div>
        </div>
      )}
      
      <!-- Action Button -->
      <div class="mt-auto">
        <Button href={`/products/${product.slug}`} variant="outline" size="sm" fullWidth={true}>
          View Details
        </Button>
      </div>
    </div>
  </div>
</Card> 