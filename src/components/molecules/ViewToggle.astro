---
/**
 * ViewToggle Component
 * 
 * A toggle button group for switching between different view modes (grid/list).
 * Uses server-side rendering with URL parameters.
 */
import { updateViewParams } from '../../lib/utils/urlUtils';

interface ViewOption {
  value: string;
  label: string;
  icon: string;
}

interface Props {
  options?: ViewOption[];
  activeOption?: string;
  name?: string;
  class?: string;
  onChange?: (value: string) => string;
  /**
   * Parameters to preserve when changing view
   * @default ['sort', 'filter']
   */
  preserveParams?: string[];
}

// Default view options if none provided
const defaultOptions: ViewOption[] = [
  {
    value: 'grid',
    label: 'Grid view',
    icon: `<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
      <path d="M5 3a2 2 0 00-2 2v2a2 2 0 002 2h2a2 2 0 002-2V5a2 2 0 00-2-2H5zM5 11a2 2 0 00-2 2v2a2 2 0 002 2h2a2 2 0 002-2v-2a2 2 0 00-2-2H5zM11 5a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V5zM11 13a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z" />
    </svg>`
  },
  {
    value: 'list',
    label: 'List view',
    icon: `<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
      <path fill-rule="evenodd" d="M3 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clip-rule="evenodd" />
    </svg>`
  }
];

const {
  options = defaultOptions,
  activeOption = 'grid',
  name = 'view',
  class: className = "",
  onChange,
  preserveParams = ['sort', 'filter']
} = Astro.props;

// Generate the URL for each option
function getOptionUrl(value: string): string {
  // If a custom onChange function is provided, use it
  if (onChange) {
    return onChange(value);
  }
  
  // Otherwise use the updateViewParams utility to preserve important parameters
  return updateViewParams(value, Astro.url.href, preserveParams);
}
---

<div class:list={["view-toggle", className]}>
  <span class="sr-only">View options</span>
  <div class="inline-flex rounded-md shadow-sm" role="group">
    {options.map((option, index) => (
      <a
        href={getOptionUrl(option.value)}
        class:list={[
          "view-toggle-btn py-1.5 px-3 text-sm font-medium focus:z-10 focus:ring-2 focus:ring-primary-500 focus:outline-none",
          index === 0 ? "rounded-l-md" : "",
          index === options.length - 1 ? "rounded-r-md" : "",
          option.value === activeOption
            ? "bg-primary-600 text-white hover:bg-primary-700"
            : "bg-white text-gray-700 hover:bg-gray-50 border border-gray-300",
          index > 0 && option.value !== activeOption ? "-ml-px" : "",
        ]}
        aria-label={option.label}
        title={option.label}
        aria-current={option.value === activeOption ? "page" : undefined}
      >
        <span set:html={option.icon} />
      </a>
    ))}
  </div>
</div> 