---
/**
 * WebsiteCard Component
 * 
 * Displays a website's information in a card format.
 */
import Card from '../atoms/Card.astro';
// Remove direct Supabase import
// import { supabase } from '../../lib/supabase';
import type { Website } from '../../interfaces/entities';

interface Props {
  website: Website;
  companyName?: string; // Add company name as a prop
  therapeuticAreaNames?: string[]; // Add therapeutic area names as a prop
}

const { 
  website, 
  companyName = '', 
  therapeuticAreaNames = [] // Use empty array as default 
} = Astro.props;

// Remove Supabase fetching code for company
// let companyName = '';
// if (website.companyId) {
//   const { data } = await supabase
//     .from('companies')
//     .select('name')
//     .eq('id', website.companyId)
//     .single();
//   
//   if (data) {
//     companyName = data.name;
//   }
// }

// Remove Supabase fetching code for therapeutic areas
// let therapeuticAreaNames: string[] = [];
// if (website.therapeuticAreas && website.therapeuticAreas.length > 0) {
//   const { data } = await supabase
//     .from('therapeutic_areas')
//     .select('name')
//     .in('id', website.therapeuticAreas);
//   
//   if (data) {
//     therapeuticAreaNames = data.map(ta => ta.name);
//   }
// }

// Format URL for display
const formatUrl = (url: string): string => {
  if (!url) return '';
  return url.replace(/^https?:\/\/(www\.)?/, '').replace(/\/$/, '');
};

// Get the proper link URL for the website detail page
// Using proper slug and providing a fallback when slug is missing
const getWebsiteDetailUrl = (): string => {
  if (!website.slug) {
    // Create a fallback using the URL or ID
    console.warn(`Website is missing slug: ${website.url}`);
    // Use ID as fallback or URL-derived slug if available
    return `/websites/${website.id || encodeURIComponent(formatUrl(website.url))}`;
  }
  return `/websites/${website.slug}`;
};
---

<Card class="h-full">
  <div class="p-4 flex flex-col h-full">
    <div class="mb-3">
      <h3 class="text-lg font-semibold text-gray-900 mb-1">{website.siteName ?? website.url}</h3>
      <a href={website.url?.startsWith('http') ? website.url : `https://${website.url}`} target="_blank" rel="noopener noreferrer" class="text-sm text-blue-600 hover:underline break-all">
        {formatUrl(website.url)}
      </a>
      </div>
      
    {companyName && (
      <div class="mb-3">
        <span class="text-xs font-medium text-gray-500">Company</span>
        <p class="text-sm font-medium text-gray-800">{companyName}</p>
      </div>
    )}
    
    <p class="text-sm text-gray-600 mb-4 flex-grow line-clamp-3">{website.description || 'No description available'}</p>
    
    <div class="mt-auto">
      {therapeuticAreaNames.length > 0 && (
        <div class="flex flex-wrap gap-1 mb-3">
          {therapeuticAreaNames.slice(0, 3).map((area: string) => (
            <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-blue-100 text-blue-800">
              {area}
            </span>
          ))}
          {therapeuticAreaNames.length > 3 && (
            <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-gray-100 text-gray-800">
              +{therapeuticAreaNames.length - 3}
            </span>
          )}
        </div>
      )}
      
      <div class="text-right">
        <a 
          href={getWebsiteDetailUrl()}
          class="inline-flex items-center justify-center px-3 py-1.5 text-xs font-medium rounded-md bg-blue-600 text-white hover:bg-blue-700 transition-colors"
        >
          View Details
        </a>
      </div>
    </div>
  </div>
</Card> 