---
/**
 * Follow Button Component
 * 
 * A button component that allows users to follow/unfollow entities like companies, products, etc.
 * This uses localStorage to persist follow states without authentication.
 */

import Button from '../atoms/Button.astro';

interface Props {
  entityId: string;
  entityType: 'company' | 'product' | 'therapeutic_area';
  isFollowing?: boolean;
  size?: 'sm' | 'md' | 'lg';
  class?: string;
}

const {
  entityId,
  entityType,
  isFollowing = false,
  size = 'md',
  class: className = '',
} = Astro.props;

// Generate a unique ID for this button instance
const buttonId = `follow-button-${entityType}-${entityId}`;

// Generate the localStorage key for this entity
const storageKey = `pharma_followed_${entityType}_${entityId}`;
---

<div class:list={["follow-button-container", className]} data-entity-id={entityId} data-entity-type={entityType}>
  <Button
    id={buttonId}
    type="button"
    variant={isFollowing ? "outline" : "primary"}
    size={size}
    class:list={[
      "follow-button",
      isFollowing ? "following" : "",
    ]}
  >
    <span class="follow-icon inline-block mr-1">
      {isFollowing ? (
        <svg class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
        </svg>
      ) : (
        <svg class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
        </svg>
      )}
    </span>
    <span class="follow-text">{isFollowing ? 'Following' : 'Follow'}</span>
  </Button>
</div>

<script define:vars={{ buttonId, entityId, entityType, storageKey }}>
  // Client-side script for handling follow/unfollow actions with localStorage
  document.addEventListener('DOMContentLoaded', () => {
    const button = document.getElementById(buttonId);
    
    if (button) {
      // Initialize state from localStorage on page load
      const storedState = localStorage.getItem(storageKey);
      const isCurrentlyFollowing = storedState === 'true';
      
      // Update initial button appearance based on localStorage
      if (isCurrentlyFollowing) {
        button.classList.add('following');
        button.classList.add('bg-white');
        button.classList.remove('bg-primary-600');
        button.classList.remove('text-white');
        button.classList.add('text-gray-700');
        button.classList.add('border-gray-300');
        
        const textSpan = button.querySelector('.follow-text');
        if (textSpan) {
          textSpan.textContent = 'Following';
        }
        
        const iconSpan = button.querySelector('.follow-icon');
        if (iconSpan) {
          iconSpan.innerHTML = `
            <svg class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
            </svg>
          `;
        }
      }
      
      button.addEventListener('click', () => {
        // Toggle following state
        const isCurrentlyFollowing = button.classList.contains('following');
        
        // Store the new state in localStorage
        localStorage.setItem(storageKey, (!isCurrentlyFollowing).toString());
        
        if (isCurrentlyFollowing) {
          // Unfollow
          button.classList.remove('following');
          button.classList.remove('bg-white');
          button.classList.add('bg-primary-600');
          button.classList.add('text-white');
          button.classList.remove('text-gray-700');
          button.classList.remove('border-gray-300');
          
          // Update icon and text
          const iconSpan = button.querySelector('.follow-icon');
          if (iconSpan) {
            iconSpan.innerHTML = `
              <svg class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
              </svg>
            `;
          }
          
          const textSpan = button.querySelector('.follow-text');
          if (textSpan) {
            textSpan.textContent = 'Follow';
          }
        } else {
          // Follow
          button.classList.add('following');
          button.classList.add('bg-white');
          button.classList.remove('bg-primary-600');
          button.classList.remove('text-white');
          button.classList.add('text-gray-700');
          button.classList.add('border-gray-300');
          
          // Update icon and text
          const iconSpan = button.querySelector('.follow-icon');
          if (iconSpan) {
            iconSpan.innerHTML = `
              <svg class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
              </svg>
            `;
          }
          
          const textSpan = button.querySelector('.follow-text');
          if (textSpan) {
            textSpan.textContent = 'Following';
          }
        }
        
        // Dispatch a custom event that other components can listen for
        const event = new CustomEvent('followStatusChanged', {
          detail: {
            entityId,
            entityType,
            isFollowing: !isCurrentlyFollowing
          },
          bubbles: true
        });
        
        button.dispatchEvent(event);
      });
    }
  });
</script> 