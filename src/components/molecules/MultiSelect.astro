---
/**
 * MultiSelect Component
 * 
 * A dropdown component that allows users to select multiple options.
 * Designed for server-side filtering via form submission.
 */

interface Option {
  value: string;
  label: string;
}

interface Props {
  options: Option[];
  selected: string[];
  name: string;
  label?: string;
  placeholder?: string;
  class?: string;
  onChange?: (values: string[]) => void;
}

const {
  options,
  selected = [],
  name,
  label,
  placeholder = "Select options...",
  class: className = "",
  onChange
} = Astro.props;

// For display in the button
const selectedCount = selected.length;
const displayText = selectedCount > 0 ? `${selectedCount} selected` : placeholder;

// Get labels for selected values (for display)
const selectedLabels = options
  .filter(option => selected.includes(option.value))
  .map(option => option.label);
---

<div class:list={["multi-select relative", className]}>
  {label && <label class="block text-sm font-medium text-gray-700 mb-1">{label}</label>}
  
  <details class="relative w-full">
    <summary 
      class="flex w-full items-center justify-between rounded-md border border-gray-300 bg-white py-2 px-3 text-sm text-gray-500 shadow-sm focus:border-primary-500 focus:outline-none focus:ring-1 focus:ring-primary-500 cursor-pointer"
    >
      <span class="block truncate">
        {displayText}
      </span>
      <span class="pointer-events-none ml-2">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-400" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
          <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
        </svg>
      </span>
    </summary>

    <div class="absolute z-10 mt-1 max-h-60 w-full overflow-auto rounded-md bg-white py-1 text-base shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none sm:text-sm">
      {options.length > 10 && (
        <div class="sticky top-0 z-10 bg-white px-2 py-1.5">
          <div class="relative">
            <div class="absolute inset-y-0 left-0 flex items-center pl-2">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
              </svg>
            </div>
            <input
              type="text" 
              class="filter-input w-full rounded-md border-0 py-1.5 pl-8 pr-2 text-sm text-gray-900 focus:ring-2 focus:ring-primary-600"
              placeholder="Search options..."
            />
          </div>
        </div>
      )}

      <div class="max-h-56 overflow-auto py-1">
        {options.map((option) => (
          <label
            class="relative flex items-center py-2 px-3 cursor-pointer select-none hover:bg-primary-50 option-item"
            data-value={option.value}
            data-label={option.label}
          >
            <input
              type="checkbox"
              name={`${name}[]`}
              value={option.value}
              checked={selected.includes(option.value)}
              class="h-4 w-4 rounded border-gray-300 text-primary-600 focus:ring-primary-600"
              onchange={onChange && `(function() { 
                const values = Array.from(document.querySelectorAll('input[name="${name}[]"]:checked')).map(el => el.value);
                (${onChange.toString()})(values);
              })()`}
            />
            <span class="ml-2 truncate">{option.label}</span>
          </label>
        ))}
      </div>
    </div>
  </details>
</div>

<script>
  // Simple client-side filtering for the options
  document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('.filter-input').forEach(input => {
      input.addEventListener('input', (e) => {
        const value = (e.target as HTMLInputElement).value.toLowerCase();
        const container = (e.target as HTMLElement).closest('details');
        
        container?.querySelectorAll('.option-item').forEach(item => {
          const label = (item as HTMLElement).dataset.label?.toLowerCase() || '';
          if (label.includes(value)) {
            (item as HTMLElement).style.display = '';
          } else {
            (item as HTMLElement).style.display = 'none';
          }
        });
      });
    });
  });
</script> 