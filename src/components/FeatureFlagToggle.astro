---
/**
 * Feature Flag Toggle Component
 * 
 * A development-only component that provides a UI for toggling feature flags.
 * This allows for easier testing of the transition from static data to database sources.
 * The component only renders in development mode.
 */

import { FEATURES, getAllFeatureFlags } from '../utils/featureFlags';
import type { FeatureFlag } from '../utils/featureFlags';

// Only render in development mode
const isProduction = import.meta.env.PROD;

// Helper function to format feature flag names for display
const formatFeatureFlagName = (flag: string): string => {
  return flag
    .replace(/_/g, ' ')
    .replace(/\b\w/g, char => char.toUpperCase());
};

// Get all feature flags
const featureFlags = !isProduction 
  ? Object.keys(getAllFeatureFlags()).map(key => key as FeatureFlag)
  : [];
---

{!isProduction && (
  <div class="feature-flag-toggle">
    <div class="flex justify-between items-center mb-2">
      <h3 class="font-bold text-base m-0">Feature Flags</h3>
      <div>
        <button 
          id="toggle-panel-btn"
          class="bg-slate-200 border-none px-2 py-1 rounded text-xs cursor-pointer hover:bg-slate-300"
        >
          Show
        </button>
        <button 
          id="reset-btn"
          class="bg-red-400 text-white border-none px-2 py-1 rounded text-xs cursor-pointer ml-2 hidden hover:bg-red-500"
        >
          Reset
        </button>
      </div>
    </div>
    
    <div id="flag-toggles" class="hidden">
      {featureFlags.map((flag) => (
        <div class="flex justify-between items-center mb-2">
          <span class="text-sm">{formatFeatureFlagName(flag)}</span>
          <label class="relative inline-block w-9 h-5">
            <input
              type="checkbox"
              class="opacity-0 w-0 h-0"
              data-flag={flag}
            />
            <span class="toggle-slider">
              <span class="toggle-knob"></span>
            </span>
          </label>
        </div>
      ))}
      
      <p class="text-xs text-slate-500 mt-3">
        Toggle flags to switch between database and static data. Refresh the page to see changes.
      </p>
    </div>
  </div>
)}

<script>
  import { getAllFeatureFlags, resetFeatureFlags, setFeatureFlag } from '../utils/featureFlags';
  
  // Only execute in development mode
  if (import.meta.env.DEV) {
    // DOM elements
    const featureFlagToggle = document.querySelector('.feature-flag-toggle');
    const togglePanelBtn = document.getElementById('toggle-panel-btn');
    const resetBtn = document.getElementById('reset-btn');
    const flagToggles = document.getElementById('flag-toggles');
    const toggleInputs = document.querySelectorAll('input[type="checkbox"][data-flag]');
    
    if (featureFlagToggle && togglePanelBtn && resetBtn && flagToggles) {
      // Initialize toggle states
      updateToggleStates();
      
      // Toggle panel visibility
      togglePanelBtn.addEventListener('click', () => {
        const isHidden = flagToggles.classList.contains('hidden');
        if (isHidden) {
          flagToggles.classList.remove('hidden');
          resetBtn.classList.remove('hidden');
          togglePanelBtn.textContent = 'Hide';
        } else {
          flagToggles.classList.add('hidden');
          resetBtn.classList.add('hidden');
          togglePanelBtn.textContent = 'Show';
        }
      });
      
      // Reset feature flags
      resetBtn.addEventListener('click', async () => {
        try {
          // Get current URL for redirect
          const currentUrl = window.location.href;
          
          // Call the API to reset all flags with redirect
          const response = await fetch('/api/reset-feature-flags', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              redirectUrl: currentUrl
            })
          });
          
          if (response.redirected) {
            // Follow the redirect provided by the server
            window.location.href = response.url;
          } else if (response.ok) {
            // If no redirect, reload the page
            window.location.reload();
          } else {
            console.error('Failed to reset feature flags');
            // Fallback to local reset
            resetFeatureFlags();
            updateToggleStates();
            window.dispatchEvent(new Event('storage'));
          }
        } catch (error) {
          console.error('Error resetting feature flags:', error);
          // Fallback to local reset
          resetFeatureFlags();
          updateToggleStates();
          window.dispatchEvent(new Event('storage'));
        }
      });
      
      // Toggle individual flags
      toggleInputs.forEach(input => {
        input.addEventListener('change', async (event) => {
          const target = event.target as HTMLInputElement;
          const flag = target.dataset.flag as string;
          const isChecked = target.checked;
          
          try {
            // Get current URL for redirect
            const currentUrl = window.location.href;
            
            // Call the API endpoint to set the flag with redirect
            const response = await fetch('/api/toggle-feature-flag', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                flag: flag,
                value: isChecked,
                redirectUrl: currentUrl
              })
            });
            
            if (response.redirected) {
              // Follow the redirect provided by the server
              window.location.href = response.url;
            } else if (response.ok) {
              // If no redirect, reload the page
              window.location.reload();
            } else {
              console.error('Failed to toggle feature flag');
              // Fall back to the local implementation if API fails
              setFeatureFlag(flag, isChecked);
              window.dispatchEvent(new Event('storage'));
            }
          } catch (error) {
            console.error('Error toggling feature flag:', error);
            // Fall back to the local implementation if API fails
            setFeatureFlag(flag, isChecked);
            window.dispatchEvent(new Event('storage'));
          }
        });
      });
      
      // Update toggle states from current values
      function updateToggleStates() {
        const flags = getAllFeatureFlags();
        
        toggleInputs.forEach(input => {
          const inputElement = input as HTMLInputElement;
          const flag = inputElement.dataset.flag as string;
          
          if (flag in flags) {
            inputElement.checked = flags[flag];
          }
        });
      }
      
      // Listen for storage events (when flags are changed elsewhere)
      window.addEventListener('storage', updateToggleStates);
    }
  }
</script>