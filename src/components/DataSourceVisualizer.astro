---
/**
 * Data Source Visualizer Component
 * 
 * This component displays a badge showing Supabase as the data source.
 * It's useful for development and testing.
 * 
 * Usage:
 * <DataSourceVisualizer contentType="companies" />
 */

import { supabase } from '../lib/supabase';

interface Props {
  /**
   * The content type to display (used for display purposes only)
   */
  contentType?: string;
  
  /**
   * Optional additional CSS classes
   */
  class?: string;
  
  /**
   * Optional title text
   */
  title?: string;
  
  /**
   * Whether to show the full badge with details (default) or just a minimal indicator
   */
  minimal?: boolean;
  
  /**
   * Whether the badge should be collapsible
   */
  collapsible?: boolean;
  
  /**
   * Initial visibility state
   */
  initiallyExpanded?: boolean;
}

const { 
  contentType,
  class: className = '',
  title = 'Data Source:',
  minimal = false,
  collapsible = true,
  initiallyExpanded = true
} = Astro.props;

// Data source is now always Supabase
const dataSourceType = 'supabase';
const instanceId = import.meta.env.PUBLIC_SUPABASE_URL;

// Generate ID for this instance
const badgeId = `datasource-vis-${Math.random().toString(36).substring(2, 10)}`;
const badgeColorClass = 'bg-emerald-100 border-emerald-300 text-emerald-800';
const iconSvg = `<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 12h14M5 12a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v4a2 2 0 01-2 2M5 12a2 2 0 00-2 2v4a2 2 0 002 2h14a2 2 0 002-2v-4a2 2 0 00-2-2m-2-4h.01M17 16h.01" />
</svg>`;
---

<div 
  id={badgeId}
  class:list={[
    'datasource-visualizer relative rounded border shadow-sm p-1 font-sans text-xs',
    badgeColorClass,
    className,
    { 'inline-flex items-center': !minimal }
  ]}
  data-source-type={dataSourceType}
  data-collapsed={(!initiallyExpanded).toString()}
>
  {!minimal && (
    <>
      <span class="flex items-center datasource-badge" set:html={iconSvg} />
      
      {collapsible && (
        <button 
          class="toggle-btn ml-1.5 mr-0.5 focus:outline-none text-opacity-60 hover:text-opacity-100"
          title="Toggle details"
          aria-label="Toggle data source details"
        >
          <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
        </button>
      )}
      
      <div class:list={["data-label flex items-center ml-0.5", { 'hidden': !initiallyExpanded && collapsible }]}>
        <span class="font-medium mr-1">{title}</span>
        <span class="source-name">{dataSourceType}</span>
        {contentType && (
          <span class="ml-1 text-opacity-80">[{contentType}]</span>
        )}
        {instanceId && (
          <span class="text-opacity-70 ml-1.5 text-[10px] truncate max-w-[100px]">{instanceId}</span>
        )}
      </div>
    </>
  )}
  
  {minimal && (
    <div 
      class="w-2 h-2 rounded-full" 
      title={`Data Source: ${dataSourceType}${contentType ? ` (${contentType})` : ''}`}
    ></div>
  )}
</div>

<script>
  // Initialize all data source visualizers on the page
  function initializeDataSourceVisualizers() {
    // Find all badges on the page
    document.querySelectorAll('.datasource-visualizer').forEach(badge => {
      if (!(badge instanceof HTMLElement)) return;
      
      // Find toggle button and data label for this badge
      const toggleBtn = badge.querySelector('.toggle-btn');
      const dataLabel = badge.querySelector('.data-label');
      
      // Skip if this badge doesn't have toggle functionality
      if (!toggleBtn || !dataLabel) return;
      
      // Check initial state from data attribute
      const initiallyCollapsed = badge.dataset.collapsed === 'true';
      if (initiallyCollapsed && dataLabel) {
        dataLabel.classList.add('hidden');
      }
      
      // Function to collapse the badge
      const collapse = () => {
        if (dataLabel) dataLabel.classList.add('hidden');
        badge.dataset.collapsed = 'true';
      };
      
      // Function to expand the badge
      const expand = () => {
        if (dataLabel) dataLabel.classList.remove('hidden');
        badge.dataset.collapsed = 'false';
      };
      
      // Toggle on button click
      toggleBtn.addEventListener('click', () => {
        const isCollapsed = dataLabel.classList.contains('hidden');
        if (isCollapsed) {
          expand();
        } else {
          collapse();
        }
      });
      
      // Double-click on the badge to toggle all badges
      badge.addEventListener('dblclick', (e) => {
        e.preventDefault();
        
        const isCollapsed = dataLabel.classList.contains('hidden');
        const allBadges = document.querySelectorAll('.datasource-visualizer');
        
        allBadges.forEach(otherBadge => {
          const otherToggleBtn = otherBadge.querySelector('.toggle-btn');
          const otherDataLabel = otherBadge.querySelector('.data-label');
          
          if (otherToggleBtn && otherDataLabel) {
            const otherIsCollapsed = otherDataLabel.classList.contains('hidden');
            
            // Match the state of this badge
            if (isCollapsed && otherIsCollapsed) {
              // Expand other
              otherDataLabel.classList.remove('hidden');
              otherBadge.dataset.collapsed = 'false';
            } else if (!isCollapsed && !otherIsCollapsed) {
              // Collapse other
              otherDataLabel.classList.add('hidden');
              otherBadge.dataset.collapsed = 'true';
            }
          }
        });
      });
    });
  }
  
  // Run on page load and after content changes
  document.addEventListener('DOMContentLoaded', initializeDataSourceVisualizers);
  document.addEventListener('astro:page-load', initializeDataSourceVisualizers);
</script>

<style>
  .datasource-visualizer .collapsed {
    max-width: 2.5rem;
    overflow: hidden;
  }
  
  .toggle-btn:hover {
    opacity: 0.8;
  }
  
  .datasource-badge {
    justify-content: center;
    align-items: center;
    width: 1rem;
    height: 1rem;
  }
  
  .source-name {
    font-weight: 600;
  }
  
  /* Minimal style */
  .datasource-visualizer:not(.inline-flex) .w-2 {
    background-color: #059669;
  }
</style> 