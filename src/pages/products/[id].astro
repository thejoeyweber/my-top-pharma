---
/**
 * Product Detail Page
 * 
 * Displays detailed information about a specific pharmaceutical product.
 */
import DashboardLayout from '../../components/templates/DashboardLayout.astro';
import Card from '../../components/atoms/Card.astro';
import Button from '../../components/atoms/Button.astro';
import FollowButton from '../../components/molecules/FollowButton.astro';
import TabGroup from '../../components/molecules/TabGroup.astro';
import Timeline from '../../components/molecules/Timeline.astro';
import DataTable from '../../components/molecules/DataTable.astro';
import ProductCard from '../../components/molecules/ProductCard.astro';

// Import Supabase client directly
import { supabase } from '../../lib/supabase';
import { dbProductToProduct } from '../../interfaces/entities/Product';
import { dbCompanyToCompany } from '../../interfaces/entities/Company';
import { dbWebsiteToWebsite } from '../../interfaces/entities/Website';
import { dbTherapeuticAreaToTherapeuticArea } from '../../interfaces/entities/TherapeuticArea';
import type { Product, Company, Website, TherapeuticArea } from '../../interfaces/entities';

import { getProductImageUrl } from '../../utils/assetUtils';
import { generateSlug } from '../../utils/stringUtils';

// Helper function to get stage name
const getStageName = (stage: string): string => {
  const stageMap = {
    'preclinical': 'Preclinical',
    'phase1': 'Phase 1',
    'phase2': 'Phase 2',
    'phase3': 'Phase 3',
    'approved': 'Approved',
    'market': 'Marketed',
    'discontinued': 'Discontinued'
  };
  return stageMap[stage] || stage;
};

// Generate static paths for all products
export async function getStaticPaths() {
  const { data: dbProducts } = await supabase
    .from('products')
    .select('id, slug, name');
    
  return (dbProducts || []).map(product => ({
    params: { 
      id: product.slug
    },
    props: { productId: product.id }
  }));
}

// Get product ID or slug from URL parameters
const { id } = Astro.params;
const { productId } = Astro.props;

// Fetch product data directly from Supabase - first try by ID from props, then by slug
let productResponse;

if (productId) {
  productResponse = await supabase
    .from('products')
    .select('*')
    .eq('id', productId)
    .single();
}

// If not found or ID not provided, try to fetch by slug
if (!productResponse || productResponse.error || !productResponse.data) {
  productResponse = await supabase
    .from('products')
    .select('*')
    .eq('slug', id)
    .single();
    
  // Last resort, try to fetch by ID as fallback
  if (productResponse.error || !productResponse.data) {
    productResponse = await supabase
      .from('products')
      .select('*')
      .eq('id', id)
      .single();
  }
}

const { data: dbProduct, error: productError } = productResponse;

// Handle product not found
if (productError || !dbProduct) {
  return Astro.redirect('/products');
}

// Convert database record to application entity
const product = dbProductToProduct(dbProduct);

// Ensure product.approvals is initialized
if (!product.approvals) {
  product.approvals = [];
}

// Fetch company that manufactures the product
const { data: dbCompany } = await supabase
  .from('companies')
  .select('*')
  .eq('id', product.companyId)
  .single();

// Convert company data to entity
const company = dbCompany ? dbCompanyToCompany(dbCompany) : null;

// Fetch therapeutic areas for this product
const { data: productTARelations } = await supabase
  .from('product_therapeutic_areas')
  .select('therapeutic_area_id')
  .eq('product_id', id);

const therapeuticAreaIds = (productTARelations || []).map(rel => rel.therapeutic_area_id);
let therapeuticAreas: TherapeuticArea[] = [];

if (therapeuticAreaIds.length > 0) {
  const { data: dbTherapeuticAreas } = await supabase
    .from('therapeutic_areas')
    .select('*')
    .in('id', therapeuticAreaIds);
  
  therapeuticAreas = (dbTherapeuticAreas || []).map(dbTherapeuticAreaToTherapeuticArea);
}

// Fetch websites associated with this product
const { data: productWebsites } = await supabase
  .from('product_websites')
  .select('website_id')
  .eq('product_id', id);

const websiteIds = (productWebsites || []).map(rel => rel.website_id);
let websites: Website[] = [];

if (websiteIds.length > 0) {
  const { data: dbWebsites } = await supabase
    .from('websites')
    .select('*')
    .in('id', websiteIds);
  
  websites = (dbWebsites || []).map(dbWebsiteToWebsite);
}

// Fetch related products (same therapeutic areas)
const { data: relatedProductsRelations } = await supabase
  .from('product_therapeutic_areas')
  .select('product_id')
  .in('therapeutic_area_id', therapeuticAreaIds)
  .neq('product_id', id)
  .limit(5);

const relatedProductIds = [...new Set((relatedProductsRelations || []).map(rel => rel.product_id))];
let relatedProducts: Product[] = [];

if (relatedProductIds.length > 0) {
  const { data: dbRelatedProducts } = await supabase
    .from('products')
    .select('*')
    .in('id', relatedProductIds);
  
  relatedProducts = (dbRelatedProducts || []).map(dbProductToProduct);
}

// Function to get therapeutic area name
const getTherapeuticAreaName = (id: string) => {
  const area = therapeuticAreas.find(a => a.id === id);
  return area ? area.name : id;
};

// Set up breadcrumbs for navigation
const breadcrumbs = [
  { label: 'Home', href: '/' },
  { label: 'Products', href: '/products' },
  { label: product.name, href: `/products/${product.id}`, active: true }
];

// Function to get category label
const getCategoryLabel = (categoryId: string) => {
  const category = websites.find(c => c.value === categoryId);
  return category ? category.label : categoryId;
};

// Group websites by category for display
const websitesByCategory = websites.reduce((acc, website) => {
  const category = website.category || 'other';
  if (!acc[category]) {
    acc[category] = [];
  }
  acc[category].push(website);
  return acc;
}, {} as Record<string, any[]>);

// Default tab is "overview"
const activeTab = "overview";

// Define tabs
const tabs = [
  { id: "overview", label: "Overview", icon: '<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>' },
  { id: "websites", label: "Official Websites", icon: '<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9a9 9 0 01-9-9m9 9c1.657 0 3-4.03 3-9s-1.343-9-3-9m0 18c-1.657 0-3-4.03-3-9s1.343-9 3-9m-9 9a9 9 0 019-9" /></svg>' },
  { id: "regulatory", label: "Regulatory", icon: '<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z" /></svg>' },
  { id: "timeline", label: "Development Timeline", icon: '<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6" /></svg>' },
  { id: "patents", label: "Patents", icon: '<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" /></svg>' },
];

// Format date helper
const formatDate = (dateString: string) => {
  const date = new Date(dateString);
  return date.toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' });
};
---

<DashboardLayout
  title={`${product.name} | Top Pharma`}
  description={`Detailed information about ${product.name} (${product.genericName || 'no generic name'}), a ${product.moleculeType} for ${product.indications.join(', ')}`}
  currentPath={`/products/${product.id}`}
  breadcrumbs={breadcrumbs}
>
  <div class="space-y-6">
    <!-- Product Header Section -->
    <div class="bg-white shadow rounded-lg overflow-hidden border border-gray-200">
      <div class="p-6">
        <div class="sm:flex sm:items-center sm:justify-between">
          <div>
            <div class="flex items-center">
              <h1 class="text-2xl font-bold text-gray-900">{product.name}</h1>
              <span class="ml-3 inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium" style={
                product.stage === 'marketed' || product.stage === 'approved' 
                  ? 'background-color:var(--color-green-100, #dcfce7); color:var(--color-green-800, #166534)' 
                  : product.stage === 'submitted'
                  ? 'background-color:var(--color-yellow-100, #fef9c3); color:var(--color-yellow-800, #854d0e)'
                  : 'background-color:var(--color-blue-100, #dbeafe); color:var(--color-blue-800, #1e40af)'
              }>
                {getStageName(product.stage)}
              </span>
            </div>
            {product.genericName && (
              <p class="mt-1 text-sm text-gray-500 italic">{product.genericName}</p>
            )}
            <p class="mt-1 max-w-2xl text-sm text-gray-500">
              {product.moleculeType} â€¢ {product.indications && product.indications.length > 0 ? product.indications.join(', ') : 'No indications listed'}
            </p>
          </div>
          {product.website && (
            <div class="mt-5 sm:mt-0">
              <a
                href={product.website}
                target="_blank"
                rel="noopener noreferrer"
                class="inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[color:var(--color-primary-500)]"
              >
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
                </svg>
                Visit Website
              </a>
            </div>
          )}
        </div>
        
        {company && (
          <div class="mt-4 flex items-center">
            <div class="flex items-center text-sm text-gray-600">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4" />
              </svg>
              <span class="mr-1">Developed by:</span>
              <a href={`/companies/${company.slug}`} class="font-medium text-[color:var(--color-primary-600)] hover:underline">
                {company.name}
              </a>
            </div>
          </div>
        )}
      </div>
    </div>
    
    <!-- Tabs Navigation -->
    <TabGroup tabs={tabs} activeTab={activeTab} tabPanelId="product-tab-content" />
    
    <!-- Tab Content -->
    <div id="tab-content">
      <!-- Overview Tab -->
      <div id="product-tab-content-overview" role="tabpanel" aria-labelledby="tab-overview">
        <div class="space-y-6">
          <!-- Basic product information card -->
          <Card>
            <div class="p-6">
              <h2 class="text-lg font-medium text-gray-900 mb-4">Product Description</h2>
              <p class="text-gray-600">{product.description}</p>
              
              <div class="mt-6">
                <h3 class="text-sm font-medium text-gray-900 mb-2">Therapeutic Areas</h3>
                <div class="flex flex-wrap gap-2">
                  {product.therapeuticAreas && product.therapeuticAreas.map(area => (
                    <span class="inline-flex items-center px-3 py-0.5 rounded-full text-sm font-medium bg-[color:var(--color-primary-50)] text-[color:var(--color-primary-700)]">
                      {getTherapeuticAreaName(area)}
                    </span>
                  ))}
                </div>
              </div>
              
              <div class="mt-6">
                <h3 class="text-sm font-medium text-gray-900 mb-2">Indications</h3>
                <ul class="list-disc pl-5 text-gray-600">
                  {product.indications && product.indications.map(indication => (
                    <li>{indication}</li>
                  ))}
                </ul>
              </div>
            </div>
          </Card>
          
          <!-- Official Websites Section -->
          <Card>
            <div class="p-6">
              <div class="flex items-center justify-between mb-4">
                <h2 class="text-xl font-medium text-gray-900">Official Websites</h2>
                <a href="#tab-websites" class="text-sm text-blue-600 hover:text-blue-800" onclick="switchTab('websites')">
                  View all
                </a>
              </div>
              
              {websites.length === 0 ? (
                <p class="text-gray-500">No official websites found for this product.</p>
              ) : (
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                  {websites.slice(0, 3).map(website => (
                    <div class="bg-white rounded-lg border border-gray-200 shadow-sm overflow-hidden">
                      <div class="p-4">
                        <div class="flex justify-between items-start">
                          <h4 class="font-medium text-gray-900 mb-1">{website.domain}</h4>
                          <span class="inline-flex items-center rounded-full bg-blue-50 px-2 py-1 text-xs font-medium text-blue-700">
                            {getCategoryLabel(website.category)}
                          </span>
                        </div>
                        
                        <div class="flex justify-between items-center mt-3">
                          <a 
                            href={`/websites/${website.slug}`} 
                            class="text-sm text-blue-600 hover:text-blue-800 font-medium"
                          >
                            View details
                          </a>
                          
                          <a 
                            href={`https://${website.domain}`} 
                            target="_blank" 
                            rel="noopener noreferrer" 
                            class="inline-flex items-center text-sm text-gray-500 hover:text-gray-700"
                          >
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
                            </svg>
                            Visit site
                          </a>
                        </div>
                      </div>
                    </div>
                  ))}
                  
                  {websites.length > 3 && (
                    <div class="bg-gray-50 rounded-lg border border-gray-200 shadow-sm overflow-hidden flex items-center justify-center">
                      <a href="#tab-websites" class="p-4 text-blue-600 hover:text-blue-800 font-medium text-center" onclick="switchTab('websites')">
                        View {websites.length - 3} more websites
                      </a>
                    </div>
                  )}
                </div>
              )}
            </div>
          </Card>
          
          <!-- Websites Tab Content -->
          <div id="tab-content-websites" role="tabpanel" aria-labelledby="tab-websites" class="space-y-6 hidden">
            <Card>
              <div class="p-6">
                <h2 class="text-xl font-medium text-gray-900 mb-4">Product Websites</h2>
                
                {websites.length === 0 ? (
                  <div class="bg-gray-50 rounded-lg p-6 text-center">
                    <p class="text-gray-500">No official websites found for this product.</p>
                    <p class="text-sm text-gray-400 mt-1">This product may be featured on the company's main website.</p>
                  </div>
                ) : (
                  <div class="space-y-6">
                    {Object.entries(websitesByCategory).map(([category, websites]) => (
                      <div class="space-y-3">
                        <h3 class="text-lg font-medium text-gray-900">{getCategoryLabel(category)}</h3>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                          {websites.map(website => (
                            <div class="bg-white rounded-lg border border-gray-200 shadow-sm overflow-hidden">
                              <div class="flex flex-col md:flex-row">
                                {website.screenshotUrl && (
                                  <div class="md:w-1/3 relative h-40 md:h-auto">
                                    <img 
                                      src={getProductImageUrl(website.domain)} 
                                      alt={`Screenshot of ${website.domain}`}
                                      class="absolute inset-0 w-full h-full object-cover"
                                    />
                                  </div>
                                )}
                                <div class={`p-4 ${website.screenshotUrl ? 'md:w-2/3' : 'w-full'}`}>
                                  <div class="flex justify-between items-start">
                                    <h4 class="font-medium text-gray-900 mb-1">{website.domain}</h4>
                                    <span class="inline-flex items-center rounded-full bg-blue-50 px-2 py-1 text-xs font-medium text-blue-700">
                                      {getCategoryLabel(website.category)}
                                    </span>
                                  </div>
                                  
                                  {website.siteName && (
                                    <p class="text-sm text-gray-500 mb-2">{website.siteName}</p>
                                  )}
                                  
                                  <p class="text-sm text-gray-700 line-clamp-2 mb-3">
                                    {website.description || 'No description available.'}
                                  </p>
                                  
                                  <div class="flex justify-between items-center mt-auto">
                                    <a 
                                      href={`/websites/${website.slug}`} 
                                      class="text-sm text-blue-600 hover:text-blue-800 font-medium"
                                    >
                                      View details
                                    </a>
                                    
                                    <a 
                                      href={`https://${website.domain}`} 
                                      target="_blank" 
                                      rel="noopener noreferrer" 
                                      class="inline-flex items-center text-sm text-gray-500 hover:text-gray-700"
                                    >
                                      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
                                      </svg>
                                      Visit site
                                    </a>
                                  </div>
                                </div>
                              </div>
                            </div>
                          ))}
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </div>
            </Card>
            
            <!-- Company Website Information -->
            {company && (
              <Card>
                <div class="p-6">
                  <h2 class="text-xl font-medium text-gray-900 mb-4">Company Website</h2>
                  <div class="flex items-center mb-4">
                    {company.logoUrl && (
                      <img src={company.logoUrl} alt={`${company.name} logo`} class="h-8 mr-3" />
                    )}
                    <h3 class="text-lg font-medium text-gray-900">{company.name}</h3>
                  </div>
                  
                  <p class="text-gray-700 mb-4">
                    This product may also be featured on the company's main website or other corporate sites.
                  </p>
                  
                  <div class="flex flex-wrap gap-3">
                    <a 
                      href={`/companies/${company.slug}`} 
                      class="inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500"
                    >
                      <svg xmlns="http://www.w3.org/2000/svg" class="-ml-0.5 mr-2 h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4" />
                      </svg>
                      View company details
                    </a>
                    
                    {company.website && (
                      <a 
                        href={`https://${company.website}`}
                        target="_blank"
                        rel="noopener noreferrer"
                        class="inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500"
                      >
                        <svg xmlns="http://www.w3.org/2000/svg" class="-ml-0.5 mr-2 h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
                        </svg>
                        Visit company website
                      </a>
                    )}
                  </div>
                </div>
              </Card>
            )}
          </div>
          
          <!-- Quick Regulatory Summary -->
          {product.approvals && product.approvals.length > 0 && (
            <Card>
              <div class="p-6">
                <h2 class="text-lg font-medium text-gray-900 mb-4">Regulatory Status</h2>
                <div class="overflow-hidden shadow ring-1 ring-black ring-opacity-5 md:rounded-lg">
                  <table class="min-w-full divide-y divide-gray-300">
                    <thead class="bg-gray-50">
                      <tr>
                        <th scope="col" class="py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900 sm:pl-6">Region</th>
                        <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Indication</th>
                        <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Agency</th>
                        <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Date</th>
                        <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Status</th>
                      </tr>
                    </thead>
                    <tbody class="divide-y divide-gray-200 bg-white">
                      {product.approvals.map(approval => (
                        <tr>
                          <td class="whitespace-nowrap py-4 pl-4 pr-3 text-sm font-medium text-gray-900 sm:pl-6">{approval.region}</td>
                          <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">{approval.indication}</td>
                          <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">{approval.agency}</td>
                          <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">{formatDate(approval.date)}</td>
                          <td class="whitespace-nowrap px-3 py-4 text-sm">
                            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium" style={
                              approval.status === 'approved' 
                                ? 'background-color:var(--color-green-100, #dcfce7); color:var(--color-green-800, #166534)' 
                                : approval.status === 'rejected'
                                ? 'background-color:var(--color-red-100, #fee2e2); color:var(--color-red-800, #991b1b)'
                                : 'background-color:var(--color-yellow-100, #fef9c3); color:var(--color-yellow-800, #854d0e)'
                            }>
                              {approval.status.charAt(0).toUpperCase() + approval.status.slice(1)}
                            </span>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              </div>
            </Card>
          )}
          
          <!-- Related Products -->
          {relatedProducts.length > 0 && (
            <Card>
              <div class="p-6">
                <h2 class="text-lg font-medium text-gray-900 mb-3">Related Products</h2>
                <div class="space-y-3">
                  {relatedProducts.map(relatedProduct => (
                    <ProductCard product={relatedProduct} isCompact={true} />
                  ))}
                </div>
              </div>
            </Card>
          )}
        </div>
      </div>
      
      <!-- Regulatory Tab -->
      <div id="product-tab-content-regulatory" role="tabpanel" aria-labelledby="tab-regulatory" class="hidden">
        <Card>
          <div class="p-6">
            <h2 class="text-lg font-medium text-gray-900 mb-6">Regulatory Information</h2>
            
            {(product.approvals && product.approvals.length > 0) ? (
              <div class="space-y-6">
                <h3 class="text-base font-medium text-gray-900">Approval History</h3>
                <div class="overflow-hidden shadow ring-1 ring-black ring-opacity-5 md:rounded-lg">
                  <table class="min-w-full divide-y divide-gray-300">
                    <thead class="bg-gray-50">
                      <tr>
                        <th scope="col" class="py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900 sm:pl-6">Date</th>
                        <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Region</th>
                        <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Agency</th>
                        <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Indication</th>
                        <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Status</th>
                        <th scope="col" class="relative py-3.5 pl-3 pr-4 sm:pr-6">
                          <span class="sr-only">Details</span>
                        </th>
                      </tr>
                    </thead>
                    <tbody class="divide-y divide-gray-200 bg-white">
                      {product.approvals
                        .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())
                        .map(approval => (
                        <tr>
                          <td class="whitespace-nowrap py-4 pl-4 pr-3 text-sm font-medium text-gray-900 sm:pl-6">{formatDate(approval.date)}</td>
                          <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">{approval.region}</td>
                          <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">{approval.agency}</td>
                          <td class="px-3 py-4 text-sm text-gray-500">{approval.indication}</td>
                          <td class="whitespace-nowrap px-3 py-4 text-sm">
                            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium" style={
                              approval.status === 'approved' 
                                ? 'background-color:var(--color-green-100, #dcfce7); color:var(--color-green-800, #166534)' 
                                : approval.status === 'rejected'
                                ? 'background-color:var(--color-red-100, #fee2e2); color:var(--color-red-800, #991b1b)'
                                : 'background-color:var(--color-yellow-100, #fef9c3); color:var(--color-yellow-800, #854d0e)'
                            }>
                              {approval.status.charAt(0).toUpperCase() + approval.status.slice(1)}
                            </span>
                          </td>
                          <td class="relative whitespace-nowrap py-4 pl-3 pr-4 text-right text-sm font-medium sm:pr-6">
                            <a href="#" class="text-[color:var(--color-primary-600)] hover:text-[color:var(--color-primary-900)]">
                              View<span class="sr-only">, {approval.indication}</span>
                            </a>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
                
                <div class="mt-6 grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-3">
                  <div class="bg-white overflow-hidden shadow rounded-lg border border-gray-200">
                    <div class="px-4 py-5 sm:p-6">
                      <dl>
                        <dt class="text-sm font-medium text-gray-500 truncate">Total Approvals</dt>
                        <dd class="mt-1 text-3xl font-semibold text-gray-900">
                          {product.approvals.filter(a => a.status === 'approved').length}
                        </dd>
                      </dl>
                    </div>
                  </div>
                  <div class="bg-white overflow-hidden shadow rounded-lg border border-gray-200">
                    <div class="px-4 py-5 sm:p-6">
                      <dl>
                        <dt class="text-sm font-medium text-gray-500 truncate">Pending Approvals</dt>
                        <dd class="mt-1 text-3xl font-semibold text-gray-900">
                          {product.approvals.filter(a => a.status === 'pending').length}
                        </dd>
                      </dl>
                    </div>
                  </div>
                  <div class="bg-white overflow-hidden shadow rounded-lg border border-gray-200">
                    <div class="px-4 py-5 sm:p-6">
                      <dl>
                        <dt class="text-sm font-medium text-gray-500 truncate">Regions with Approval</dt>
                        <dd class="mt-1 text-3xl font-semibold text-gray-900">
                          {new Set(product.approvals.filter(a => a.status === 'approved').map(a => a.region)).size}
                        </dd>
                      </dl>
                    </div>
                  </div>
                </div>
              </div>
            ) : (
              <div class="text-center py-12">
                <svg xmlns="http://www.w3.org/2000/svg" class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                </svg>
                <h3 class="mt-2 text-sm font-medium text-gray-900">No regulatory information</h3>
                <p class="mt-1 text-sm text-gray-500">
                  This product does not have any regulatory approvals or submissions yet.
                </p>
              </div>
            )}
          </div>
        </Card>
      </div>
      
      <!-- Timeline Tab -->
      <div id="product-tab-content-timeline" role="tabpanel" aria-labelledby="tab-timeline" class="hidden">
        <Card>
          <div class="p-6">
            <h2 class="text-lg font-medium text-gray-900 mb-6">Development Timeline</h2>
            
            <Timeline events={product.timeline} currentStage={product.stage} />
            
            <div class="mt-8 bg-gray-50 p-4 rounded-md border border-gray-200">
              <h3 class="text-sm font-medium text-gray-900 mb-2">Development Stage Legend</h3>
              <div class="grid grid-cols-2 gap-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-7">
                <div class="flex items-center">
                  <span class="h-2 w-2 bg-gray-500 rounded-full mr-2"></span>
                  <span class="text-xs text-gray-700">Preclinical</span>
                </div>
                <div class="flex items-center">
                  <span class="h-2 w-2 bg-blue-500 rounded-full mr-2"></span>
                  <span class="text-xs text-gray-700">Phase 1</span>
                </div>
                <div class="flex items-center">
                  <span class="h-2 w-2 bg-indigo-500 rounded-full mr-2"></span>
                  <span class="text-xs text-gray-700">Phase 2</span>
                </div>
                <div class="flex items-center">
                  <span class="h-2 w-2 bg-purple-500 rounded-full mr-2"></span>
                  <span class="text-xs text-gray-700">Phase 3</span>
                </div>
                <div class="flex items-center">
                  <span class="h-2 w-2 bg-yellow-500 rounded-full mr-2"></span>
                  <span class="text-xs text-gray-700">Submitted</span>
                </div>
                <div class="flex items-center">
                  <span class="h-2 w-2 bg-green-500 rounded-full mr-2"></span>
                  <span class="text-xs text-gray-700">Approved</span>
                </div>
                <div class="flex items-center">
                  <span class="h-2 w-2 bg-emerald-500 rounded-full mr-2"></span>
                  <span class="text-xs text-gray-700">Marketed</span>
                </div>
              </div>
            </div>
          </div>
        </Card>
      </div>
      
      <!-- Patents Tab -->
      <div id="product-tab-content-patents" role="tabpanel" aria-labelledby="tab-patents" class="hidden">
        <Card>
          <div class="p-6">
            <h2 class="text-lg font-medium text-gray-900 mb-6">Patent Information</h2>
            
            {product.patents && product.patents.length > 0 ? (
              <div class="overflow-hidden shadow ring-1 ring-black ring-opacity-5 md:rounded-lg">
                <table class="min-w-full divide-y divide-gray-300">
                  <thead class="bg-gray-50">
                    <tr>
                      <th scope="col" class="py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900 sm:pl-6">Patent Number</th>
                      <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Description</th>
                      <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Expiry Date</th>
                    </tr>
                  </thead>
                  <tbody class="divide-y divide-gray-200 bg-white">
                    {product.patents.map(patent => (
                      <tr>
                        <td class="whitespace-nowrap py-4 pl-4 pr-3 text-sm font-medium text-[color:var(--color-primary-600)] sm:pl-6">{patent.number}</td>
                        <td class="px-3 py-4 text-sm text-gray-500">{patent.description}</td>
                        <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">{formatDate(patent.expiryDate)}</td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            ) : (
              <div class="text-center py-12">
                <svg xmlns="http://www.w3.org/2000/svg" class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                </svg>
                <h3 class="mt-2 text-sm font-medium text-gray-900">No patent information</h3>
                <p class="mt-1 text-sm text-gray-500">
                  No patent information is available for this product.
                </p>
              </div>
            )}
          </div>
        </Card>
      </div>
    </div>
  </div>
</DashboardLayout>

<script>
// Add tab switching function
function switchTab(tabId) {
  // Find the tab link and simulate a click
  const tabLink = document.querySelector(`[href="#${tabId}"]`);
  if (tabLink) {
    tabLink.click();
  }
}

// Add this function to the global scope
document.addEventListener('DOMContentLoaded', () => {
  window.switchTab = switchTab;
});
</script> 