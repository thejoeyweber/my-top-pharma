---
/**
 * Products Directory Page
 * 
 * Main page for browsing pharmaceutical products with 
 * filtering and sorting capabilities.
 */
import DashboardLayout from '../../components/templates/DashboardLayout.astro';
import Card from '../../components/atoms/Card.astro';
import Button from '../../components/atoms/Button.astro';
import FilterBar from '../../components/organisms/FilterBar.astro';
import SortSelect from '../../components/molecules/SortSelect.astro';
import ViewToggle from '../../components/molecules/ViewToggle.astro';
import MultiSelect from '../../components/molecules/MultiSelect.astro';
import ProductCard from '../../components/molecules/ProductCard.astro';
import DataSourceVisualizer from '../../components/DataSourceVisualizer.astro';
import { logError } from '../../utils/errorUtils';

// Import Supabase client directly
import { supabase } from '../../lib/supabase';
import { dbProductToProduct } from '../../interfaces/entities/Product';
import { dbTherapeuticAreaToTherapeuticArea } from '../../interfaces/entities/TherapeuticArea';
import { dbCompanyToCompany } from '../../interfaces/entities/Company';
import type { Product, TherapeuticArea, Company } from '../../interfaces/entities';

// Get URL query parameters for filtering and sorting
const url = new URL(Astro.request.url);
const params = url.searchParams;

// Extract filter and sort parameters
const sortParam = params.get('sort') || 'name_asc';
const viewMode = params.get('view') || 'grid';
const search = params.get('search') || '';
const selectedCompanies = params.get('companies')?.split(',') || [];
const selectedTAs = params.get('tas')?.split(',') || [];
const selectedStages = params.get('stages')?.split(',') || [];

// Parse sort parameter
const [sortField, sortDirection] = sortParam.split('_');

// Build Supabase query with filtering and sorting
let query = supabase.from('products').select('*');

// Apply search filter if provided
if (search) {
  query = query.ilike('name', `%${search}%`);
}

// Apply company filter if provided
if (selectedCompanies.length > 0) {
  query = query.in('company_id', selectedCompanies);
}

// Apply product stage filter if provided
if (selectedStages.length > 0) {
  query = query.in('development_stage', selectedStages);
}

// Apply sorting
if (sortField === 'name') {
  query = query.order('name', { ascending: sortDirection === 'asc' });
} else if (sortField === 'stage') {
  query = query.order('development_stage', { ascending: sortDirection === 'asc' });
} else if (sortField === 'company') {
  // Will need to sort in memory after fetching company data
}

// Execute the query
const { data: dbProducts, error: productsError } = await query;

if (productsError) {
  logError('Error fetching products:', productsError);
}

// Convert database records to application entities
const products: Product[] = (dbProducts || []).map(dbProductToProduct);

// Fetch all therapeutic areas for filtering
const { data: dbTherapeuticAreas, error: taError } = await supabase
  .from('therapeutic_areas')
  .select('*')
  .order('name');

if (taError) {
  logError('Error fetching therapeutic areas:', taError);
}

// Create therapeutic areas options for filtering
const therapeuticAreas = (dbTherapeuticAreas || []).map(ta => ({
  value: ta.id,
  label: ta.name
}));

// Filter products by therapeutic areas (need to do this separately due to relation tables)
let filteredProducts = products;
if (selectedTAs.length > 0) {
  // Fetch product-therapeutic area relations
  const { data: productTAs, error: ptaError } = await supabase
    .from('product_therapeutic_areas')
    .select('product_id, therapeutic_area_id')
    .in('therapeutic_area_id', selectedTAs);
    
  if (ptaError) {
    logError('Error fetching product-therapeutic area relations:', ptaError);
  }
  
  // Get unique product IDs that have the selected therapeutic areas
  const productIds = [...new Set((productTAs || []).map(pta => pta.product_id))];
  
  // Filter products by those IDs
  filteredProducts = products.filter(product => productIds.includes(product.id));
}

// Special handling for sorting by company name (client-side sort)
if (sortField === 'company') {
  // Fetch all companies for sorting
  const { data: companiesData, error: companiesError } = await supabase
    .from('companies')
    .select('id, name');
    
  if (companiesError) {
    logError('Error fetching companies for sorting:', companiesError);
  }
  
  // Create a map of company IDs to names
  const companyNameMap = new Map<string, string>();
  (companiesData || []).forEach(company => {
    companyNameMap.set(company.id, company.name);
  });
  
  // Sort products by company name
  filteredProducts.sort((a, b) => {
    const companyA = companyNameMap.get(a.companyId) || '';
    const companyB = companyNameMap.get(b.companyId) || '';
    
    if (sortDirection === 'asc') {
      return companyA.localeCompare(companyB);
    } else {
      return companyB.localeCompare(companyA);
    }
  });
}

// Fetch company data for each product
const companyMap = new Map<string, Company>();
const companyIds = [...new Set(filteredProducts.map(product => product.companyId))];

if (companyIds.length > 0) {
  const { data: companiesData, error: companiesError } = await supabase
    .from('companies')
    .select('*')
    .in('id', companyIds);
    
  if (companiesError) {
    logError('Error fetching companies for products:', companiesError);
  }
  
  (companiesData || []).forEach(company => {
    companyMap.set(company.id, dbCompanyToCompany(company));
  });
}

// Get therapeutic area names for each product
const productTaNames = new Map<string, string[]>();

// Fetch all product-therapeutic area relations
const { data: allProductTAs, error: allPtaError } = await supabase
  .from('product_therapeutic_areas')
  .select('product_id, therapeutic_area_id');
  
if (allPtaError) {
  logError('Error fetching all product-therapeutic area relations:', allPtaError);
}

// Group by product
const productTaMap = new Map<string, string[]>();
(allProductTAs || []).forEach(pta => {
  const taIds = productTaMap.get(pta.product_id) || [];
  productTaMap.set(pta.product_id, [...taIds, pta.therapeutic_area_id]);
});

// Get therapeutic area names
const taNameMap = new Map<string, string>();
dbTherapeuticAreas?.forEach(ta => {
  taNameMap.set(ta.id, ta.name);
});

// Create the final map of product ID to therapeutic area names
filteredProducts.forEach(product => {
  const taIds = productTaMap.get(product.id) || [];
  const taNames = taIds.map(id => taNameMap.get(id)).filter(Boolean) as string[];
  productTaNames.set(product.id, taNames);
});

// Fetch all companies for filtering
const { data: allCompaniesData, error: allCompaniesError } = await supabase
  .from('companies')
  .select('id, name')
  .order('name');
  
if (allCompaniesError) {
  logError('Error fetching all companies for filtering:', allCompaniesError);
}

// Create company options for filtering
const companyOptions = (allCompaniesData || []).map(company => ({
  value: company.id,
  label: company.name
}));

// Define product development stages for filtering
const stageOptions = [
  { value: 'discovery', label: 'Discovery' },
      { value: 'preclinical', label: 'Preclinical' },
      { value: 'phase1', label: 'Phase 1' },
      { value: 'phase2', label: 'Phase 2' },
      { value: 'phase3', label: 'Phase 3' },
      { value: 'approved', label: 'Approved' },
  { value: 'marketed', label: 'Marketed' }
];

// Define sort options
const sortOptions = [
  { value: 'name_asc', label: 'Name (A to Z)' },
  { value: 'name_desc', label: 'Name (Z to A)' },
  { value: 'company_asc', label: 'Company (A to Z)' },
  { value: 'company_desc', label: 'Company (Z to A)' },
  { value: 'stage_asc', label: 'Stage (Early to Late)' },
  { value: 'stage_desc', label: 'Stage (Late to Early)' }
];

// Helper function to build URLs with updated parameters
const updateUrlParams = (updates: Record<string, string | string[] | null>) => {
  const newUrl = new URL(Astro.request.url);
  
  Object.entries(updates).forEach(([key, value]) => {
    if (value === null) {
      newUrl.searchParams.delete(key);
    } else if (Array.isArray(value)) {
      if (value.length) {
        newUrl.searchParams.set(key, value.join(','));
      } else {
        newUrl.searchParams.delete(key);
      }
    } else {
      newUrl.searchParams.set(key, value);
    }
  });
  
  return newUrl.pathname + newUrl.search;
};
---

<DashboardLayout title="Pharmaceutical Products">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <!-- Added visual header that connects to detail page design -->
    <div class="mb-6 overflow-hidden">
      <div class="flex border border-gray-100 rounded-lg shadow-sm overflow-hidden">
        <div class="w-3 bg-gradient-to-b from-green-600 to-green-700"></div>
        <div class="p-6 flex items-center">
          <div class="bg-white p-3 rounded-full shadow-sm mr-4">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-green-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19.428 15.428a2 2 0 00-1.022-.547l-2.387-.477a6 6 0 00-3.86.517l-.318.158a6 6 0 01-3.86.517L6.05 15.21a2 2 0 00-1.806.547M8 4h8l-1 1v5.172a2 2 0 00.586 1.414l5 5c1.26 1.26.367 3.414-1.415 3.414H4.828c-1.782 0-2.674-2.154-1.414-3.414l5-5A2 2 0 009 10.172V5L8 4z" />
            </svg>
          </div>
          <div>
            <h1 class="text-2xl font-bold text-gray-900">Products</h1>
            <p class="text-gray-600 text-sm">Explore pharmaceutical products and medications in our database</p>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Filter Bar -->
    <div class="mb-6">
      <Card>
        <div class="p-4">
          <form id="filter-form" method="get" action="/products">
            <div class="flex flex-col md:flex-row md:items-center justify-between gap-4 mb-4">
              <!-- Search input -->
              <div class="w-full md:w-1/3">
                <input 
                  type="text" 
                  id="search" 
                  name="search" 
                  value={search}
                  placeholder="Search products..."
                  class="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                />
          </div>
          
              <!-- View and Sort Options -->
              <div class="flex items-center space-x-3">
                <ViewToggle 
                  options={[
                    { value: 'grid', label: 'Grid', icon: 'grid' },
                    { value: 'list', label: 'List', icon: 'list' }
                  ]}
                  activeOption={viewMode}
                  onChange={(value) => updateUrlParams({ view: value })}
                />
                
                <SortSelect 
                  options={sortOptions}
                  selected={sortParam}
                  onChange={(value) => updateUrlParams({ sort: value })}
                />
        </div>
      </div>
      
            <!-- Advanced Filters (collapsible) -->
            <details class="mt-4">
              <summary class="cursor-pointer text-blue-600 font-medium mb-3">Advanced Filters</summary>
              <div class="grid grid-cols-1 md:grid-cols-3 gap-4 p-4 bg-gray-50 rounded-md">
                <!-- Company Filter -->
              <div>
                  <label class="block text-sm font-medium text-gray-700 mb-1">Companies</label>
                  <MultiSelect
                    options={companyOptions}
                    selected={selectedCompanies}
                    name="companies"
                    onChange={(values) => {
                      document.querySelector('input[name="companies"]').value = values.join(',');
                    }}
                  />
                  <input type="hidden" name="companies" value={selectedCompanies.join(',')} />
                </div>
                
                <!-- Therapeutic Areas Filter -->
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-1">Therapeutic Areas</label>
                  <MultiSelect
                    options={therapeuticAreas}
                    selected={selectedTAs}
                    name="tas"
                    onChange={(values) => {
                      document.querySelector('input[name="tas"]').value = values.join(',');
                    }}
                  />
                  <input type="hidden" name="tas" value={selectedTAs.join(',')} />
                </div>
                
                <!-- Product Stage Filter -->
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-1">Development Stage</label>
                  <MultiSelect
                    options={stageOptions}
                    selected={selectedStages}
                    name="stages"
                    onChange={(values) => {
                      document.querySelector('input[name="stages"]').value = values.join(',');
                    }}
                  />
                  <input type="hidden" name="stages" value={selectedStages.join(',')} />
                </div>
              </div>
              
              <!-- Filter Action Buttons -->
              <div class="flex justify-end mt-4 space-x-2">
                <Button type="submit" variant="primary">Apply Filters</Button>
                <Button 
                  type="button" 
                  variant="outline" 
                  onClick={() => {
                    window.location.href = "/products";
                  }}
                >
                  Reset
                </Button>
              </div>
            </details>
            
            <!-- Maintain view and sort in form submission -->
            <input type="hidden" name="view" value={viewMode} />
            <input type="hidden" name="sort" value={sortParam} />
          </form>
        </div>
      </Card>
      </div>
    
    <!-- Results Count -->
    <div class="mb-4">
      <p class="text-sm text-gray-600">
        Showing <span class="font-medium">{filteredProducts.length}</span> products
      </p>
    </div>
    
    <!-- Products Results -->
    {filteredProducts.length === 0 ? (
      <Card>
        <div class="p-8 text-center">
          <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
          <h3 class="mt-2 text-lg font-medium text-gray-900">No products found</h3>
          <p class="mt-1 text-sm text-gray-500">Try adjusting your filters to find what you're looking for.</p>
          <div class="mt-6">
            <Button 
              href="/products" 
              variant="primary"
            >
              Reset Filters
            </Button>
          </div>
        </div>
      </Card>
    ) : (
      <div class={`grid gap-4 ${viewMode === 'grid' ? 'grid-cols-1 md:grid-cols-2 xl:grid-cols-3' : 'grid-cols-1'}`}>
        {filteredProducts.map(product => (
          <ProductCard 
            product={product} 
            company={companyMap.get(product.companyId)}
            therapeuticAreaNames={productTaNames.get(product.id) || []}
            view={viewMode}
          />
      ))}
    </div>
    )}
    
    <!-- Data Source Indicator -->
    <div class="mt-8">
      <DataSourceVisualizer />
    </div>
  </div>
</DashboardLayout>

<script>
  // Client-side enhancement for form submission
  document.addEventListener('DOMContentLoaded', () => {
    // No JavaScript needed for basic functionality
    // Form submits naturally via GET method
  });
</script> 