---
/**
 * Products Index Page
 * 
 * Displays a list of all pharmaceutical products with filtering options.
 */
import DirectoryIndexLayout from '../../layouts/DirectoryIndexLayout.astro';
import DirectoryFilterPanel from '../../components/organisms/DirectoryFilterPanel.astro';
import ProductCard from '../../components/molecules/ProductCard.astro';
import DataSourceVisualizer from '../../components/DataSourceVisualizer.astro';
import Pagination from '../../components/molecules/Pagination.astro';

// Import utility functions
import { getProducts, getProductFilters } from '../../lib/utils/productUtils';
import { getPaginationParams } from '../../lib/utils/urlUtils';
import type { Product } from '../../interfaces/entities';

// Set prerender to false for dynamic content
export const prerender = false;

// Get URL query parameters
const url = new URL(Astro.request.url);
const params = url.searchParams;

// Extract filter parameters
const stage = params.get('stage') || '';
const search = params.get('search') || '';
const therapeuticAreaId = params.get('ta') || '';
const companyId = params.get('company') || '';
const moleculeType = params.get('type') || '';
const sortParam = params.get('sort') || 'name_asc';
const viewMode = params.get('view') || 'grid';

// Get pagination parameters
const { page, limit, offset } = getPaginationParams(params);

// Get filter options
const { stages, therapeuticAreas, moleculeTypes, sortOptions } = await getProductFilters();

// Fetch products based on filters
const { products, total: totalCount } = await getProducts({
  search,
  stage,
  therapeuticAreaId,
  companyId,
  moleculeType,
  sortBy: sortParam.split('_')[0],
  sortDirection: sortParam.split('_')[1] as 'asc' | 'desc',
  limit,
  offset
});

// Calculate pagination details
const totalPages = Math.ceil(totalCount / limit);

// Generate breadcrumbs
const breadcrumbs = [
  { label: 'Home', href: '/' },
  { label: 'Products', href: '/products', isActive: true },
];

// Set page metadata
const title = "Products";
const description = "Browse all pharmaceutical products in the Top Pharma database, including development stage, therapeutic areas, and more.";

// Product icon SVG
const productIcon = `<svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-green-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19.428 15.428a2 2 0 00-1.022-.547l-2.387-.477a6 6 0 00-3.86.517l-.318.158a6 6 0 01-3.86.517L6.05 15.21a2 2 0 00-1.806.547M8 4h8l-1 1v5.172a2 2 0 00.586 1.414l5 5c1.26 1.26.367 3.414-1.415 3.414H4.828c-1.782 0-2.674-2.154-1.414-3.414l5-5A2 2 0 009 10.172V5L8 4z" />
</svg>`;
---

<DirectoryIndexLayout
  title={title}
  description={description}
  currentPath="/products"
  breadcrumbs={breadcrumbs}
  gradientFrom="green-600"
  gradientTo="green-700"
  icon={productIcon}
  totalCount={totalCount}
  showViewToggle={true}
  viewMode={viewMode}
>
  <!-- Filter Bar -->
  <div slot="filters">
    <DirectoryFilterPanel
      search={search}
      sortOptions={sortOptions}
      selectedSort={sortParam}
      showViewToggle={true}
      viewMode={viewMode}
    >
      <div slot="advanced-filters" class="grid grid-cols-1 md:grid-cols-3 gap-4">
        <!-- Development Stage Filter -->
        <div>
          <label for="stage" class="block text-sm font-medium text-gray-700 mb-1">Development Stage</label>
          <select
            id="stage"
            name="stage"
            class="block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500 sm:text-sm"
          >
            <option value="">All Stages</option>
            {stages.map(s => (
              <option value={s.value} selected={stage === s.value}>
                {s.label} ({s.count})
              </option>
            ))}
          </select>
        </div>
        
        <!-- Therapeutic Area Filter -->
        <div>
          <label for="ta" class="block text-sm font-medium text-gray-700 mb-1">Therapeutic Area</label>
          <select
            id="ta"
            name="ta"
            class="block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500 sm:text-sm"
          >
            <option value="">All Therapeutic Areas</option>
            {therapeuticAreas.map(area => (
              <option value={area.id} selected={therapeuticAreaId === area.id.toString()}>
                {area.name} ({area.count})
              </option>
            ))}
          </select>
        </div>
        
        <!-- Molecule Type Filter -->
        <div>
          <label for="type" class="block text-sm font-medium text-gray-700 mb-1">Molecule Type</label>
          <select
            id="type"
            name="type"
            class="block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500 sm:text-sm"
          >
            <option value="">All Types</option>
            {moleculeTypes.map(type => (
              <option value={type.value} selected={moleculeType === type.value}>
                {type.label} ({type.count})
              </option>
            ))}
          </select>
        </div>
      </div>
    </DirectoryFilterPanel>
  </div>

  <!-- Results Count -->
  <div slot="results-count">
    Showing <span class="font-medium">{products.length > 0 ? (page - 1) * limit + 1 : 0} - {Math.min(page * limit, totalCount)}</span> of <span class="font-medium">{totalCount}</span> products
  </div>

  <!-- List View (Table) -->
  <div slot="list-view">
    <table class="min-w-full divide-y divide-gray-200">
      <thead class="bg-gray-50">
        <tr>
          <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
          <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Generic Name</th>
          <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Stage</th>
          <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Type</th>
          <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
        </tr>
      </thead>
      <tbody class="bg-white divide-y divide-gray-200">
        {products.length === 0 ? (
          <tr>
            <td colspan="5" class="px-6 py-4 text-center text-sm text-gray-500">
              No products found matching your criteria.
            </td>
          </tr>
        ) : (
          products.map((product: Product) => (
            <tr>
              <td class="px-6 py-4 whitespace-nowrap">
                <div class="text-sm font-medium text-gray-900">{product.name}</div>
              </td>
              <td class="px-6 py-4 whitespace-nowrap">
                <div class="text-sm text-gray-500">{product.genericName || 'N/A'}</div>
              </td>
              <td class="px-6 py-4 whitespace-nowrap">
                {product.stage && (
                  <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">
                    {product.stage}
                  </span>
                )}
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                {product.moleculeType || 'N/A'}
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                <a href={`/products/${product.slug}`} class="text-primary-600 hover:text-primary-900">View</a>
              </td>
            </tr>
          ))
        )}
      </tbody>
    </table>
  </div>

  <!-- Results Grid -->
  <div slot="results">
    {products.length === 0 ? (
      <div class="p-8 text-center bg-white rounded-lg shadow">
        <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
        <h3 class="mt-2 text-lg font-medium text-gray-900">No products found</h3>
        <p class="mt-1 text-sm text-gray-500">Try adjusting your search or filter criteria.</p>
        <div class="mt-6">
          <a href="/products" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500">
            Reset Filters
          </a>
        </div>
      </div>
    ) : (
      <div class="grid gap-4 grid-cols-1 md:grid-cols-2 xl:grid-cols-3">
        {products.map((product: Product) => (
          <ProductCard product={product} />
        ))}
      </div>
    )}
  </div>

  <!-- Pagination -->
  {totalPages > 1 && (
    <div slot="pagination">
      <Pagination
        currentPage={page}
        totalPages={totalPages}
        getPageUrl={(pageNum) => {
          const updatedUrl = new URL(Astro.url);
          updatedUrl.searchParams.set('page', pageNum.toString());
          return updatedUrl.pathname + updatedUrl.search;
        }}
      />
    </div>
  )}

  <!-- Data Source -->
  <div slot="data-source">
    <DataSourceVisualizer />
  </div>
</DirectoryIndexLayout> 
