---
/**
 * Products Index Page
 * 
 * Displays a list of all pharmaceutical products in the database with filtering and sorting options.
 */
import DashboardLayout from '../../components/templates/DashboardLayout.astro';
import ProductCard from '../../components/molecules/ProductCard.astro';
import Card from '../../components/atoms/Card.astro';
import Button from '../../components/atoms/Button.astro';
import Pagination from '../../components/molecules/Pagination.astro';
import SidebarFilter from '../../components/molecules/SidebarFilter.astro';

// Import product utilities instead of direct Supabase
import { getProducts, getProductFilters } from '../../lib/utils/productUtils';
import type { Product, TherapeuticArea } from '../../interfaces/entities';

// Helper to generate URL with query params
const getUrlWithParams = (baseUrl: string, params: Record<string, any>) => {
  const url = new URL(baseUrl, Astro.url);
  Object.entries(params).forEach(([key, value]) => {
    if (value !== undefined && value !== null && value !== '') {
      url.searchParams.set(key, value.toString());
    } else {
      url.searchParams.delete(key);
    }
  });
  return url.toString();
};

// Get search params from URL
const searchParams = Astro.url.searchParams;

// Filters
const stage = searchParams.get('stage') || '';
const search = searchParams.get('search') || '';
const therapeuticAreaId = searchParams.get('ta') || '';
const companyId = searchParams.get('company') || '';
const moleculeType = searchParams.get('type') || '';

// Pagination
const page = parseInt(searchParams.get('page') || '1');
const limit = 20;
const offset = (page - 1) * limit;

// Get available filter options using our utility
const { stages, therapeuticAreas, moleculeTypes } = await getProductFilters();

// Fetch products based on filters
const { products, totalCount } = await getProducts({
  search,
  stage,
  therapeuticAreaId,
  companyId,
  moleculeType,
  limit,
  offset
});

// Pagination setup
const totalPages = Math.ceil(totalCount / limit);

// Cleanup filters for display
const filters = [
  {
    id: 'stage',
    name: 'Development Stage',
    options: stages.map(stage => ({
      value: stage.value,
      label: stage.label,
      count: stage.count
    }))
  },
  {
    id: 'ta',
    name: 'Therapeutic Area',
    options: therapeuticAreas.map(ta => ({
      value: ta.id,
      label: ta.name,
      count: ta.count
    }))
  },
  {
    id: 'type',
    name: 'Molecule Type',
    options: moleculeTypes.map(type => ({
      value: type.value,
      label: type.label,
      count: type.count
    }))
  }
];

// Generate breadcrumbs for navigation
const breadcrumbs = [
  { label: 'Home', href: '/' },
  { label: 'Products', href: '/products', active: true },
];

// Set page metadata
const title = "Products | Top Pharma";
const description = "Browse all pharmaceutical products in the Top Pharma database, including development stage, therapeutic areas, and more.";
---

<DashboardLayout 
  title={title}
  description={description}
  currentPath="/products"
  breadcrumbs={breadcrumbs}
>
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 mt-6">
    <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6">
      <div>
        <h1 class="text-2xl font-bold text-gray-900">Pharmaceutical Products</h1>
        <p class="mt-1 text-sm text-gray-500">Browse all pharmaceutical products in our database.</p>
      </div>
      
      <div class="mt-4 sm:mt-0">
        <!-- <Button href="/products/compare" icon="scale" variant="secondary">Compare Products</Button> -->
      </div>
    </div>
    
    <!-- Search Bar -->
    <div class="mb-6">
      <form action="/products" method="get" class="flex w-full">
        <div class="relative flex-grow">
          <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
            <svg class="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
            </svg>
          </div>
          <input
            type="text"
            name="search"
            value={search}
            placeholder="Search products by name or generic name..."
            class="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md leading-5 bg-white placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-1 focus:ring-green-500 focus:border-green-500 sm:text-sm"
          />
        </div>
        
        <!-- Keep any other filter values -->
        {stage && <input type="hidden" name="stage" value={stage} />}
        {therapeuticAreaId && <input type="hidden" name="ta" value={therapeuticAreaId} />}
        {moleculeType && <input type="hidden" name="type" value={moleculeType} />}
        {companyId && <input type="hidden" name="company" value={companyId} />}
        
        <Button type="submit" variant="primary" class="ml-4">Search</Button>
      </form>
    </div>
    
    <!-- Main Content with sidebar filter -->
    <div class="flex flex-col lg:flex-row gap-6">
      <!-- Sidebar with Filters -->
      <div class="w-full lg:w-64 flex-shrink-0">
        <SidebarFilter 
          filters={filters}
          activeFilters={{
            stage,
            ta: therapeuticAreaId,
            type: moleculeType,
          }}
          baseUrl="/products"
          currentQueryParams={{
            search,
            ...(companyId && { company: companyId }),
          }}
        />
      </div>
      
      <!-- Main Content -->
      <div class="flex-1">
        <!-- Results count and sorting -->
        <div class="flex justify-between items-center mb-4">
          <p class="text-sm text-gray-700">
            Showing {products.length > 0 ? (page - 1) * limit + 1 : 0} - {Math.min(page * limit, totalCount)} of {totalCount} products
          </p>
          
          <!-- Sorting would go here -->
        </div>
        
        <!-- Products Grid -->
        {products.length > 0 ? (
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-3 gap-4 mb-8">
            {products.map((product: Product) => (
              <ProductCard product={product} />
            ))}
          </div>
        ) : (
          <Card>
            <div class="text-center py-12">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 mx-auto text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              <h3 class="mt-2 text-lg font-medium text-gray-900">No products found</h3>
              <p class="mt-1 text-gray-500">Try adjusting your search or filter criteria.</p>
              <div class="mt-6">
                <Button href="/products" variant="outline">Reset all filters</Button>
              </div>
            </div>
          </Card>
        )}
        
        <!-- Pagination -->
        {totalPages > 1 && (
          <div class="flex justify-center my-6">
            <Pagination
              currentPage={page}
              totalPages={totalPages}
              getPageUrl={(pageNum) => getUrlWithParams('/products', {
                search,
                stage,
                ta: therapeuticAreaId,
                type: moleculeType,
                company: companyId,
                page: pageNum
              })}
            />
          </div>
        )}
      </div>
    </div>
  </div>
</DashboardLayout> 