---
/**
 * Products Index Page
 * 
 * Displays a list of all pharmaceutical products in the database with filtering and sorting options.
 */
import DashboardLayout from '../../layouts/DashboardLayout.astro';
import ProductCard from '../../components/molecules/ProductCard.astro';
import Card from '../../components/atoms/Card.astro';
import Button from '../../components/atoms/Button.astro';
import Pagination from '../../components/molecules/Pagination.astro';
import FilterBar from '../../components/organisms/FilterBar.astro';
import SortSelect from '../../components/molecules/SortSelect.astro';
import DataSourceVisualizer from '../../components/DataSourceVisualizer.astro';

// Import product utilities instead of direct Supabase
import { getProducts, getProductFilters } from '../../lib/utils/productUtils';
import { updateUrlParams, getPaginationParams } from '../../lib/utils/urlUtils';
import type { Product, TherapeuticArea } from '../../interfaces/entities';

// Explicitly set to false for dynamic content
export const prerender = false;

// Get URL search parameters
const url = new URL(Astro.request.url);
const params = url.searchParams;

// Filters
const stage = params.get('stage') || '';
const search = params.get('search') || '';
const therapeuticAreaId = params.get('ta') || '';
const companyId = params.get('company') || '';
const moleculeType = params.get('type') || '';
const sortParam = params.get('sort') || 'name_asc';

// Get pagination parameters
const { page, limit, offset } = getPaginationParams(params);

// Get available filter options using our utility
const { stages, therapeuticAreas, moleculeTypes, sortOptions } = await getProductFilters();

// Fetch products based on filters
const { products, totalCount } = await getProducts({
  search,
  stage,
  therapeuticAreaId,
  companyId,
  moleculeType,
  sortBy: sortParam.split('_')[0],
  sortDirection: sortParam.split('_')[1] as 'asc' | 'desc',
  limit,
  offset
});

// Pagination setup
const totalPages = Math.ceil(totalCount / limit);

// Generate breadcrumbs for navigation
const breadcrumbs = [
  { label: 'Home', href: '/' },
  { label: 'Products', href: '/products', isActive: true },
];

// Set page metadata
const title = "Products | Top Pharma";
const description = "Browse all pharmaceutical products in the Top Pharma database, including development stage, therapeutic areas, and more.";
---

<DashboardLayout 
  title={title}
  description={description}
  currentPath="/products"
  breadcrumbs={breadcrumbs}
>
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <!-- Visual header -->
    <div class="mb-6 overflow-hidden">
      <div class="flex border border-gray-100 rounded-lg shadow-sm overflow-hidden">
        <div class="w-3 bg-gradient-to-b from-green-600 to-green-700"></div>
        <div class="p-6 flex items-center">
          <div class="bg-white p-3 rounded-full shadow-sm mr-4">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-green-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19.428 15.428a2 2 0 00-1.022-.547l-2.387-.477a6 6 0 00-3.86.517l-.318.158a6 6 0 01-3.86.517L6.05 15.21a2 2 0 00-1.806.547M8 4h8l-1 1v5.172a2 2 0 00.586 1.414l5 5c1.26 1.26.367 3.414-1.415 3.414H4.828c-1.782 0-2.674-2.154-1.414-3.414l5-5A2 2 0 009 10.172V5L8 4z" />
            </svg>
          </div>
          <div>
            <h1 class="text-2xl font-bold text-gray-900">Pharmaceutical Products</h1>
            <p class="text-gray-600 text-sm">Browse all pharmaceutical products in our database</p>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Filter Bar -->
    <div class="mb-6">
      <Card>
        <div class="p-4">
          <form id="filter-form" method="get" action="/products">
            <div class="flex flex-col md:flex-row md:items-center justify-between gap-4 mb-4">
              <!-- Search input -->
              <div class="w-full md:w-1/3">
                <div class="relative">
                  <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <svg class="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                    </svg>
                  </div>
                  <input 
                    type="text" 
                    id="search" 
                    name="search" 
                    value={search}
                    placeholder="Search products by name..."
                    class="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md leading-5 bg-white placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-1 focus:ring-green-500 focus:border-green-500 sm:text-sm"
                  />
                </div>
              </div>
              
              <!-- Sort Options -->
              <div class="flex items-center space-x-3">
                <SortSelect 
                  options={sortOptions}
                  selected={sortParam}
                  onChange={(value) => updateUrlParams({ sort: value }, url)}
                />
              </div>
            </div>
            
            <!-- Advanced Filters (collapsible) -->
            <details class="mt-4">
              <summary class="cursor-pointer text-green-600 font-medium mb-3">Advanced Filters</summary>
              <div class="grid grid-cols-1 md:grid-cols-3 gap-4 p-4 bg-gray-50 rounded-md">
                <!-- Development Stage Filter -->
                <div>
                  <label for="stage" class="block text-sm font-medium text-gray-700 mb-1">Development Stage</label>
                  <select
                    id="stage"
                    name="stage"
                    class="block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500 sm:text-sm"
                  >
                    <option value="">All Stages</option>
                    {stages.map(s => (
                      <option value={s.value} selected={stage === s.value}>
                        {s.label} ({s.count})
                      </option>
                    ))}
                  </select>
                </div>
                
                <!-- Therapeutic Area Filter -->
                <div>
                  <label for="ta" class="block text-sm font-medium text-gray-700 mb-1">Therapeutic Area</label>
                  <select
                    id="ta"
                    name="ta"
                    class="block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500 sm:text-sm"
                  >
                    <option value="">All Therapeutic Areas</option>
                    {therapeuticAreas.map(area => (
                      <option value={area.id} selected={therapeuticAreaId === area.id.toString()}>
                        {area.name} ({area.count})
                      </option>
                    ))}
                  </select>
                </div>
                
                <!-- Molecule Type Filter -->
                <div>
                  <label for="type" class="block text-sm font-medium text-gray-700 mb-1">Molecule Type</label>
                  <select
                    id="type"
                    name="type"
                    class="block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500 sm:text-sm"
                  >
                    <option value="">All Types</option>
                    {moleculeTypes.map(type => (
                      <option value={type.value} selected={moleculeType === type.value}>
                        {type.label} ({type.count})
                      </option>
                    ))}
                  </select>
                </div>
              </div>
              
              <!-- Filter Action Buttons -->
              <div class="flex justify-end mt-4 space-x-2">
                <Button type="submit" variant="primary">Apply Filters</Button>
                <Button 
                  type="button" 
                  variant="outline" 
                  onClick={() => {
                    window.location.href = "/products";
                  }}
                >
                  Reset
                </Button>
              </div>
            </details>
            
            <!-- Maintain sort in form submission and reset page -->
            <input type="hidden" name="sort" value={sortParam} />
            <input type="hidden" name="page" value="1" /> <!-- Reset to page 1 when filtering -->
            {companyId && <input type="hidden" name="company" value={companyId} />}
          </form>
        </div>
      </Card>
    </div>
    
    <!-- Results count -->
    <div class="flex justify-between items-center mb-4">
      <p class="text-sm text-gray-700">
        Showing <span class="font-semibold">{products.length > 0 ? (page - 1) * limit + 1 : 0} - {Math.min(page * limit, totalCount)}</span> of <span class="font-semibold">{totalCount}</span> products
      </p>
    </div>
      
    <!-- Products Grid -->
    {products.length > 0 ? (
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-3 gap-4 mb-8">
        {products.map((product: Product) => (
          <ProductCard product={product} />
        ))}
      </div>
    ) : (
      <Card>
        <div class="text-center py-12">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 mx-auto text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
          <h3 class="mt-2 text-lg font-medium text-gray-900">No products found</h3>
          <p class="mt-1 text-gray-500">Try adjusting your search or filter criteria.</p>
          <div class="mt-6">
            <Button href="/products" variant="outline">Reset all filters</Button>
          </div>
        </div>
      </Card>
    )}
    
    <!-- Pagination -->
    {totalPages > 1 && (
      <div class="flex justify-center my-6">
        <Pagination
          currentPage={page}
          totalPages={totalPages}
          getPageUrl={(pageNum) => {
            const updatedUrl = new URL(Astro.url);
            updatedUrl.searchParams.set('page', pageNum.toString());
            return updatedUrl.pathname + updatedUrl.search;
          }}
        />
      </div>
    )}
    
    <!-- Data Source Indicator -->
    <div class="mt-8">
      <DataSourceVisualizer />
    </div>
  </div>
</DashboardLayout> 
