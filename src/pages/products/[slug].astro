---
/**
 * Product Detail Page
 * 
 * Displays detailed information about a specific pharmaceutical product.
 */
import DashboardLayout from '../../components/templates/DashboardLayout.astro';
import Card from '../../components/atoms/Card.astro';
import Button from '../../components/atoms/Button.astro';
import FollowButton from '../../components/molecules/FollowButton.astro';
import TabGroup from '../../components/molecules/TabGroup.astro';
import Timeline from '../../components/molecules/Timeline.astro';
import DataTable from '../../components/molecules/DataTable.astro';
import ProductCard from '../../components/molecules/ProductCard.astro';

// Import Supabase client directly
import { supabase } from '../../lib/supabase';
import { dbProductToProduct } from '../../interfaces/entities/Product';
import { dbCompanyToCompany } from '../../interfaces/entities/Company';
import { dbWebsiteToWebsite } from '../../interfaces/entities/Website';
import { dbTherapeuticAreaToTherapeuticArea } from '../../interfaces/entities/TherapeuticArea';
import type { Product, Company, Website, TherapeuticArea } from '../../interfaces/entities';

import { getProductImageUrl } from '../../utils/assetUtils';
import { generateSlug } from '../../utils/stringUtils';

// Helper function to get stage name
const getStageName = (stage: string): string => {
  const stageMap = {
    'preclinical': 'Preclinical',
    'phase1': 'Phase 1',
    'phase2': 'Phase 2',
    'phase3': 'Phase 3',
    'approved': 'Approved',
    'market': 'Marketed',
    'discontinued': 'Discontinued'
  };
  return stageMap[stage] || stage;
};

// Generate static paths for all products
export async function getStaticPaths() {
  const { data: dbProducts } = await supabase
    .from('products')
    .select('id, slug, name');
    
  return (dbProducts || []).map(product => ({
    params: { 
      slug: product.slug
    },
    props: { productId: product.id }
  }));
}

// Get product ID or slug from URL parameters
const { slug } = Astro.params;
const { productId } = Astro.props;

// Fetch product data directly from Supabase - first try by ID from props, then by slug
let productResponse;

if (productId) {
  productResponse = await supabase
    .from('products')
    .select('*')
    .eq('id', productId)
    .single();
}

// If not found or ID not provided, try to fetch by slug
if (!productResponse || productResponse.error || !productResponse.data) {
  productResponse = await supabase
    .from('products')
    .select('*')
    .eq('slug', slug)
    .single();
    
  // Last resort, try to fetch by ID as fallback
  if (productResponse.error || !productResponse.data) {
    productResponse = await supabase
      .from('products')
      .select('*')
      .eq('id', slug)
      .single();
  }
}

const { data: dbProduct, error: productError } = productResponse;

// Handle product not found
if (productError || !dbProduct) {
  return Astro.redirect('/products');
}

// Convert database record to application entity
const product = dbProductToProduct(dbProduct);

// Ensure product.approvals is initialized
if (!product.approvals) {
  product.approvals = [];
}

// Fetch company that manufactures the product
const { data: dbCompany } = await supabase
  .from('companies')
  .select('*')
  .eq('id', product.companyId)
  .single();

// Convert company data to entity
const company = dbCompany ? dbCompanyToCompany(dbCompany) : null;

// Fetch therapeutic areas for this product
const { data: productTARelations } = await supabase
  .from('product_therapeutic_areas')
  .select('therapeutic_area_id')
  .eq('product_id', slug);

const therapeuticAreaIds = (productTARelations || []).map(rel => rel.therapeutic_area_id);
let therapeuticAreas: TherapeuticArea[] = [];

if (therapeuticAreaIds.length > 0) {
  const { data: dbTherapeuticAreas } = await supabase
    .from('therapeutic_areas')
    .select('*')
    .in('id', therapeuticAreaIds);
  
  therapeuticAreas = (dbTherapeuticAreas || []).map(dbTherapeuticAreaToTherapeuticArea);
}

// Fetch websites associated with this product
const { data: productWebsites } = await supabase
  .from('product_websites')
  .select('website_id')
  .eq('product_id', slug);

const websiteIds = (productWebsites || []).map(rel => rel.website_id);
let websites: Website[] = [];

if (websiteIds.length > 0) {
  const { data: dbWebsites } = await supabase
    .from('websites')
    .select('*')
    .in('id', websiteIds);
  
  websites = (dbWebsites || []).map(dbWebsiteToWebsite);
}

// Fetch related products (same therapeutic areas)
const { data: relatedProductsRelations } = await supabase
  .from('product_therapeutic_areas')
  .select('product_id')
  .in('therapeutic_area_id', therapeuticAreaIds)
  .neq('product_id', slug)
  .limit(5);

const relatedProductIds = [...new Set((relatedProductsRelations || []).map(rel => rel.product_id))];
let relatedProducts: Product[] = [];

if (relatedProductIds.length > 0) {
  const { data: dbRelatedProducts } = await supabase
    .from('products')
    .select('*')
    .in('id', relatedProductIds);
  
  relatedProducts = (dbRelatedProducts || []).map(dbProductToProduct);
}

// Function to get therapeutic area name
const getTherapeuticAreaName = (id: string) => {
  const area = therapeuticAreas.find(a => a.id === id);
  return area ? area.name : id;
};

// Set up breadcrumbs for navigation
const breadcrumbs = [
  { label: 'Home', href: '/' },
  { label: 'Products', href: '/products' },
  { label: product.name, href: `/products/${product.slug}`, active: true }
];

// Function to get category label
const getCategoryLabel = (categoryId: string) => {
  const category = websites.find(c => c.value === categoryId);
  return category ? category.label : categoryId;
};

// Group websites by category for display
const websitesByCategory = websites.reduce((acc, website) => {
  const category = website.category || 'other';
  if (!acc[category]) {
    acc[category] = [];
  }
  acc[category].push(website);
  return acc;
}, {} as Record<string, any[]>);

// Default tab is "overview"
const activeTab = "overview";

// Define tabs
const tabs = [
  { id: "overview", label: "Overview", icon: '<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>' },
  { id: "websites", label: "Official Websites", icon: '<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9a9 9 0 01-9-9m9 9c1.657 0 3-4.03 3-9s-1.343-9-3-9m0 18c-1.657 0-3-4.03-3-9s1.343-9 3-9m-9 9a9 9 0 019-9" /></svg>' },
  { id: "regulatory", label: "Regulatory", icon: '<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z" /></svg>' },
  { id: "timeline", label: "Development Timeline", icon: '<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6" /></svg>' },
  { id: "patents", label: "Patents", icon: '<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" /></svg>' },
];

// Format date helper
const formatDate = (dateString: string) => {
  const date = new Date(dateString);
  return date.toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' });
};
---

<DashboardLayout
  title={`${product.name} | Top Pharma`}
  description={`Detailed information about ${product.name} (${product.genericName || 'no generic name'}), a ${product.moleculeType} for ${product.indications.join(', ')}`}
  currentPath={`/products/${product.slug}`}
  breadcrumbs={breadcrumbs}
>
  <div class="space-y-6">
    <!-- Product Header Section - Updated to match company header structure -->
    <div class="relative">
      <!-- Header Background Image -->
      <div class="h-48 w-full bg-gradient-to-r from-green-600 to-green-700 relative overflow-hidden shadow-md">
        {/* We could add a background image with product branding here if available */}
      </div>
      
      <!-- Product Info Card -->
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 relative">
        <div class="bg-white rounded-lg shadow-lg overflow-hidden -mt-24 mb-8">
          <div class="p-6 sm:p-8">
            <div class="flex flex-col md:flex-row items-start md:items-center">
              <!-- Product Logo/Image -->
              <div class="w-24 h-24 bg-white rounded-lg shadow-md flex items-center justify-center overflow-hidden mr-6 mb-4 md:mb-0">
                {product.imageUrl ? (
                  <img src={product.imageUrl} alt={product.name} class="max-w-full max-h-full p-2" />
                ) : (
                  <span class="text-3xl font-bold text-green-600">{product.name.charAt(0)}</span>
                )}
              </div>
              
              <!-- Product Basic Info -->
              <div class="flex-grow">
                <div class="flex items-center justify-between flex-wrap">
                  <div>
                    <h1 class="text-2xl font-bold text-gray-900 mr-4">{product.name}</h1>
                    {product.genericName && (
                      <p class="text-gray-500 text-sm">{product.genericName}</p>
                    )}
                  </div>
                  
                  <div class="flex space-x-3 mt-2 md:mt-0">
                    {product.website && (
                      <Button 
                        href={product.website.startsWith('http') ? product.website : `https://${product.website}`} 
                        target="_blank"
                        variant="outline"
                        size="sm"
                      >
                        <span class="flex items-center">
                          <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
                          </svg>
                          Website
                        </span>
                      </Button>
                    )}
                    
                    <FollowButton 
                      entityId={product.id} 
                      entityType="product"
                      size="sm"
                    />
                  </div>
                </div>
                
                <div class="mt-2 flex flex-wrap items-center text-sm text-gray-500">
                  <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800 mr-2">
                    {getStageName(product.stage)}
                  </span>
                  {product.moleculeType && (
                    <span class="mr-4">{product.moleculeType}</span>
                  )}
                </div>
              </div>
            </div>
          </div>
          
          {/* Company attribution */}
          {company && (
            <div class="bg-gray-50 px-6 sm:px-8 py-3 border-t border-gray-200">
              <div class="flex items-center text-gray-700">
                <span class="text-sm mr-2">Developed by:</span>
                <a href={`/companies/${company.slug}`} class="text-primary-600 hover:text-primary-800 font-medium text-sm">
                  {company.name}
                </a>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
    
    <!-- Tabs Navigation -->
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 mt-6">
      <TabGroup tabs={tabs} activeTab={activeTab} tabPanelId="product-tab-content" />
      
      <!-- Tab Content -->
      <div class="mt-6">
        <!-- Overview Tab -->
        <div id="product-tab-content-overview" role="tabpanel" aria-labelledby="tab-overview" class="space-y-6">
          <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
            <!-- Key Metrics/Facts Column -->
            <div class="col-span-1">
              <Card>
                <div class="p-4">
                  <h3 class="text-lg font-medium text-gray-900 mb-4">Key Facts</h3>
                  <div class="space-y-4">
                    <div class="flex">
                      <div class="flex-shrink-0">
                        <svg class="h-5 w-5 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z" />
                        </svg>
                      </div>
                      <div class="ml-3">
                        <p class="text-sm font-medium text-gray-500">Status</p>
                        <p class="text-sm text-gray-900">{getStageName(product.stage)}</p>
                      </div>
                    </div>
                    {product.year && (
                      <div class="flex">
                        <div class="flex-shrink-0">
                          <svg class="h-5 w-5 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                          </svg>
                        </div>
                        <div class="ml-3">
                          <p class="text-sm font-medium text-gray-500">Year</p>
                          <p class="text-sm text-gray-900">{product.year}</p>
                        </div>
                      </div>
                    )}
                    {product.moleculeType && (
                      <div class="flex">
                        <div class="flex-shrink-0">
                          <svg class="h-5 w-5 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19.428 15.428a2 2 0 00-1.022-.547l-2.387-.477a6 6 0 00-3.86.517l-.318.158a6 6 0 01-3.86.517L6.05 15.21a2 2 0 00-1.806.547M8 4h8l-1 1v5.172a2 2 0 00.586 1.414l5 5c1.26 1.26.367 3.414-1.415 3.414H4.828c-1.782 0-2.674-2.154-1.414-3.414l5-5A2 2 0 009 10.172V5L8 4z" />
                          </svg>
                        </div>
                        <div class="ml-3">
                          <p class="text-sm font-medium text-gray-500">Type</p>
                          <p class="text-sm text-gray-900">{product.moleculeType}</p>
                        </div>
                      </div>
                    )}
                    {/* Could add more key metrics here */}
                  </div>
                </div>
              </Card>
              
              {therapeuticAreas.length > 0 && (
                <Card class="mt-6">
                  <div class="p-4">
                    <h3 class="text-lg font-medium text-gray-900 mb-4">Therapeutic Areas</h3>
                    <div class="flex flex-wrap gap-2">
                      {therapeuticAreas.map(area => (
                        <a 
                          href={`/therapeutic-areas/${area.slug}`} 
                          class="inline-flex items-center rounded-full bg-blue-100 px-3 py-0.5 text-sm font-medium text-blue-800 hover:bg-blue-200"
                        >
                          {area.name}
                        </a>
                      ))}
                    </div>
                  </div>
                </Card>
              )}
            </div>
            
            <!-- Product Description -->
            <div class="col-span-2">
              <Card>
                <div class="p-4">
                  <h3 class="text-lg font-medium text-gray-900 mb-4">About {product.name}</h3>
                  {product.description ? (
                    <p class="text-gray-600">{product.description}</p>
                  ) : (
                    <p class="text-gray-500 italic">No product description available</p>
                  )}
                </div>
              </Card>
              
              <!-- Indications -->
              <Card class="mt-6">
                <div class="p-4">
                  <h3 class="text-lg font-medium text-gray-900 mb-4">Indications</h3>
                  {product.indications && product.indications.length > 0 ? (
                    <ul class="list-disc pl-5 space-y-1 text-gray-700">
                      {product.indications.map(indication => (
                        <li>{indication}</li>
                      ))}
                    </ul>
                  ) : (
                    <p class="text-gray-500 italic">No indications listed.</p>
                  )}
                </div>
              </Card>
            </div>
          </div>
        </div>
        
        <!-- Websites Tab -->
        <div id="product-tab-content-websites" role="tabpanel" aria-labelledby="tab-websites" class="space-y-6 hidden">
          <Card>
            <div class="p-4">
              <h3 class="text-lg font-medium text-gray-900 mb-4">Official Websites</h3>
              {websites.length > 0 ? (
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                  {websites.map(website => (
                    <div class="border border-gray-200 rounded-lg shadow-sm overflow-hidden">
                      <div class="p-4">
                        <div class="flex justify-between items-start">
                          <h3 class="font-medium text-gray-900">{website.domain}</h3>
                          <span class="inline-flex items-center rounded-full bg-blue-50 px-2 py-1 text-xs font-medium text-blue-700">
                            {website.category}
                          </span>
                        </div>
                        <div class="mt-2 flex justify-between items-center">
                          <a href={`/websites/${website.slug}`} class="text-sm font-medium text-blue-600 hover:text-blue-800">
                            View details
                          </a>
                          <a href={`https://${website.domain}`} target="_blank" rel="noopener noreferrer" class="text-sm text-gray-500 hover:text-gray-700">
                            Visit site →
                          </a>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              ) : (
                <div class="text-center py-6">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 mx-auto text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9a9 9 0 01-9-9m9 9c1.657 0 3-4.03 3-9s-1.343-9-3-9m0 18c-1.657 0-3-4.03-3-9s1.343-9 3-9m-9 9a9 9 0 019-9" />
                  </svg>
                  <h3 class="mt-2 text-lg font-medium text-gray-900">No official websites found</h3>
                  <p class="mt-1 text-gray-500">No official websites found for this product.</p>
                </div>
              )}
            </div>
          </Card>
        </div>
        
        <!-- Regulatory Tab -->
        <div id="product-tab-content-regulatory" role="tabpanel" aria-labelledby="tab-regulatory" class="space-y-6 hidden">
          <Card>
            <div class="p-4">
              <h3 class="text-lg font-medium text-gray-900 mb-4">Regulatory Information</h3>
              {product.approvals && product.approvals.length > 0 ? (
                <div class="overflow-hidden shadow ring-1 ring-black ring-opacity-5 md:rounded-lg">
                  <table class="min-w-full divide-y divide-gray-300">
                    <thead class="bg-gray-50">
                      <tr>
                        <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Region</th>
                        <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Agency</th>
                        <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Status</th>
                        <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Date</th>
                        <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Indication</th>
                      </tr>
                    </thead>
                    <tbody class="divide-y divide-gray-200 bg-white">
                      {product.approvals.map(approval => (
                        <tr>
                          <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">{approval.region}</td>
                          <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">{approval.agency}</td>
                          <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                              {approval.status}
                            </span>
                          </td>
                          <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">{formatDate(approval.date)}</td>
                          <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">{approval.indication}</td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              ) : (
                <div class="text-center py-6">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 mx-auto text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z" />
                  </svg>
                  <h3 class="mt-2 text-lg font-medium text-gray-900">No regulatory information</h3>
                  <p class="mt-1 text-gray-500">No regulatory approvals or submissions found for this product.</p>
                </div>
              )}
            </div>
          </Card>
        </div>
        
        <!-- Development Timeline Tab -->
        <div id="product-tab-content-timeline" role="tabpanel" aria-labelledby="tab-timeline" class="space-y-6 hidden">
          <Card>
            <div class="p-4">
              <h3 class="text-lg font-medium text-gray-900 mb-4">Development Timeline</h3>
              {/* Timeline component goes here - use placeholder for now */}
              <div class="text-center py-6">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 mx-auto text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6" />
                </svg>
                <h3 class="mt-2 text-lg font-medium text-gray-900">No development timeline</h3>
                <p class="mt-1 text-gray-500">Development timeline information is not available for this product.</p>
              </div>
            </div>
          </Card>
        </div>
        
        <!-- Patents Tab -->
        <div id="product-tab-content-patents" role="tabpanel" aria-labelledby="tab-patents" class="space-y-6 hidden">
          <Card>
            <div class="p-4">
              <h3 class="text-lg font-medium text-gray-900 mb-4">Patent Information</h3>
              {/* Patent information would go here - use placeholder for now */}
              <div class="text-center py-6">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 mx-auto text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                </svg>
                <h3 class="mt-2 text-lg font-medium text-gray-900">No patent information</h3>
                <p class="mt-1 text-gray-500">Patent information is not available for this product.</p>
              </div>
            </div>
          </Card>
        </div>
      </div>
    </div>
  </div>
</DashboardLayout>

<script>
  // Handle "View more websites" link
  document.addEventListener('DOMContentLoaded', () => {
    const viewMoreWebsitesBtn = document.querySelector('.view-more-websites');
    
    if (viewMoreWebsitesBtn) {
      viewMoreWebsitesBtn.addEventListener('click', (e) => {
        e.preventDefault();
        
        // Find tab link for websites tab and click it
        const websitesTab = document.querySelector('[data-tab-id="websites"]');
        if (websitesTab) {
          websitesTab.click();
        }
      });
    }
    
    // Additional product-specific functionality can go here
  });
</script> 