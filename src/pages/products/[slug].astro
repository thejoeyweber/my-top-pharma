---
/**
 * Product Detail Page
 * 
 * Displays detailed information about a specific pharmaceutical product.
 */
import DashboardLayout from '../../components/templates/DashboardLayout.astro';
import Card from '../../components/atoms/Card.astro';
import CardHeader from '../../components/atoms/CardHeader.astro';
import CardBody from '../../components/atoms/CardBody.astro';
import CardFooter from '../../components/atoms/CardFooter.astro';
import Button from '../../components/atoms/Button.astro';
import FollowButton from '../../components/molecules/FollowButton.astro';
import TabGroup from '../../components/molecules/TabGroup.astro';
import Timeline from '../../components/molecules/Timeline.astro';
import DataTable from '../../components/molecules/DataTable.astro';
import ProductCard from '../../components/molecules/ProductCard.astro';

// Import utility functions instead of direct Supabase client
import { getProductBySlug, getProductTherapeuticAreas, getRelatedProducts } from '../../lib/utils/productUtils';
import { getCompanyBySlug } from '../../lib/utils/companyUtils';
import type { Product, Company, Website, TherapeuticArea } from '../../interfaces/entities';

import { getProductImageUrl } from '../../utils/assetUtils';
import { generateSlug } from '../../utils/stringUtils';

// Helper function to get stage name
const getStageName = (stage: string): string => {
  const stageMap = {
    'preclinical': 'Preclinical',
    'phase1': 'Phase 1',
    'phase2': 'Phase 2',
    'phase3': 'Phase 3',
    'approved': 'Approved',
    'market': 'Marketed',
    'discontinued': 'Discontinued'
  };
  return stageMap[stage] || stage;
};

// Generate static paths for all products is still done with Supabase for now
// This would be migrated to a utility function in a future phase
export async function getStaticPaths() {
  const { supabase } = await import('../../lib/supabase');
  const { data: dbProducts } = await supabase
    .from('products')
    .select('id, slug, name');
    
  return (dbProducts || []).map(product => ({
    params: { 
      slug: product.slug
    },
    props: { productId: product.id }
  }));
}

// Get product ID or slug from URL parameters
const { slug } = Astro.params;
const { productId } = Astro.props;

// Fetch product data using our utility function
let product: Product | null;

if (productId) {
  // If we have a productId from static paths, use that to fetch
  const { supabase } = await import('../../lib/supabase');
  const { data } = await supabase
    .from('products')
    .select('*')
    .eq('id', productId)
    .single();
    
  if (data) {
    const { dbProductToProduct } = await import('../../interfaces/entities/Product');
    product = dbProductToProduct(data);
  } else {
    product = await getProductBySlug(slug);
  }
} else {
  // Otherwise use slug to fetch
  product = await getProductBySlug(slug);
}

// Handle product not found
if (!product) {
  return Astro.redirect('/products');
}

// Ensure product.approvals is initialized
if (!product.approvals) {
  product.approvals = [];
}

// Fetch company that manufactures the product
const company = product.companyId ? await getCompanyBySlug(product.companyId) : null;

// Fetch therapeutic areas for this product
const therapeuticAreaNames = await getProductTherapeuticAreas(product.id);
product.therapeuticAreas = therapeuticAreaNames;

// Fetch related products based on shared therapeutic areas
const relatedProducts = await getRelatedProducts(product.id, 5);

// Set up breadcrumbs for navigation
const breadcrumbs = [
  { label: 'Home', href: '/' },
  { label: 'Products', href: '/products' },
  { label: product.name, href: `/products/${product.slug}`, active: true }
];

// Default tab is "overview"
const activeTab = "overview";

// Define tabs
const tabs = [
  { id: "overview", label: "Overview", icon: '<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>' },
  { id: "websites", label: "Official Websites", icon: '<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9a9 9 0 01-9-9m9 9c1.657 0 3-4.03 3-9s-1.343-9-3-9m0 18c-1.657 0-3-4.03-3-9s1.343-9 3-9m-9 9a9 9 0 019-9" /></svg>' },
  { id: "regulatory", label: "Regulatory", icon: '<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z" /></svg>' },
  { id: "timeline", label: "Development Timeline", icon: '<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6" /></svg>' },
  { id: "patents", label: "Patents", icon: '<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" /></svg>' },
];

// Format date helper
const formatDate = (dateString: string) => {
  const date = new Date(dateString);
  return date.toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' });
};

// Explicitly set to false to avoid warnings about getStaticPaths being ignored
export const prerender = false;
---

<DashboardLayout
  title={`${product.name} | Top Pharma`}
  description={`Detailed information about ${product.name} (${product.genericName || 'no generic name'}), a ${product.moleculeType} for ${product.indications?.join(', ') || 'various conditions'}`}
  currentPath={`/products/${product.slug}`}
  breadcrumbs={breadcrumbs}
>
  <div class="space-y-6">
    <!-- Product Header Section - Updated to match company header structure -->
    <div class="relative">
      <!-- Header Background Image -->
      <div class="h-48 w-full bg-gradient-to-r from-green-600 to-green-700 relative overflow-hidden shadow-md">
        {/* We could add a background image with product branding here if available */}
      </div>
      
      <!-- Product Info Card -->
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 relative">
        <div class="bg-white rounded-lg shadow-lg overflow-hidden -mt-24 mb-8">
          <div class="p-6 sm:p-8">
            <div class="flex flex-col md:flex-row items-start md:items-center">
              <!-- Product Logo/Image -->
              <div class="w-24 h-24 bg-white rounded-lg shadow-md flex items-center justify-center overflow-hidden mr-6 mb-4 md:mb-0">
                {product.imageUrl ? (
                  <img src={product.imageUrl} alt={product.name} class="max-w-full max-h-full p-2" />
                ) : (
                  <span class="text-3xl font-bold text-green-600">{product.name.charAt(0)}</span>
                )}
              </div>
              
              <!-- Product Basic Info -->
              <div class="flex-grow">
                <div class="flex items-center justify-between flex-wrap">
                  <div>
                    <h1 class="text-2xl font-bold text-gray-900 mb-1">{product.name}</h1>
                    {product.genericName && (
                      <p class="text-sm text-gray-500 mb-2">{product.genericName}</p>
                    )}
                    <div class="flex flex-wrap gap-2 mb-3">
                      {/* Stage Badge */}
                      {product.stage && (
                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                          {getStageName(product.stage)}
                        </span>
                      )}
                      
                      {/* Molecule Type Badge */}
                      {product.moleculeType && (
                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-purple-100 text-purple-800">
                          {product.moleculeType}
                        </span>
                      )}
                      
                      {/* Year Badge */}
                      {product.year && (
                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
                          {product.year}
                        </span>
                      )}
                    </div>
                    
                    {/* Company Info */}
                    {company && (
                      <p class="text-sm text-gray-600">
                        Manufactured by: 
                        <a href={`/companies/${company.slug}`} class="text-blue-600 hover:text-blue-800 font-medium">
                          {company.name}
                        </a>
                      </p>
                    )}
                  </div>
                  
                  <div class="mt-4 md:mt-0">
                    <div class="flex space-x-2">
                      <FollowButton entityId={product.id} entityType="product" initialFollowing={false} />
                      
                      {product.website && (
                        <a href={product.website} target="_blank" rel="noopener noreferrer">
                          <Button variant="secondary" icon="external-link">Visit Website</Button>
                        </a>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Page Content -->
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 grid grid-cols-1 lg:grid-cols-3 gap-6">
      <!-- Main Content Area -->
      <div class="lg:col-span-2 space-y-6">
        <!-- Tabs -->
        <Card>
          <TabGroup tabs={tabs} activeTab={activeTab} />
        </Card>
        
        <!-- Overview Section (default tab) -->
        <div class="space-y-6" id="overview-content">
          <!-- Description Card -->
          <Card>
            <CardHeader>
              <h2 class="text-xl font-semibold text-gray-900">About {product.name}</h2>
            </CardHeader>
            <CardBody>
              <div class="prose max-w-none">
                {product.description ? (
                  <p>{product.description}</p>
                ) : (
                  <p class="text-gray-500 italic">No description available.</p>
                )}
              </div>
              
              <!-- Indications -->
              {product.indications && product.indications.length > 0 && (
                <div class="mt-6">
                  <h3 class="text-lg font-medium text-gray-900 mb-2">Indications</h3>
                  <ul class="list-disc pl-5 space-y-1">
                    {product.indications.map((indication: string) => (
                      <li>{indication}</li>
                    ))}
                  </ul>
                </div>
              )}
              
              <!-- Therapeutic Areas -->
              {product.therapeuticAreas && product.therapeuticAreas.length > 0 && (
                <div class="mt-6">
                  <h3 class="text-lg font-medium text-gray-900 mb-2">Therapeutic Areas</h3>
                  <div class="flex flex-wrap gap-2">
                    {product.therapeuticAreas.map((area: string) => (
                      <span class="inline-flex items-center px-3 py-0.5 rounded-full text-sm font-medium bg-green-100 text-green-800">
                        {area}
                      </span>
                    ))}
                  </div>
                </div>
              )}
            </CardBody>
          </Card>
          
          <!-- Key Details Card -->
          <Card>
            <CardHeader>
              <h2 class="text-xl font-semibold text-gray-900">Key Details</h2>
            </CardHeader>
            <CardBody>
              <div class="grid grid-cols-1 sm:grid-cols-2 gap-6">
                {/* Basic Info Group */}
                <div>
                  <h3 class="text-lg font-medium text-gray-900 mb-3">Product Information</h3>
                  <dl class="space-y-3">
                    <div>
                      <dt class="text-sm font-medium text-gray-500">Brand Name</dt>
                      <dd class="mt-1 text-sm text-gray-900">{product.name}</dd>
                    </div>
                    
                    {product.genericName && (
                      <div>
                        <dt class="text-sm font-medium text-gray-500">Generic Name</dt>
                        <dd class="mt-1 text-sm text-gray-900">{product.genericName}</dd>
                      </div>
                    )}
                    
                    {product.moleculeType && (
                      <div>
                        <dt class="text-sm font-medium text-gray-500">Molecule Type</dt>
                        <dd class="mt-1 text-sm text-gray-900">{product.moleculeType}</dd>
                      </div>
                    )}
                    
                    {product.year && (
                      <div>
                        <dt class="text-sm font-medium text-gray-500">Year Introduced</dt>
                        <dd class="mt-1 text-sm text-gray-900">{product.year}</dd>
                      </div>
                    )}
                  </dl>
                </div>
                
                {/* Development Status Group */}
                <div>
                  <h3 class="text-lg font-medium text-gray-900 mb-3">Development Status</h3>
                  <dl class="space-y-3">
                    {product.stage && (
                      <div>
                        <dt class="text-sm font-medium text-gray-500">Current Stage</dt>
                        <dd class="mt-1 text-sm text-gray-900">{getStageName(product.stage)}</dd>
                      </div>
                    )}
                    
                    {product.status && (
                      <div>
                        <dt class="text-sm font-medium text-gray-500">Status</dt>
                        <dd class="mt-1 text-sm text-gray-900">{product.status}</dd>
                      </div>
                    )}
                    
                    {/* Maybe add FDA approvals or other key milestones here */}
                    {product.approvals && product.approvals.length > 0 && (
                      <div>
                        <dt class="text-sm font-medium text-gray-500">Latest Approval</dt>
                        <dd class="mt-1 text-sm text-gray-900">
                          {formatDate(product.approvals[0].date)} ({product.approvals[0].agency})
                        </dd>
                      </div>
                    )}
                  </dl>
                </div>
              </div>
            </CardBody>
          </Card>
          
          <!-- Regulatory Approvals Section (hidden in overview tab) -->
          <div class="hidden" id="regulatory-content">
            <Card>
              <CardHeader>
                <h2 class="text-xl font-semibold text-gray-900">Regulatory Approvals</h2>
              </CardHeader>
              <CardBody>
                {product.approvals && product.approvals.length > 0 ? (
                  <DataTable 
                    headers={['Region', 'Agency', 'Date', 'Indication', 'Status']}
                    data={product.approvals.map((approval) => [
                      approval.region,
                      approval.agency,
                      formatDate(approval.date),
                      approval.indication,
                      approval.status
                    ])}
                  />
                ) : (
                  <p class="text-gray-500 italic">No regulatory approval information available.</p>
                )}
              </CardBody>
            </Card>
          </div>
          
          <!-- Timeline Section (hidden in overview tab) -->
          <div class="hidden" id="timeline-content">
            <Card>
              <CardHeader>
                <h2 class="text-xl font-semibold text-gray-900">Development Timeline</h2>
              </CardHeader>
              <CardBody>
                {product.timeline && product.timeline.length > 0 ? (
                  <Timeline 
                    events={product.timeline.map((event) => ({
                      date: formatDate(event.date),
                      title: event.stage,
                      description: event.description
                    }))}
                  />
                ) : (
                  <p class="text-gray-500 italic">No timeline information available.</p>
                )}
              </CardBody>
            </Card>
          </div>
          
          <!-- Patents Section (hidden in overview tab) -->
          <div class="hidden" id="patents-content">
            <Card>
              <CardHeader>
                <h2 class="text-xl font-semibold text-gray-900">Patents</h2>
              </CardHeader>
              <CardBody>
                {product.patents && product.patents.length > 0 ? (
                  <DataTable 
                    headers={['Patent Number', 'Expiry Date', 'Description']}
                    data={product.patents.map((patent) => [
                      patent.number,
                      formatDate(patent.expiryDate),
                      patent.description
                    ])}
                  />
                ) : (
                  <p class="text-gray-500 italic">No patent information available.</p>
                )}
              </CardBody>
            </Card>
          </div>
          
          <!-- Websites Section (hidden in overview tab) -->
          <div class="hidden" id="websites-content">
            <Card>
              <CardHeader>
                <h2 class="text-xl font-semibold text-gray-900">Official Websites</h2>
              </CardHeader>
              <CardBody>
                {product.website ? (
                  <div>
                    <h3 class="text-lg font-medium text-gray-900 mb-3">Product Website</h3>
                    <a 
                      href={product.website} 
                      class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                      target="_blank"
                      rel="noopener noreferrer"
                    >
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
                      </svg>
                      Visit Official Website
                    </a>
                  </div>
                ) : (
                  <p class="text-gray-500 italic">No official website information available.</p>
                )}
              </CardBody>
            </Card>
          </div>
        </div>
      </div>
      
      <!-- Sidebar -->
      <div class="space-y-6">
        <!-- Related Products -->
        {relatedProducts && relatedProducts.length > 0 && (
          <Card>
            <CardHeader>
              <h2 class="text-xl font-semibold text-gray-900">Related Products</h2>
            </CardHeader>
            <CardBody>
              <div class="space-y-4">
                {relatedProducts.map((relatedProduct) => (
                  <ProductCard 
                    product={relatedProduct}
                    compact={true}
                  />
                ))}
              </div>
            </CardBody>
          </Card>
        )}
      </div>
    </div>
  </div>
</DashboardLayout>

<script>
  // Simple tab switching logic
  document.addEventListener('DOMContentLoaded', () => {
    const tabs = document.querySelectorAll('[data-tab]');
    const contents = {
      overview: document.getElementById('overview-content'),
      websites: document.getElementById('websites-content'),
      regulatory: document.getElementById('regulatory-content'),
      timeline: document.getElementById('timeline-content'),
      patents: document.getElementById('patents-content'),
    };
    
    tabs.forEach(tab => {
      tab.addEventListener('click', (e) => {
        e.preventDefault();
        
        // Remove active class from all tabs
        tabs.forEach(t => t.classList.remove('active-tab'));
        
        // Add active class to clicked tab
        tab.classList.add('active-tab');
        
        // Hide all content
        Object.values(contents).forEach(content => {
          if (content) content.classList.add('hidden');
        });
        
        // Show selected content
        const tabId = tab.getAttribute('data-tab');
        if (tabId && contents[tabId]) {
          contents[tabId].classList.remove('hidden');
        }
      });
    });
  });
</script> 