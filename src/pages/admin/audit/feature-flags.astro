---
/**
 * Feature Flags Management Page
 * 
 * Allows administrators to view and toggle feature flags for the application.
 * Provides a dedicated UI for managing database source toggles.
 */
import DashboardLayout from '../../../components/templates/DashboardLayout.astro';
import Card from '../../../components/atoms/Card.astro';
import { FEATURES, getAllFeatureFlags } from '../../../utils/featureFlags';

// Breadcrumbs for navigation
const breadcrumbs = [
  { label: 'Home', href: '/' },
  { label: 'Admin', href: '/admin' },
  { label: 'Audit', href: '/admin/audit' },
  { label: 'Feature Flags', href: '/admin/audit/feature-flags', isActive: true },
];

// Group feature flags by category
const featureFlags = getAllFeatureFlags();

// Define categories for organization
const categories = {
  database: {
    title: 'Database Connection',
    description: 'Control which Supabase instance to use for database operations',
    flags: [FEATURES.USE_LOCAL_DATABASE]
  },
  dataSources: {
    title: 'Data Sources',
    description: 'Control whether to use database or static JSON for each data type',
    flags: [
      FEATURES.USE_DATABASE_COMPANIES,
      FEATURES.USE_DATABASE_PRODUCTS,
      FEATURES.USE_DATABASE_WEBSITES,
      FEATURES.USE_DATABASE_THERAPEUTIC_AREAS
    ]
  },
  financialData: {
    title: 'Financial Data',
    description: 'Control data sources for financial information',
    flags: [
      FEATURES.USE_DATABASE_COMPANY_FINANCIALS,
      FEATURES.USE_DATABASE_COMPANY_METRICS,
      FEATURES.USE_DATABASE_COMPANY_STOCK_DATA
    ]
  },
  ui: {
    title: 'UI Features',
    description: 'Control UI-related feature flags',
    flags: [FEATURES.ENABLE_DATA_SOURCE_TOGGLE]
  }
};

// Format feature flag name for display
const formatFlagName = (flag) => {
  return flag
    .replace(/_/g, ' ')
    .toLowerCase()
    .replace(/\b\w/g, l => l.toUpperCase());
};
---

<DashboardLayout title="Feature Flags | Admin | Top Pharma">
  <div class="min-h-screen bg-gray-100">
    <header class="bg-white shadow">
      <div class="mx-auto max-w-7xl px-4 py-6 sm:px-6 lg:px-8">
        <div class="flex items-center">
          <a href="/admin/audit" class="mr-2 text-gray-400 hover:text-gray-600">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-5 h-5">
              <path fill-rule="evenodd" d="M11.03 3.97a.75.75 0 0 1 0 1.06l-6.22 6.22H21a.75.75 0 0 1 0 1.5H4.81l6.22 6.22a.75.75 0 1 1-1.06 1.06l-7.5-7.5a.75.75 0 0 1 0-1.06l7.5-7.5a.75.75 0 0 1 1.06 0Z" clip-rule="evenodd" />
            </svg>
          </a>
          <h1 class="text-2xl font-bold text-gray-900">Feature Flags</h1>
        </div>
        <p class="mt-2 text-sm text-gray-500">
          Manage feature flags to control data sources and application behavior
        </p>
      </div>
    </header>
    
    <main class="py-6">
      <div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
        <!-- Database Connection Section -->
        <div class="mb-6">
          <Card>
            <div class="p-6">
              <h2 class="text-lg font-medium mb-4">Database Connection</h2>
              
              <div class="bg-white p-4 rounded-lg border border-gray-200 mb-4">
                <div class="flex items-center justify-between">
                  <div>
                    <h3 class="text-base font-medium">{formatFlagName(FEATURES.USE_LOCAL_DATABASE)}</h3>
                    <p class="text-sm text-gray-500 mt-1">
                      When enabled, uses the local Supabase instance (http://localhost:54321) instead of the remote instance.
                    </p>
                  </div>
                  <div class="relative inline-block h-6 w-11">
                    <input 
                      type="checkbox" 
                      id="toggle-local-db"
                      class="toggle-checkbox"
                      data-flag={FEATURES.USE_LOCAL_DATABASE}
                      checked={featureFlags[FEATURES.USE_LOCAL_DATABASE]}
                    />
                    <label 
                      for="toggle-local-db" 
                      class="toggle-label block overflow-hidden h-6 rounded-full bg-gray-300 cursor-pointer"
                    ></label>
                  </div>
                </div>
              </div>
              
              <div class="bg-blue-50 p-4 rounded-lg border border-blue-200">
                <div class="flex">
                  <div class="flex-shrink-0">
                    <svg class="h-5 w-5 text-blue-600" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                      <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a.75.75 0 000 1.5h.253a.25.25 0 01.244.304l-.459 2.066A1.75 1.75 0 0010.747 15H11a.75.75 0 000-1.5h-.253a.25.25 0 01-.244-.304l.459-2.066A1.75 1.75 0 009.253 9H9z" clip-rule="evenodd" />
                    </svg>
                  </div>
                  <div class="ml-3">
                    <h3 class="text-sm font-medium text-blue-800">Using Local Database</h3>
                    <div class="mt-2 text-sm text-blue-700">
                      <p>
                        Make sure Docker Desktop is running and you've started the local Supabase instance with:
                        <code class="bg-blue-100 px-1 py-0.5 rounded">npx supabase start</code>
                      </p>
                    </div>
                    <div class="mt-2">
                      <a href="/admin/data-feeds/connection-test" class="text-sm text-blue-600 hover:text-blue-800 font-medium">
                        Test Connection Status â†’
                      </a>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </Card>
        </div>
        
        <!-- Data Sources Section -->
        <div class="mb-6">
          <Card>
            <div class="p-6">
              <h2 class="text-lg font-medium mb-4">Data Sources</h2>
              
              <div class="bg-white p-4 rounded-lg border border-gray-200">
                <p class="text-sm text-gray-500 mb-4">
                  Control whether to use the database or static JSON files for different data types.
                </p>
                
                <div class="space-y-4">
                  {categories.dataSources.flags.map((flag) => (
                    <div class="flex items-center justify-between">
                      <div>
                        <h3 class="text-sm font-medium">{formatFlagName(flag)}</h3>
                      </div>
                      <div class="relative inline-block h-6 w-11">
                        <input 
                          type="checkbox" 
                          id={`toggle-${flag}`}
                          class="toggle-checkbox"
                          data-flag={flag}
                          checked={featureFlags[flag]}
                        />
                        <label 
                          for={`toggle-${flag}`} 
                          class="toggle-label block overflow-hidden h-6 rounded-full bg-gray-300 cursor-pointer"
                        ></label>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </Card>
        </div>
        
        <!-- Financial Data Section -->
        <div class="mb-6">
          <Card>
            <div class="p-6">
              <h2 class="text-lg font-medium mb-4">Financial Data</h2>
              
              <div class="bg-white p-4 rounded-lg border border-gray-200">
                <p class="text-sm text-gray-500 mb-4">
                  Control data sources for financial information from FMP.
                </p>
                
                <div class="space-y-4">
                  {categories.financialData.flags.map((flag) => (
                    <div class="flex items-center justify-between">
                      <div>
                        <h3 class="text-sm font-medium">{formatFlagName(flag)}</h3>
                      </div>
                      <div class="relative inline-block h-6 w-11">
                        <input 
                          type="checkbox" 
                          id={`toggle-${flag}`}
                          class="toggle-checkbox"
                          data-flag={flag}
                          checked={featureFlags[flag]}
                        />
                        <label 
                          for={`toggle-${flag}`} 
                          class="toggle-label block overflow-hidden h-6 rounded-full bg-gray-300 cursor-pointer"
                        ></label>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </Card>
        </div>
        
        <!-- Admin Controls -->
        <div class="mb-6">
          <Card>
            <div class="p-6">
              <h2 class="text-lg font-medium mb-4">Admin Controls</h2>
              
              <div class="bg-white p-4 rounded-lg border border-gray-200">
                <div class="flex justify-between">
                  <button 
                    id="reset-flags-btn"
                    class="px-4 py-2 bg-red-100 text-red-700 rounded-md hover:bg-red-200 transition-colors"
                  >
                    Reset All Flags to Default
                  </button>
                  
                  <a
                    href="/admin/data-feeds/connection-test"
                    class="px-4 py-2 bg-blue-100 text-blue-700 rounded-md hover:bg-blue-200 transition-colors inline-flex items-center"
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" viewBox="0 0 20 20" fill="currentColor">
                      <path fill-rule="evenodd" d="M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0v-2.101a7.002 7.002 0 01-11.601-2.566 1 1 0 01.61-1.276z" clip-rule="evenodd" />
                    </svg>
                    Test Connection
                  </a>
                </div>
              </div>
            </div>
          </Card>
        </div>
      </div>
    </main>
  </div>
</DashboardLayout>

<style>
  .toggle-checkbox {
    position: absolute;
    height: 0;
    width: 0;
    opacity: 0;
  }
  
  .toggle-label {
    transition: background-color 0.2s ease;
  }
  
  .toggle-label:after {
    content: "";
    position: absolute;
    left: 0.2rem;
    top: 0.2rem;
    width: 1.1rem;
    height: 1.1rem;
    background: white;
    border-radius: 50%;
    transition: transform 0.2s ease;
  }
  
  .toggle-checkbox:checked + .toggle-label {
    background: #4f46e5;
  }
  
  .toggle-checkbox:checked + .toggle-label:after {
    transform: translateX(1.1rem);
  }
</style>

<script>
  // Wait for the DOM to load
  document.addEventListener('DOMContentLoaded', () => {
    // Get all checkboxes
    const toggles = document.querySelectorAll('.toggle-checkbox');
    
    // Add event listeners to each toggle
    toggles.forEach(toggle => {
      toggle.addEventListener('change', async (event) => {
        const target = event.target as HTMLInputElement;
        const flag = target.dataset.flag;
        const isChecked = target.checked;
        
        if (!flag) return;
        
        try {
          // Get current URL for redirect
          const currentUrl = window.location.href;
          
          // Call the API endpoint to set the flag
          const response = await fetch('/api/toggle-feature-flag', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              flag: flag,
              value: isChecked,
              redirectUrl: currentUrl
            })
          });
          
          if (response.redirected) {
            // Follow the redirect provided by the server
            window.location.href = response.url;
          } else if (response.ok) {
            // If no redirect, reload the page
            window.location.reload();
          } else {
            console.error('Failed to toggle feature flag');
            // Revert the toggle
            target.checked = !isChecked;
          }
        } catch (error) {
          console.error('Error toggling feature flag:', error);
          // Revert the toggle
          target.checked = !isChecked;
        }
      });
    });
    
    // Add event listener to reset button
    const resetBtn = document.getElementById('reset-flags-btn');
    if (resetBtn) {
      resetBtn.addEventListener('click', async () => {
        try {
          // Get current URL for redirect
          const currentUrl = window.location.href;
          
          // Call the API to reset all flags
          const response = await fetch('/api/reset-feature-flags', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              redirectUrl: currentUrl
            })
          });
          
          if (response.redirected) {
            // Follow the redirect provided by the server
            window.location.href = response.url;
          } else if (response.ok) {
            // If no redirect, reload the page
            window.location.reload();
          } else {
            console.error('Failed to reset feature flags');
          }
        } catch (error) {
          console.error('Error resetting feature flags:', error);
        }
      });
    }
  });
</script> 