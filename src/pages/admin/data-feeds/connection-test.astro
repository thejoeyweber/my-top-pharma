---
/**
 * Database Connection Test Page
 * 
 * Displays connection status to both local and remote Supabase instances.
 * Allows administrators to toggle between connections for development and testing.
 */
import DashboardLayout from '../../../components/templates/DashboardLayout.astro';
import Card from '../../../components/atoms/Card.astro';
import { FEATURES, getFeatureFlag, setFeatureFlag } from '../../../utils/featureFlags';
import { createClient } from '@supabase/supabase-js';

// Get Supabase connection details
const REMOTE_SUPABASE_URL = import.meta.env.PUBLIC_SUPABASE_URL || '';
const REMOTE_SUPABASE_ANON_KEY = import.meta.env.PUBLIC_SUPABASE_ANON_KEY || '';

const LOCAL_SUPABASE_URL = import.meta.env.PUBLIC_LOCAL_SUPABASE_URL || 'http://localhost:54321';
const LOCAL_SUPABASE_ANON_KEY = import.meta.env.PUBLIC_LOCAL_SUPABASE_ANON_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0';

// Current feature flag setting
const useLocalDatabase = getFeatureFlag(FEATURES.USE_LOCAL_DATABASE);

// Breadcrumbs for navigation
const breadcrumbs = [
  { label: 'Home', href: '/' },
  { label: 'Admin', href: '/admin' },
  { label: 'Data Feeds', href: '/admin/data-feeds' },
  { label: 'Connection Test', href: '/admin/data-feeds/connection-test', isActive: true },
];

// Function to test connection
async function testConnection(url: string, key: string) {
  // Validate connection details
  if (!url || !key) {
    return {
      success: false,
      error: 'Missing connection details',
      tables: [],
      metadata: null
    };
  }

  try {
    // Create a client for testing only
    const supabase = createClient(url, key, {
      auth: {
        autoRefreshToken: false,
        persistSession: false
      }
    });
    
    // Test connection by querying version information
    // We use pg_version() which is a built-in Postgres function
    const { data: versionData, error: versionError } = await supabase
      .rpc('pg_version')
      .select('*');
    
    // If getting version via RPC fails, try a simple query to verify connection
    if (versionError) {
      // Test connection with a simple query
      const { data: testData, error: testError } = await supabase
        .from('companies')
        .select('id')
        .limit(1);
        
      if (testError) {
        throw testError;
      }
    }
    
    // Get table information
    const { data: tableData, error: tableError } = await supabase
      .from('pg_tables')
      .select('tablename')
      .eq('schemaname', 'public');
    
    // If we can't access system tables, try to get tables another way
    let tables = [];
    if (tableError || !tableData) {
      // Try to query a list of known tables to see which ones exist
      const knownTables = ['companies', 'products', 'therapeutic_areas', 'websites'];
      const tablePromises = knownTables.map(table => 
        supabase.from(table).select('id', { count: 'exact', head: true })
      );
      
      const results = await Promise.all(tablePromises);
      tables = knownTables.filter((_, index) => !results[index].error);
    } else {
      tables = tableData.map(t => t.tablename);
    }
    
    // Get counts for key tables
    const keyTables = ['companies', 'products', 'therapeutic_areas', 'websites'];
    const tableCounts = await Promise.all(
      keyTables.map(table => 
        supabase.from(table).select('*', { count: 'exact', head: true })
      )
    );
    
    // Format results
    const keyTablesData = keyTables.map((name, index) => ({
      name,
      count: tableCounts[index].count || 0,
      error: tableCounts[index].error?.message
    }));
    
    // Determine Postgres version through alternative means if RPC failed
    let version = "Unknown";
    if (versionData) {
      version = versionData;
    }
    
    return {
      success: true,
      error: null,
      tables,
      keyTablesData,
      version: { version }
    };
  } catch (error) {
    return {
      success: false,
      error: error.message || String(error),
      tables: [],
      keyTablesData: []
    };
  }
}

// Test both connections
const localConnection = await testConnection(LOCAL_SUPABASE_URL, LOCAL_SUPABASE_ANON_KEY);
const remoteConnection = await testConnection(REMOTE_SUPABASE_URL, REMOTE_SUPABASE_ANON_KEY);

// Determine which connection is active
const activeConnection = useLocalDatabase ? 'local' : 'remote';
---

<DashboardLayout title="Connection Test | Admin | Top Pharma">
  <div class="min-h-screen bg-gray-100">
    <header class="bg-white shadow">
      <div class="mx-auto max-w-7xl px-4 py-6 sm:px-6 lg:px-8">
        <div class="flex items-center">
          <a href="/admin/audit" class="mr-2 text-gray-400 hover:text-gray-600">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-5 h-5">
              <path fill-rule="evenodd" d="M11.03 3.97a.75.75 0 0 1 0 1.06l-6.22 6.22H21a.75.75 0 0 1 0 1.5H4.81l6.22 6.22a.75.75 0 1 1-1.06 1.06l-7.5-7.5a.75.75 0 0 1 0-1.06l7.5-7.5a.75.75 0 0 1 1.06 0Z" clip-rule="evenodd" />
            </svg>
          </a>
          <h1 class="text-2xl font-bold text-gray-900">Database Connection Test</h1>
        </div>
        <p class="mt-2 text-sm text-gray-500">
          Test and switch between local and remote Supabase connections
        </p>
      </div>
    </header>
    
    <main class="py-6">
      <div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
        <!-- Connection Toggle -->
        <div class="mb-6">
          <Card>
            <div class="p-6">
              <h2 class="text-lg font-medium mb-4">Active Connection</h2>
              
              <div class="bg-white p-4 rounded-lg border border-gray-200 mb-4">
                <div class="flex items-center justify-between">
                  <div>
                    <h3 class="text-base font-medium">Use Local Supabase Instance</h3>
                    <p class="text-sm text-gray-500 mt-1">
                      When enabled, connects to local Supabase instance (http://localhost:54321) instead of the remote instance.
                    </p>
                  </div>
                  <div class="relative inline-block h-6 w-11">
                    <input 
                      type="checkbox" 
                      id="toggle-connection"
                      class="toggle-checkbox"
                      data-flag={FEATURES.USE_LOCAL_DATABASE}
                      checked={useLocalDatabase}
                    />
                    <label 
                      for="toggle-connection" 
                      class="toggle-label block overflow-hidden h-6 rounded-full bg-gray-300 cursor-pointer"
                    ></label>
                  </div>
                </div>
              </div>
              
              <div class="bg-blue-50 p-4 rounded-lg border border-blue-200">
                <div class="flex">
                  <div class="flex-shrink-0">
                    <svg class="h-5 w-5 text-blue-600" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                      <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a.75.75 0 000 1.5h.253a.25.25 0 01.244.304l-.459 2.066A1.75 1.75 0 0010.747 15H11a.75.75 0 000-1.5h-.253a.25.25 0 01-.244-.304l.459-2.066A1.75 1.75 0 009.253 9H9z" clip-rule="evenodd" />
                    </svg>
                  </div>
                  <div class="ml-3">
                    <h3 class="text-sm font-medium text-blue-800">Connection Information</h3>
                    <div class="mt-2 text-sm text-blue-700">
                      <p>
                        Currently using <strong>{activeConnection === 'local' ? 'local' : 'remote'}</strong> Supabase instance.
                      </p>
                      <p class="mt-1">
                        {activeConnection === 'local' 
                          ? 'Make sure Docker Desktop is running and you\'ve started Supabase with `npx supabase start`.' 
                          : 'You\'re connected to the production/remote Supabase instance.'}
                      </p>
                    </div>
                    <div class="mt-2">
                      <a href="/admin/audit/feature-flags" class="text-sm text-blue-600 hover:text-blue-800 font-medium">
                        Manage All Feature Flags â†’
                      </a>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </Card>
        </div>
        
        <!-- Connection Status -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
          <!-- Local Connection -->
          <Card>
            <div class="p-6">
              <div class="flex items-center justify-between mb-4">
                <h2 class="text-lg font-medium">Local Supabase</h2>
                <span class={`px-2 py-1 text-xs font-medium rounded-full ${localConnection.success ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>
                  {localConnection.success ? 'Connected' : 'Failed'}
                </span>
              </div>
              
              {localConnection.success ? (
                <div>
                  <div class="bg-gray-50 p-4 rounded-lg mb-4">
                    <h3 class="text-sm font-medium mb-2">Connection Details</h3>
                    <div class="text-xs text-gray-600">
                      <p>URL: <span class="font-mono">{LOCAL_SUPABASE_URL}</span></p>
                      <p class="mt-1">Version: <span class="font-mono">{localConnection.version?.version || 'Unknown'}</span></p>
                    </div>
                  </div>
                  
                  <div class="mb-4">
                    <h3 class="text-sm font-medium mb-2">Key Tables</h3>
                    <div class="bg-white rounded-lg border border-gray-200 overflow-hidden">
                      <table class="min-w-full divide-y divide-gray-200">
                        <thead class="bg-gray-50">
                          <tr>
                            <th scope="col" class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Table</th>
                            <th scope="col" class="px-4 py-2 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Records</th>
                          </tr>
                        </thead>
                        <tbody class="bg-white divide-y divide-gray-200">
                          {localConnection.keyTablesData?.map((table) => (
                            <tr>
                              <td class="px-4 py-2 text-xs text-gray-600">{table.name}</td>
                              <td class="px-4 py-2 text-xs text-right">
                                {table.error ? (
                                  <span class="text-red-500">{table.error}</span>
                                ) : (
                                  <span class="font-mono">{table.count}</span>
                                )}
                              </td>
                            </tr>
                          ))}
                        </tbody>
                      </table>
                    </div>
                  </div>
                  
                  <div>
                    <p class="text-xs text-gray-500 mt-2">
                      Found {localConnection.tables?.length || 0} tables in the database.
                    </p>
                  </div>
                </div>
              ) : (
                <div class="bg-red-50 p-4 rounded-lg border border-red-200">
                  <div class="flex">
                    <div class="flex-shrink-0">
                      <svg class="h-5 w-5 text-red-600" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
                      </svg>
                    </div>
                    <div class="ml-3">
                      <h3 class="text-sm font-medium text-red-800">Connection Failed</h3>
                      <div class="mt-2 text-sm text-red-700">
                        <p>{localConnection.error}</p>
                      </div>
                      <div class="mt-2">
                        <div class="text-sm">
                          <p>Common fixes:</p>
                          <ul class="list-disc pl-5 mt-1 space-y-1">
                            <li>Make sure Docker Desktop is running</li>
                            <li>Start local Supabase with: <code class="bg-red-100 px-1 rounded">npx supabase start</code></li>
                            <li>Check that port 54321 is not blocked by a firewall</li>
                          </ul>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              )}
            </div>
          </Card>
          
          <!-- Remote Connection -->
          <Card>
            <div class="p-6">
              <div class="flex items-center justify-between mb-4">
                <h2 class="text-lg font-medium">Remote Supabase</h2>
                <span class={`px-2 py-1 text-xs font-medium rounded-full ${remoteConnection.success ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>
                  {remoteConnection.success ? 'Connected' : 'Failed'}
                </span>
              </div>
              
              {remoteConnection.success ? (
                <div>
                  <div class="bg-gray-50 p-4 rounded-lg mb-4">
                    <h3 class="text-sm font-medium mb-2">Connection Details</h3>
                    <div class="text-xs text-gray-600">
                      <p>URL: <span class="font-mono">{REMOTE_SUPABASE_URL}</span></p>
                      <p class="mt-1">Version: <span class="font-mono">{remoteConnection.version?.version || 'Unknown'}</span></p>
                    </div>
                  </div>
                  
                  <div class="mb-4">
                    <h3 class="text-sm font-medium mb-2">Key Tables</h3>
                    <div class="bg-white rounded-lg border border-gray-200 overflow-hidden">
                      <table class="min-w-full divide-y divide-gray-200">
                        <thead class="bg-gray-50">
                          <tr>
                            <th scope="col" class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Table</th>
                            <th scope="col" class="px-4 py-2 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Records</th>
                          </tr>
                        </thead>
                        <tbody class="bg-white divide-y divide-gray-200">
                          {remoteConnection.keyTablesData?.map((table) => (
                            <tr>
                              <td class="px-4 py-2 text-xs text-gray-600">{table.name}</td>
                              <td class="px-4 py-2 text-xs text-right">
                                {table.error ? (
                                  <span class="text-red-500">{table.error}</span>
                                ) : (
                                  <span class="font-mono">{table.count}</span>
                                )}
                              </td>
                            </tr>
                          ))}
                        </tbody>
                      </table>
                    </div>
                  </div>
                  
                  <div>
                    <p class="text-xs text-gray-500 mt-2">
                      Found {remoteConnection.tables?.length || 0} tables in the database.
                    </p>
                  </div>
                </div>
              ) : (
                <div class="bg-red-50 p-4 rounded-lg border border-red-200">
                  <div class="flex">
                    <div class="flex-shrink-0">
                      <svg class="h-5 w-5 text-red-600" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
                      </svg>
                    </div>
                    <div class="ml-3">
                      <h3 class="text-sm font-medium text-red-800">Connection Failed</h3>
                      <div class="mt-2 text-sm text-red-700">
                        <p>{remoteConnection.error}</p>
                      </div>
                      <div class="mt-2">
                        <div class="text-sm">
                          <p>Common fixes:</p>
                          <ul class="list-disc pl-5 mt-1 space-y-1">
                            <li>Check environment variables in .env file</li>
                            <li>Verify your internet connection</li>
                            <li>Ensure your IP is allowed in Supabase dashboard</li>
                          </ul>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              )}
            </div>
          </Card>
        </div>
      </div>
    </main>
  </div>
</DashboardLayout>

<style>
  .toggle-checkbox {
    position: absolute;
    height: 0;
    width: 0;
    opacity: 0;
  }
  
  .toggle-label {
    transition: background-color 0.2s ease;
  }
  
  .toggle-label:after {
    content: "";
    position: absolute;
    left: 0.2rem;
    top: 0.2rem;
    width: 1.1rem;
    height: 1.1rem;
    background: white;
    border-radius: 50%;
    transition: transform 0.2s ease;
  }
  
  .toggle-checkbox:checked + .toggle-label {
    background: #4f46e5;
  }
  
  .toggle-checkbox:checked + .toggle-label:after {
    transform: translateX(1.1rem);
  }
</style>

<script>
  // Wait for the DOM to load
  document.addEventListener('DOMContentLoaded', () => {
    // Get toggle element
    const toggle = document.getElementById('toggle-connection');
    
    if (toggle) {
      toggle.addEventListener('change', async (event) => {
        const target = event.target as HTMLInputElement;
        const flag = target.dataset.flag;
        const isChecked = target.checked;
        
        if (!flag) return;
        
        try {
          // Get current URL for redirect
          const currentUrl = window.location.href;
          
          // Call the API endpoint to toggle the feature flag
          const response = await fetch('/api/toggle-feature-flag', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              flag: flag,
              value: isChecked,
              redirectUrl: currentUrl
            })
          });
          
          if (response.redirected) {
            // Follow the redirect provided by the server
            window.location.href = response.url;
          } else if (response.ok) {
            // If no redirect, reload the page
            window.location.reload();
          } else {
            console.error('Failed to toggle connection setting');
            // Revert the toggle
            target.checked = !isChecked;
          }
        } catch (error) {
          console.error('Error toggling connection setting:', error);
          // Revert the toggle
          target.checked = !isChecked;
        }
      });
    }
  });
</script> 