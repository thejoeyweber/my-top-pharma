---
/**
 * Database Connection Test Page
 * 
 * Allows admins to test the Supabase database connection
 * and view diagnostic information.
 */
import DashboardLayout from '../../components/templates/DashboardLayout.astro';
import Card from '../../components/atoms/Card.astro';

// Breadcrumbs for navigation
const breadcrumbs = [
  { label: 'Home', href: '/' },
  { label: 'Admin', href: '/admin' },
  { label: 'Database Test', href: '/admin/test-db', isActive: true },
];
---

<DashboardLayout title="Database Connection Test | Admin | Top Pharma">
  <div class="min-h-screen bg-gray-100">
    <header class="bg-white shadow">
      <div class="mx-auto max-w-7xl px-4 py-6 sm:px-6 lg:px-8">
        <div class="flex items-center">
          <a href="/admin" class="mr-2 text-gray-400 hover:text-gray-600">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-5 h-5">
              <path fill-rule="evenodd" d="M11.03 3.97a.75.75 0 0 1 0 1.06l-6.22 6.22H21a.75.75 0 0 1 0 1.5H4.81l6.22 6.22a.75.75 0 1 1-1.06 1.06l-7.5-7.5a.75.75 0 0 1 0-1.06l7.5-7.5a.75.75 0 0 1 1.06 0Z" clip-rule="evenodd" />
            </svg>
          </a>
          <h1 class="text-3xl font-bold tracking-tight text-gray-900">Database Connection Test</h1>
        </div>
      </div>
    </header>
    <main class="mx-auto max-w-7xl py-6 px-4 sm:px-6 lg:px-8">
      
      <!-- Test Connection Section -->
      <div class="mb-8">
        <Card>
          <div class="p-6">
            <div class="flex items-center justify-between">
              <div>
                <h3 class="text-lg font-medium">Supabase Connection Test</h3>
                <p class="text-sm text-gray-500 mt-1">
                  Test the connection to your Supabase database and check for schema issues
                </p>
              </div>
              <div>
                <button 
                  id="test-connection" 
                  class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                >
                  Test Connection
                </button>
              </div>
            </div>
            
            <!-- Test Results (hidden initially) -->
            <div id="test-results" class="mt-4 hidden">
              <div class="rounded-md bg-gray-50 p-4">
                <div class="flex">
                  <div class="flex-shrink-0">
                    <svg id="test-loading-icon" class="h-5 w-5 text-blue-400 animate-spin" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                      <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                      <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    <svg id="test-success-icon" class="h-5 w-5 text-green-400 hidden" viewBox="0 0 20 20" fill="currentColor">
                      <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
                    </svg>
                    <svg id="test-error-icon" class="h-5 w-5 text-red-400 hidden" viewBox="0 0 20 20" fill="currentColor">
                      <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>
                    </svg>
                  </div>
                  <div class="ml-3 flex-1">
                    <h3 id="test-title" class="text-sm font-medium text-gray-800">Testing connection...</h3>
                    <div id="test-message" class="mt-2 text-sm text-gray-600"></div>
                    
                    <!-- Detailed Results -->
                    <div id="detailed-results" class="mt-4 hidden">
                      <h4 class="text-sm font-medium text-gray-800 mb-2">Detailed Results:</h4>
                      
                      <!-- Credentials Section -->
                      <div class="mb-3">
                        <h5 class="text-xs font-medium text-gray-700">Credentials</h5>
                        <div id="credentials-results" class="ml-2 mt-1 text-xs"></div>
                      </div>
                      
                      <!-- Companies Table Section -->
                      <div class="mb-3">
                        <h5 class="text-xs font-medium text-gray-700">Companies Table (Regular Client)</h5>
                        <div id="companies-results" class="ml-2 mt-1 text-xs"></div>
                      </div>
                      
                      <!-- Admin Client Section -->
                      <div class="mb-3">
                        <h5 class="text-xs font-medium text-gray-700">Admin Client (Service Role)</h5>
                        <div id="admin-results" class="ml-2 mt-1 text-xs"></div>
                      </div>
                      
                      <!-- Schema Section -->
                      <div>
                        <h5 class="text-xs font-medium text-gray-700">Database Schema</h5>
                        <div id="schema-results" class="ml-2 mt-1 text-xs"></div>
                      </div>
                      
                      <!-- Raw Response -->
                      <div class="mt-4">
                        <details>
                          <summary class="text-xs font-medium text-gray-700 cursor-pointer">Raw Response</summary>
                          <pre id="raw-results" class="mt-2 text-xs overflow-auto bg-gray-100 p-2 rounded-md max-h-60"></pre>
                        </details>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </Card>
      </div>
      
      <!-- Environment Variables Section -->
      <div class="mb-8">
        <h2 class="text-lg font-semibold mb-4">Environment Variables Check</h2>
        <Card>
          <div class="p-6">
            <p class="text-sm text-gray-500 mb-4">
              This section checks if your essential environment variables are configured correctly.
              No actual values are displayed for security reasons.
            </p>
            
            <table class="min-w-full divide-y divide-gray-200">
              <thead>
                <tr>
                  <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Variable</th>
                  <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                  <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Description</th>
                </tr>
              </thead>
              <tbody class="bg-white divide-y divide-gray-200" id="env-var-table">
                <tr>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">Loading...</td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">Please wait</td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">Checking environment variables</td>
                </tr>
              </tbody>
            </table>
          </div>
        </Card>
      </div>
      
      <!-- Troubleshooting Guide -->
      <div class="mb-8">
        <h2 class="text-lg font-semibold mb-4">Troubleshooting Guide</h2>
        <Card>
          <div class="p-6">
            <div class="space-y-4">
              <div>
                <h3 class="font-medium text-gray-900">Missing Credentials</h3>
                <p class="mt-1 text-sm text-gray-500">
                  If credentials are missing, make sure your .env.local file contains:
                </p>
                <ul class="mt-2 list-disc pl-5 text-sm text-gray-500">
                  <li>PUBLIC_SUPABASE_URL - Your Supabase project URL</li>
                  <li>PUBLIC_SUPABASE_ANON_KEY - Your Supabase project's anon/public key</li>
                  <li>SUPABASE_SERVICE_ROLE_KEY - Your Supabase project's service role key (for admin operations)</li>
                </ul>
              </div>
              
              <div>
                <h3 class="font-medium text-gray-900">Table Not Found</h3>
                <p class="mt-1 text-sm text-gray-500">
                  If the companies table is not found, you need to create it in your Supabase project:
                </p>
                <pre class="mt-2 text-xs bg-gray-100 p-3 rounded-md">
CREATE TABLE IF NOT EXISTS companies (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name TEXT NOT NULL,
  slug TEXT UNIQUE NOT NULL,
  description TEXT,
  website TEXT,
  logo_url TEXT,
  headquarters TEXT,
  employee_count INTEGER,
  revenue_usd NUMERIC,
  public_company BOOLEAN DEFAULT false,
  stock_symbol TEXT,
  stock_exchange TEXT,
  founded_year INTEGER,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);
                </pre>
              </div>
              
              <div>
                <h3 class="font-medium text-gray-900">Row Level Security (RLS)</h3>
                <p class="mt-1 text-sm text-gray-500">
                  We're using two different approaches to handle permissions:
                </p>
                <ul class="mt-2 list-disc pl-5 text-sm text-gray-500">
                  <li><strong>Regular access:</strong> Use RLS policies to control what operations are allowed with the anonymous key</li>
                  <li><strong>Admin operations:</strong> Use the service role key to bypass RLS for administrative tasks (like importing data)</li>
                </ul>
                <p class="mt-2 text-sm text-gray-500">
                  If admin operations (like data imports) are failing, check that your SUPABASE_SERVICE_ROLE_KEY is correctly configured in .env.local
                </p>
              </div>
            </div>
          </div>
        </Card>
      </div>
      
    </main>
  </div>
</DashboardLayout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const testButton = document.getElementById('test-connection');
    const testResults = document.getElementById('test-results');
    const testTitle = document.getElementById('test-title');
    const testMessage = document.getElementById('test-message');
    const detailedResults = document.getElementById('detailed-results');
    const credentialsResults = document.getElementById('credentials-results');
    const companiesResults = document.getElementById('companies-results');
    const adminResults = document.getElementById('admin-results');
    const schemaResults = document.getElementById('schema-results');
    const rawResults = document.getElementById('raw-results');
    const envVarTable = document.getElementById('env-var-table');
    
    const loadingIcon = document.getElementById('test-loading-icon');
    const successIcon = document.getElementById('test-success-icon');
    const errorIcon = document.getElementById('test-error-icon');
    
    // Function to check environment variables
    async function checkEnvironmentVariables() {
      if (!envVarTable) return;
      
      const variables = [
        { name: 'PUBLIC_SUPABASE_URL', description: 'Supabase project URL' },
        { name: 'PUBLIC_SUPABASE_ANON_KEY', description: 'Supabase anonymous key' },
        { name: 'SUPABASE_SERVICE_ROLE_KEY', description: 'Supabase service role key (for admin operations)' },
        { name: 'PUBLIC_FMP_API_KEY', description: 'Financial Modeling Prep API key' }
      ];
      
      // Clear the table
      envVarTable.innerHTML = '';
      
      // Add a row for each variable
      for (const variable of variables) {
        const value = import.meta.env[variable.name];
        const isPresent = !!value;
        
        const row = document.createElement('tr');
        row.innerHTML = `
          <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">${variable.name}</td>
          <td class="px-6 py-4 whitespace-nowrap text-sm">
            <span class="inline-flex rounded-full px-2 text-xs font-semibold leading-5 ${isPresent ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}">
              ${isPresent ? 'Configured' : 'Missing'}
            </span>
          </td>
          <td class="px-6 py-4 text-sm text-gray-500">${variable.description}</td>
        `;
        
        envVarTable.appendChild(row);
      }
    }
    
    // Check environment variables on load
    checkEnvironmentVariables();
    
    // Handle test connection button click
    if (testButton) {
      testButton.addEventListener('click', async () => {
        if (!testResults || !testTitle || !testMessage) return;
        
        // Show loading state
        testResults.classList.remove('hidden');
        loadingIcon.classList.remove('hidden');
        successIcon.classList.add('hidden');
        errorIcon.classList.add('hidden');
        detailedResults.classList.add('hidden');
        
        testTitle.textContent = 'Testing connection...';
        testMessage.textContent = 'Connecting to Supabase...';
        
        try {
          // Call the test API endpoint
          const response = await fetch('/api/test-db-connection');
          const result = await response.json();
          
          // Format raw results
          rawResults.textContent = JSON.stringify(result, null, 2);
          
          // Update UI based on result
          if (result.success) {
            loadingIcon.classList.add('hidden');
            successIcon.classList.remove('hidden');
            errorIcon.classList.add('hidden');
            
            testTitle.textContent = 'Connection successful';
            testMessage.textContent = result.message;
          } else {
            loadingIcon.classList.add('hidden');
            successIcon.classList.add('hidden');
            errorIcon.classList.remove('hidden');
            
            testTitle.textContent = 'Connection failed';
            testMessage.textContent = result.error || result.message || 'Unknown error';
            
            if (result.error && result.stack) {
              const errorDetails = document.createElement('div');
              errorDetails.className = 'mt-2 text-xs text-red-500';
              errorDetails.textContent = result.stack.split('\n')[0];
              testMessage.appendChild(errorDetails);
            }
          }
          
          // Display detailed results
          detailedResults.classList.remove('hidden');
          
          // Format credentials section
          const credentials = result.credentials;
          if (credentials) {
            credentialsResults.innerHTML = `
              <div class="${credentials.url.provided ? 'text-green-700' : 'text-red-700'}">
                URL: ${credentials.url.provided ? 'Provided' : 'Missing'}
              </div>
              <div class="${credentials.key.provided ? 'text-green-700' : 'text-red-700'}">
                Key: ${credentials.key.provided ? 'Provided' : 'Missing'} 
                ${credentials.key.provided ? `(${credentials.key.length} characters)` : ''}
              </div>
              <div class="${credentials.serviceRole?.provided ? 'text-green-700' : 'text-red-700'}">
                Service Role Key: ${credentials.serviceRole?.provided ? 'Provided' : 'Missing'} 
                ${credentials.serviceRole?.provided ? `(${credentials.serviceRole.length} characters)` : ''}
              </div>
            `;
          }
          
          // Format companies section
          const companies = result.companies;
          if (companies) {
            companiesResults.innerHTML = companies.success
              ? `<div class="text-green-700">Table exists with ${companies.count} records</div>`
              : `<div class="text-red-700">Error: ${companies.error?.message || 'Unknown error'}</div>`;
            
            if (companies.error?.code) {
              companiesResults.innerHTML += `<div class="text-gray-600">Code: ${companies.error.code}</div>`;
            }
            
            if (companies.error?.hint) {
              companiesResults.innerHTML += `<div class="text-blue-600">Hint: ${companies.error.hint}</div>`;
            }
          }
          
          // Format admin client section
          const admin = result.admin;
          if (admin) {
            if (admin.tested) {
              adminResults.innerHTML = admin.success
                ? `<div class="text-green-700">Admin client working (${admin.count} records)</div>`
                : `<div class="text-red-700">Error: ${admin.error?.message || 'Unknown error'}</div>`;
              
              if (admin.error?.code) {
                adminResults.innerHTML += `<div class="text-gray-600">Code: ${admin.error.code}</div>`;
              }
              
              if (admin.error?.hint) {
                adminResults.innerHTML += `<div class="text-blue-600">Hint: ${admin.error.hint}</div>`;
              }
            } else {
              adminResults.innerHTML = '<div class="text-yellow-600">Admin client not tested (service role key missing)</div>';
            }
          } else {
            adminResults.innerHTML = '<div class="text-gray-600">Admin client test not available</div>';
          }
          
          // Format schema section
          const schema = result.schema;
          if (schema) {
            schemaResults.innerHTML = schema.success
              ? '<div class="text-green-700">Schema access successful</div>'
              : `<div class="text-red-700">Error: ${schema.error?.message || 'Unknown error'}</div>`;
            
            if (schema.tables && schema.tables.length > 0) {
              schemaResults.innerHTML += '<div class="mt-1">Public tables:</div>';
              schemaResults.innerHTML += '<ul class="list-disc pl-5">';
              schema.tables.forEach((table) => {
                schemaResults.innerHTML += `<li>${table.tablename}</li>`;
              });
              schemaResults.innerHTML += '</ul>';
            } else if (schema.success) {
              schemaResults.innerHTML += '<div class="text-yellow-600">No public tables found</div>';
            }
            
            if (schema.error?.message?.includes('does not exist')) {
              schemaResults.innerHTML += '<div class="text-blue-600 mt-1">Note: pg_tables access is restricted with anonymous key (expected)</div>';
            }
          }
          
        } catch (error) {
          // Handle any exceptions during the test
          console.error('Test connection error:', error);
          
          loadingIcon.classList.add('hidden');
          successIcon.classList.add('hidden');
          errorIcon.classList.remove('hidden');
          
          testTitle.textContent = 'Test failed';
          testMessage.textContent = error instanceof Error 
            ? error.message 
            : 'An unknown error occurred while testing the connection';
        }
      });
    }
  });
</script> 