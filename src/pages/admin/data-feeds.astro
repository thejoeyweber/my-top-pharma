---
/**
 * Data Feeds Page
 * 
 * Manage external data feeds and synchronization settings.
 */
import DashboardLayout from '../../components/templates/DashboardLayout.astro';
import Card from '../../components/atoms/Card.astro';
import { dataFeeds } from '../../utils/dataUtils';
import { supabase } from '../../utils/supabase';

// Breadcrumbs for navigation
const breadcrumbs = [
  { label: 'Home', href: '/' },
  { label: 'Admin', href: '/admin' },
  { label: 'Data Feeds', href: '/admin/data-feeds', isActive: true },
];

// Get FMP import stats
let importStats = {
  lastImport: null as string | null,
  companyCount: 0,
  status: 'unknown'
};

try {
  // Get company count
  const { count, error } = await supabase
    .from('companies')
    .select('*', { count: 'exact', head: true });

  if (!error) {
    importStats.companyCount = count || 0;
  }

  // Get last updated company to determine last import time
  const { data, error: lastUpdateError } = await supabase
    .from('companies')
    .select('updated_at')
    .order('updated_at', { ascending: false })
    .limit(1);

  if (!lastUpdateError && data && data.length > 0) {
    importStats.lastImport = data[0].updated_at;
    importStats.status = 'healthy';
  }
} catch (error) {
  console.error('Error fetching company stats:', error);
  importStats.status = 'error';
}

// Format date
const formatDate = (dateString: string): string => {
  if (!dateString) return '--';
  const date = new Date(dateString);
  return date.toLocaleString('en-US', {
    month: 'short',
    day: 'numeric',
    year: 'numeric',
    hour: 'numeric',
    minute: '2-digit'
  });
};

// Get status badge color
const getStatusColor = (status: string): string => {
  switch (status) {
    case 'healthy':
      return 'bg-green-100 text-green-800';
    case 'warning':
      return 'bg-yellow-100 text-yellow-800';
    case 'error':
      return 'bg-red-100 text-red-800';
    case 'disabled':
      return 'bg-gray-100 text-gray-800';
    default:
      return 'bg-gray-100 text-gray-800';
  }
};
---

<DashboardLayout title="Data Feeds | Admin | Top Pharma">
  <div class="min-h-screen bg-gray-100">
    <header class="bg-white shadow">
      <div class="mx-auto max-w-7xl px-4 py-6 sm:px-6 lg:px-8">
        <div class="flex items-center">
          <a href="/admin" class="mr-2 text-gray-400 hover:text-gray-600">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-5 h-5">
              <path fill-rule="evenodd" d="M11.03 3.97a.75.75 0 0 1 0 1.06l-6.22 6.22H21a.75.75 0 0 1 0 1.5H4.81l6.22 6.22a.75.75 0 1 1-1.06 1.06l-7.5-7.5a.75.75 0 0 1 0-1.06l7.5-7.5a.75.75 0 0 1 1.06 0Z" clip-rule="evenodd" />
            </svg>
          </a>
          <h1 class="text-3xl font-bold tracking-tight text-gray-900">Data Feeds</h1>
        </div>
      </div>
    </header>
    <main class="mx-auto max-w-7xl py-6 px-4 sm:px-6 lg:px-8">
      
      <!-- FMP Company Data Import Section -->
      <div class="mb-8">
        <h2 class="text-lg font-semibold mb-4">Financial Modeling Prep Data</h2>
        <Card>
          <div class="p-6">
            <div class="flex items-center justify-between">
              <div>
                <h3 class="text-lg font-medium">Company Data Import</h3>
                <p class="text-sm text-gray-500 mt-1">
                  Import company data from Financial Modeling Prep API
                </p>
              </div>
              <div>
                <span class={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColor(importStats.status)}`}>
                  {importStats.status === 'healthy' ? 'Active' : 
                   importStats.status === 'error' ? 'Error' : 'Unknown'}
                </span>
              </div>
            </div>
            
            <div class="mt-4 border-t border-gray-200 pt-4">
              <dl>
                <div class="grid grid-cols-2 gap-x-4 gap-y-4 sm:grid-cols-3">
                  <div>
                    <dt class="text-sm font-medium text-gray-500">Last Import</dt>
                    <dd class="mt-1 text-sm text-gray-900">{importStats.lastImport ? formatDate(importStats.lastImport) : '--'}</dd>
                  </div>
                  <div>
                    <dt class="text-sm font-medium text-gray-500">Companies</dt>
                    <dd class="mt-1 text-sm text-gray-900">{importStats.companyCount.toLocaleString()}</dd>
                  </div>
                  <div>
                    <dt class="text-sm font-medium text-gray-500">Status</dt>
                    <dd class="mt-1 text-sm text-gray-900">
                      {importStats.companyCount > 0 
                        ? 'Data available' 
                        : 'No data imported'}
                    </dd>
                  </div>
                </div>
              </dl>
            </div>
            
            <div class="mt-5 flex items-center justify-end">
              <a 
                href="/admin/audit/companies" 
                class="inline-flex items-center px-3 py-2 mr-3 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
              >
                View Audit
              </a>
              <button 
                id="import-fmp-companies" 
                class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
              >
                Import Now
              </button>
            </div>
            
            <!-- Import Status Display (hidden initially) -->
            <div id="import-status" class="mt-4 p-4 rounded-md bg-gray-50 hidden">
              <div class="flex">
                <div class="flex-shrink-0">
                  <svg id="import-status-icon-loading" class="h-5 w-5 text-blue-400 hidden" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                  <svg id="import-status-icon-success" class="h-5 w-5 text-green-400 hidden" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
                  </svg>
                  <svg id="import-status-icon-error" class="h-5 w-5 text-red-400 hidden" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>
                  </svg>
                </div>
                <div class="ml-3">
                  <h3 id="import-status-title" class="text-sm font-medium text-gray-800"></h3>
                  <div id="import-status-message" class="mt-2 text-sm text-gray-600"></div>
                </div>
              </div>
            </div>
          </div>
        </Card>
      </div>
      
      <!-- Overview -->
      <div class="mb-6">
        <h2 class="text-lg font-semibold text-gray-900 mb-3">External Data Sources</h2>
        <Card>
          <div class="px-4 py-5 sm:p-6">
            <p class="text-sm text-gray-500 mb-4">
              Configure and manage external data sources that are used to enrich our database. These sources are polled on a schedule to keep our information up-to-date.
            </p>
            
            <div class="mb-4 flex justify-end">
              <button type="button" class="inline-flex items-center rounded-md border border-transparent bg-primary-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2">
                Add New Data Feed
              </button>
            </div>
            
            <div class="overflow-x-auto">
              <table class="min-w-full divide-y divide-gray-200">
                <thead>
                  <tr>
                    <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
                    <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">URL</th>
                    <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                    <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Frequency</th>
                    <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Last Fetch</th>
                    <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Next Fetch</th>
                    <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                  </tr>
                </thead>
                <tbody class="bg-white divide-y divide-gray-200">
                  {dataFeeds.map((feed) => (
                    <tr>
                      <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">{feed.name}</td>
                      <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        {feed.url ? (
                          <a href={feed.url} target="_blank" class="text-primary-600 hover:text-primary-900">
                            {feed.url.length > 30 ? feed.url.substring(0, 30) + '...' : feed.url}
                          </a>
                        ) : (
                          <span>{feed.provider || 'N/A'}</span>
                        )}
                      </td>
                      <td class="px-6 py-4 whitespace-nowrap text-sm">
                        <span class={`inline-flex rounded-full px-2 text-xs font-semibold leading-5 ${getStatusColor(feed.status)}`}>
                          {feed.status}
                        </span>
                        {feed.statusDetails && (
                          <span class="block text-xs text-gray-500 mt-1">{feed.statusDetails}</span>
                        )}
                      </td>
                      <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        {feed.frequency}
                      </td>
                      <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        {formatDate(feed.lastFetch)}
                      </td>
                      <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        {formatDate(feed.nextFetch)}
                      </td>
                      <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        <button type="button" class="text-primary-600 hover:text-primary-900 mr-3">Edit</button>
                        <button type="button" class="text-primary-600 hover:text-primary-900 mr-3">Fetch Now</button>
                        <button type="button" class="text-red-600 hover:text-red-900">
                          {feed.active ? 'Disable' : 'Enable'}
                        </button>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        </Card>
      </div>
      
      <!-- Data Feed Details -->
      <div class="mb-6">
        <h2 class="text-lg font-semibold text-gray-900 mb-3">Add/Edit Data Feed</h2>
        <Card>
          <div class="px-4 py-5 sm:p-6">
            <div class="grid grid-cols-1 gap-6 sm:grid-cols-2">
              <div class="sm:col-span-2">
                <label for="feed-name" class="block text-sm font-medium text-gray-700">Feed Name</label>
                <div class="mt-1">
                  <input type="text" name="feed-name" id="feed-name" placeholder="e.g., FDA Drug Approvals" class="block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500 sm:text-sm">
                </div>
              </div>
              
              <div class="sm:col-span-2">
                <label for="feed-url" class="block text-sm font-medium text-gray-700">API URL</label>
                <div class="mt-1">
                  <input type="url" name="feed-url" id="feed-url" placeholder="https://api.example.com/endpoint" class="block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500 sm:text-sm">
                </div>
              </div>
              
              <div>
                <label for="feed-frequency" class="block text-sm font-medium text-gray-700">Frequency</label>
                <div class="mt-1">
                  <select id="feed-frequency" name="feed-frequency" class="block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500 sm:text-sm">
                    <option value="hourly">Hourly</option>
                    <option value="daily">Daily</option>
                    <option value="weekly">Weekly</option>
                    <option value="monthly">Monthly</option>
                  </select>
                </div>
              </div>
              
              <div>
                <label for="feed-status" class="block text-sm font-medium text-gray-700">Status</label>
                <div class="mt-1">
                  <select id="feed-status" name="feed-status" class="block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500 sm:text-sm">
                    <option value="active">Active</option>
                    <option value="disabled">Disabled</option>
                  </select>
                </div>
              </div>
              
              <div class="sm:col-span-2">
                <label for="feed-auth" class="block text-sm font-medium text-gray-700">Authentication (Optional)</label>
                <div class="mt-1">
                  <textarea id="feed-auth" name="feed-auth" rows="3" placeholder="API Key or Authentication Details" class="block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500 sm:text-sm"></textarea>
                </div>
              </div>
              
              <div class="sm:col-span-2">
                <label for="feed-mapping" class="block text-sm font-medium text-gray-700">Data Mapping</label>
                <div class="mt-1">
                  <textarea id="feed-mapping" name="feed-mapping" rows="5" placeholder="JSON mapping configuration" class="block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500 sm:text-sm font-mono"></textarea>
                </div>
                <p class="mt-2 text-sm text-gray-500">Define how fields from the external API map to our database schema.</p>
              </div>
            </div>
            
            <div class="mt-6 flex justify-end">
              <button type="button" class="inline-flex items-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2">
                Cancel
              </button>
              <button type="button" class="ml-3 inline-flex items-center rounded-md border border-transparent bg-primary-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2">
                Save Data Feed
              </button>
              <button type="button" class="ml-3 inline-flex items-center rounded-md border border-transparent bg-gray-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2">
                Test Connection
              </button>
            </div>
          </div>
        </Card>
      </div>
      
      <!-- Fetch History -->
      <div class="mb-6">
        <h2 class="text-lg font-semibold text-gray-900 mb-3">Fetch History</h2>
        <Card>
          <div class="px-4 py-5 sm:p-6">
            <p class="text-sm text-gray-500 mb-4">
              Recent data fetch operations and their status.
            </p>
            
            <div class="overflow-x-auto">
              <table class="min-w-full divide-y divide-gray-200">
                <thead>
                  <tr>
                    <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Data Feed</th>
                    <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Timestamp</th>
                    <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                    <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Records Updated</th>
                    <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Duration</th>
                  </tr>
                </thead>
                <tbody class="bg-white divide-y divide-gray-200">
                  <tr>
                    <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">FDA Drug Approvals</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">Mar 7, 2025 12:00 AM</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm">
                      <span class="inline-flex rounded-full px-2 text-xs font-semibold leading-5 bg-green-100 text-green-800">
                        Success
                      </span>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">42</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">3.2s</td>
                  </tr>
                  <tr>
                    <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">ClinicalTrials.gov Updates</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">Mar 7, 2025 12:30 AM</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm">
                      <span class="inline-flex rounded-full px-2 text-xs font-semibold leading-5 bg-green-100 text-green-800">
                        Success
                      </span>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">187</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">12.7s</td>
                  </tr>
                  <tr>
                    <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">SEC EDGAR Filings</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">Mar 6, 2025 11:45 PM</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm">
                      <span class="inline-flex rounded-full px-2 text-xs font-semibold leading-5 bg-red-100 text-red-800">
                        Failed
                      </span>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">0</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">30.0s</td>
                  </tr>
                  <tr>
                    <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">WHO Essential Medicines</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">Mar 6, 2025 2:00 PM</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm">
                      <span class="inline-flex rounded-full px-2 text-xs font-semibold leading-5 bg-green-100 text-green-800">
                        Success
                      </span>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">3</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">1.5s</td>
                  </tr>
                </tbody>
              </table>
            </div>
          </div>
        </Card>
      </div>
      
    </main>
  </div>
</DashboardLayout>

<script>
  // FMP Import Functionality
  document.addEventListener('DOMContentLoaded', () => {
    const importButton = document.getElementById('import-fmp-companies');
    const importStatus = document.getElementById('import-status');
    const statusTitle = document.getElementById('import-status-title');
    const statusMessage = document.getElementById('import-status-message');
    const loadingIcon = document.getElementById('import-status-icon-loading');
    const successIcon = document.getElementById('import-status-icon-success');
    const errorIcon = document.getElementById('import-status-icon-error');
    
    if (importButton) {
      importButton.addEventListener('click', async () => {
        try {
          // Show loading state
          importButton.disabled = true;
          importButton.innerHTML = 'Importing...';
          importStatus.classList.remove('hidden');
          loadingIcon.classList.remove('hidden');
          successIcon.classList.add('hidden');
          errorIcon.classList.add('hidden');
          statusTitle.textContent = 'Import in progress';
          statusMessage.textContent = 'Fetching company data from FMP API...';
          
          // Call the API endpoint to import companies
          const response = await fetch('/api/import-fmp-companies', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            }
          });
          
          // If the response is not successful, show an error
          if (!response.ok) {
            try {
              const errorData = await response.json();
              statusTitle.textContent = 'Import Failed';
              statusMessage.textContent = `Error: ${errorData.error || 'Unknown error'}`;
              
              // Hide loading icon and show error icon
              loadingIcon.classList.add('hidden');
              errorIcon.classList.remove('hidden');
              
              if (errorData.details) {
                // Show more detailed error information
                const detailsElement = document.createElement('div');
                detailsElement.className = 'text-red-400 text-sm mt-2';
                detailsElement.textContent = errorData.details;
                statusMessage.appendChild(detailsElement);
                
                // Add suggested fix if available
                if (errorData.suggestedFix) {
                  const fixElement = document.createElement('div');
                  fixElement.className = 'text-blue-500 text-sm mt-2';
                  fixElement.textContent = `Suggested fix: ${errorData.suggestedFix}`;
                  statusMessage.appendChild(fixElement);
                }
              }
            } catch (e) {
              statusTitle.textContent = 'Import Failed';
              statusMessage.textContent = `Error: Status ${response.status} - ${response.statusText}`;
              loadingIcon.classList.add('hidden');
              errorIcon.classList.remove('hidden');
            }
            return;
          }
          
          // Parse the response JSON
          const result = await response.json();
          
          // Show success message
          statusTitle.textContent = 'Import Successful';
          loadingIcon.classList.add('hidden');
          successIcon.classList.remove('hidden');
          statusMessage.textContent = `Imported ${result.imported} companies.`;
          
          // Add more detailed results if available
          if (result.companies) {
            const detailsElement = document.createElement('div');
            detailsElement.className = 'text-sm mt-2';
            detailsElement.innerHTML = `
              <div class="font-medium mb-1">Company Breakdown:</div>
              <div>Biotechnology: ${result.companies.biotech}</div>
              <div>Drug Manufacturers (General): ${result.companies.pharmaGeneral}</div>
              <div>Drug Manufacturers (Specialty): ${result.companies.pharmaSpecialty}</div>
              <div class="mt-1 font-medium">Total: ${result.companies.total}</div>
            `;
            statusMessage.appendChild(detailsElement);
          }
        } catch (error) {
          console.error('Error importing companies:', error);
          statusTitle.textContent = 'Import Failed';
          loadingIcon.classList.add('hidden');
          errorIcon.classList.remove('hidden');
          statusMessage.textContent = 'An error occurred while importing companies. Please try again later.';
        } finally {
          importButton.disabled = false;
          importButton.innerHTML = 'Import Now';
        }
      });
    }
  });
</script>