---
/**
 * Data Feeds Page
 * 
 * Manage external data feeds and synchronization settings.
 */
import DashboardLayout from '../../components/templates/DashboardLayout.astro';
import Card from '../../components/atoms/Card.astro';
import { dataFeeds } from '../../utils/dataUtils';
import { supabase } from '../../lib/supabase';

// Breadcrumbs for navigation
const breadcrumbs = [
  { label: 'Home', href: '/' },
  { label: 'Admin', href: '/admin' },
  { label: 'Data Feeds', href: '/admin/data-feeds', isActive: true },
];

// Get company stats
let importStats = {
  lastImport: null as string | null,
  companyCount: 0,
  status: 'unknown'
};

// Get data sources and endpoints from Supabase
let dataSources = [];
let dataSourceEndpoints = [];

try {
  // Get company count
  const { count, error } = await supabase
    .from('companies')
    .select('*', { count: 'exact', head: true });

  if (!error) {
    importStats.companyCount = count || 0;
  }

  // Get last updated company to determine last import time
  const { data, error: lastUpdateError } = await supabase
    .from('companies')
    .select('updated_at')
    .order('updated_at', { ascending: false })
    .limit(1);

  if (!lastUpdateError && data && data.length > 0) {
    importStats.lastImport = data[0].updated_at;
    importStats.status = 'healthy';
  }

  // Try to fetch data sources from the database
  try {
    const { data: sourcesData, error: sourcesError } = await supabase
      .from('data_sources')
      .select('*')
      .order('name');

    if (!sourcesError && sourcesData) {
      dataSources = sourcesData;
    } else {
      console.warn('Could not fetch data sources:', sourcesError);
    }

    // Try to fetch data source endpoints
    const { data: endpointsData, error: endpointsError } = await supabase
      .from('data_source_endpoints')
      .select('*')
      .order('name');

    if (!endpointsError && endpointsData) {
      dataSourceEndpoints = endpointsData;
    } else {
      console.warn('Could not fetch data source endpoints:', endpointsError);
    }
  } catch (sourcesFetchError) {
    console.error('Error fetching data sources:', sourcesFetchError);
    // If we can't fetch from database, data sources will remain an empty array
  }

} catch (error) {
  console.error('Error fetching company stats:', error);
  importStats.status = 'error';
}

// Group endpoints by data source
const groupedEndpoints = {};
dataSourceEndpoints.forEach(endpoint => {
  if (!groupedEndpoints[endpoint.data_source_id]) {
    groupedEndpoints[endpoint.data_source_id] = [];
  }
  groupedEndpoints[endpoint.data_source_id].push(endpoint);
});

// Format date
const formatDate = (dateString: string): string => {
  if (!dateString) return '--';
  const date = new Date(dateString);
  return date.toLocaleString('en-US', {
    month: 'short',
    day: 'numeric',
    year: 'numeric',
    hour: 'numeric',
    minute: '2-digit'
  });
};

// Get status color class
const getStatusColor = (status: string): string => {
  switch (status) {
    case 'healthy':
      return 'bg-green-100 text-green-800';
    case 'warning':
      return 'bg-yellow-100 text-yellow-800';
    case 'error':
      return 'bg-red-100 text-red-800';
    default:
      return 'bg-gray-100 text-gray-800';
  }
};
---

<DashboardLayout title="Data Feeds Management" breadcrumbs={breadcrumbs}>
  <div class="min-h-full">
    <main class="mx-auto max-w-7xl py-6 px-4 sm:px-6 lg:px-8">
      
      <!-- Airbyte Integration Notice -->
      <div class="mb-8">
        <h2 class="text-lg font-semibold mb-4">Data Integration Platform</h2>
        <Card>
          <div class="p-6">
            <div class="flex items-center justify-between">
              <div>
                <h3 class="text-lg font-medium">Airbyte Data Integration</h3>
                <p class="text-sm text-gray-500 mt-1">
                  All data imports are now managed through Airbyte
                </p>
              </div>
              <div>
                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                  Active
                </span>
              </div>
            </div>
            
            <div class="mt-4 border-t border-gray-200 pt-4">
              <p class="text-sm text-gray-700 mb-4">
                External data sources are now managed through Airbyte, a dedicated data integration platform.
                This provides better reliability, monitoring, and schedule management for all data imports.
              </p>
              
              <dl>
                <div class="grid grid-cols-2 gap-x-4 gap-y-4 sm:grid-cols-3">
                  <div>
                    <dt class="text-sm font-medium text-gray-500">Companies in Database</dt>
                    <dd class="mt-1 text-sm text-gray-900">{importStats.companyCount.toLocaleString()}</dd>
                  </div>
                  <div>
                    <dt class="text-sm font-medium text-gray-500">Last Data Update</dt>
                    <dd class="mt-1 text-sm text-gray-900">{importStats.lastImport ? formatDate(importStats.lastImport) : '--'}</dd>
                  </div>
                  <div>
                    <dt class="text-sm font-medium text-gray-500">Management Interface</dt>
                    <dd class="mt-1 text-sm text-gray-900">
                      <a href="http://localhost:8000" target="_blank" class="text-blue-600 hover:text-blue-800">
                        Airbyte Dashboard →
                      </a>
                    </dd>
                  </div>
                </div>
              </dl>
            </div>
            
            <div class="mt-4">
              <h4 class="text-sm font-medium text-gray-700">Available Data Sources</h4>
              <ul class="mt-2 grid grid-cols-1 gap-4 sm:grid-cols-2 md:grid-cols-3">
                <li class="flex items-start space-x-2">
                  <span class="inline-flex items-center justify-center h-6 w-6 rounded-full bg-green-100 text-green-800 text-xs">✓</span>
                  <span class="text-sm text-gray-700">Financial Modeling Prep</span>
                </li>
                <li class="flex items-start space-x-2">
                  <span class="inline-flex items-center justify-center h-6 w-6 rounded-full bg-green-100 text-green-800 text-xs">✓</span>
                  <span class="text-sm text-gray-700">SEC EDGAR</span>
                </li>
                <li class="flex items-start space-x-2">
                  <span class="inline-flex items-center justify-center h-6 w-6 rounded-full bg-green-100 text-green-800 text-xs">✓</span>
                  <span class="text-sm text-gray-700">OpenFDA</span>
                </li>
                <li class="flex items-start space-x-2">
                  <span class="inline-flex items-center justify-center h-6 w-6 rounded-full bg-green-100 text-green-800 text-xs">✓</span>
                  <span class="text-sm text-gray-700">ClinicalTrials.gov</span>
                </li>
                <li class="flex items-start space-x-2">
                  <span class="inline-flex items-center justify-center h-6 w-6 rounded-full bg-green-100 text-green-800 text-xs">✓</span>
                  <span class="text-sm text-gray-700">EMA</span>
                </li>
                <li class="flex items-start space-x-2">
                  <span class="inline-flex items-center justify-center h-6 w-6 rounded-full bg-green-100 text-green-800 text-xs">✓</span>
                  <span class="text-sm text-gray-700">DailyMed</span>
                </li>
              </ul>
            </div>
            
            <div class="mt-6 border-t border-gray-200 pt-4">
              <a 
                href="http://localhost:8000" 
                target="_blank"
                class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
              >
                Open Airbyte Dashboard
              </a>
            </div>
          </div>
        </Card>
      </div>
      
      <!-- External Data Feeds -->
      <div class="mb-8">
        <h2 class="text-lg font-semibold mb-4">External Data Feeds</h2>
        <div class="grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3">
          {dataFeeds.map(feed => (
            <Card>
              <div class="p-5">
                <div class="flex items-center justify-between">
                  <div>
                    <h3 class="text-base font-medium text-gray-900">{feed.name}</h3>
                    <p class="mt-1 text-sm text-gray-500">{feed.url}</p>
                  </div>
                  <div>
                    <span class={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColor(feed.status)}`}>
                      {feed.status === 'healthy' ? 'Healthy' : 
                       feed.status === 'warning' ? 'Warning' :
                       feed.status === 'error' ? 'Error' :
                       feed.status === 'disabled' ? 'Disabled' : 'Unknown'}
                    </span>
                  </div>
                </div>
                
                <div class="mt-4 grid grid-cols-2 gap-x-4 gap-y-2 text-xs">
                  <div>
                    <span class="font-medium text-gray-500">Frequency:</span>
                    <span class="text-gray-900"> {feed.frequency}</span>
                  </div>
                  <div>
                    <span class="font-medium text-gray-500">Active:</span>
                    <span class="text-gray-900"> {feed.active ? 'Yes' : 'No'}</span>
                  </div>
                  <div>
                    <span class="font-medium text-gray-500">Last Fetch:</span>
                    <span class="text-gray-900"> {formatDate(feed.lastFetch)}</span>
                  </div>
                  <div>
                    <span class="font-medium text-gray-500">Next Fetch:</span>
                    <span class="text-gray-900"> {feed.nextFetch ? formatDate(feed.nextFetch) : '--'}</span>
                  </div>
                </div>
                
                {feed.statusDetails && (
                  <div class="mt-3 text-xs text-yellow-700">
                    <span class="font-medium">Note:</span> {feed.statusDetails}
                  </div>
                )}
                
                <div class="mt-4 flex justify-end">
                  <button 
                    class="inline-flex items-center px-2.5 py-1.5 border border-gray-300 shadow-sm text-xs font-medium rounded text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                    disabled
                  >
                    Managed in Airbyte
                  </button>
                </div>
              </div>
            </Card>
          ))}
        </div>
      </div>
      
      <!-- Data Sources -->
      <div class="mb-8">
        <h2 class="text-lg font-semibold mb-4">Data Sources</h2>
        {dataSources.length > 0 ? (
          <div class="grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3">
            {dataSources.map(source => (
              <Card>
                <div class="p-5">
                  <div class="flex items-center justify-between">
                    <div>
                      <h3 class="text-base font-medium text-gray-900">{source.name}</h3>
                      <p class="mt-1 text-sm text-gray-500">{source.description || 'No description'}</p>
                    </div>
                    <div>
                      <span class={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${source.active ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'}`}>
                        {source.active ? 'Active' : 'Inactive'}
                      </span>
                    </div>
                  </div>
                  
                  <div class="mt-4 text-xs">
                    <div>
                      <span class="font-medium text-gray-500">Base URL:</span>
                      <span class="text-gray-900"> {source.base_url || '--'}</span>
                    </div>
                    
                    {source.auth_type && (
                      <div class="mt-1">
                        <span class="font-medium text-gray-500">Auth:</span>
                        <span class="text-gray-900"> {source.auth_type}</span>
                      </div>
                    )}
                    
                    {groupedEndpoints[source.id] && (
                      <div class="mt-2">
                        <span class="font-medium text-gray-500">Endpoints:</span>
                        <ul class="mt-1 ml-4 list-disc text-gray-900">
                          {groupedEndpoints[source.id].map(endpoint => (
                            <li>{endpoint.name}: {endpoint.path}</li>
                          ))}
                        </ul>
                      </div>
                    )}
                  </div>
                  
                  <div class="mt-4 text-xs text-blue-700">
                    <span class="font-medium">Now managed by Airbyte</span>
                  </div>
                </div>
              </Card>
            ))}
          </div>
        ) : (
          <Card>
            <div class="p-6 text-center">
              <p class="text-gray-500 text-sm">
                No data sources configured in the database yet. Sources are now managed through Airbyte.
              </p>
            </div>
          </Card>
        )}
      </div>
      
    </main>
  </div>
</DashboardLayout>