---
/**
 * Companies Directory Page
 * 
 * Lists all companies in the pharmaceutical directory with filtering options.
 */
import DirectoryIndexLayout from '../../layouts/DirectoryIndexLayout.astro';
import DirectoryFilterPanel from '../../components/organisms/DirectoryFilterPanel.astro';
import CompanyCard from '../../components/molecules/CompanyCard.astro';
import DataSourceVisualizer from '../../components/DataSourceVisualizer.astro';
import Pagination from '../../components/molecules/Pagination.astro';
import MultiSelect from '../../components/molecules/MultiSelect.astro';
import RangeSlider from '../../components/molecules/RangeSlider.astro';

// Import utility functions
import { getCompanies, getCompanyFilters } from '../../lib/utils/companyUtils';
import { getPaginationParams } from '../../lib/utils/urlUtils';
import type { Company } from '../../interfaces/entities';

// Set prerender to false for dynamic content
export const prerender = false;

// Get URL query parameters for filtering and sorting
const url = new URL(Astro.request.url);
const params = url.searchParams;

// Extract filter and sort parameters
const sortParam = params.get('sort') || 'name_asc';
const viewMode = params.get('view') || 'grid';
const search = params.get('search') || '';
const selectedRegions = params.get('regions')?.split(',').filter(Boolean) || [];
const selectedTAs = params.get('tas')?.split(',').filter(Boolean) || [];
const minMarketCap = params.get('minMarketCap') ? parseInt(params.get('minMarketCap')) : 0;
const maxMarketCap = params.get('maxMarketCap') ? parseInt(params.get('maxMarketCap')) : 2000;

// Get pagination parameters
const { page, limit, offset } = getPaginationParams(params);

// Parse sort parameter into sortBy and sortDirection
const [sortField, sortDirection] = sortParam.split('_');

// Fetch companies and filter options using utility functions
const { companies, total: totalCount } = await getCompanies({
  search,
  regions: selectedRegions,
  therapeuticAreaIds: selectedTAs,
  minMarketCap,
  maxMarketCap,
  sortBy: sortField,
  sortDirection: sortDirection as 'asc' | 'desc',
  limit,
  offset
});

// Get filter options
const filterOptions = await getCompanyFilters();

// Calculate pagination details
const totalPages = Math.ceil(totalCount / limit);

// Generate breadcrumbs for navigation
const breadcrumbs = [
  { label: 'Home', href: '/' },
  { label: 'Companies', href: '/companies', isActive: true },
];

// Set page metadata
const title = "Pharmaceutical Companies";
const description = "Browse and discover pharmaceutical companies in our database";

// Company icon SVG
const companyIcon = `<svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-blue-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4" />
</svg>`;
---

<DirectoryIndexLayout
  title={title}
  description={description}
  currentPath="/companies"
  breadcrumbs={breadcrumbs}
  gradientFrom="blue-600"
  gradientTo="blue-700"
  icon={companyIcon}
  totalCount={totalCount}
  showViewToggle={true}
  viewMode={viewMode}
>
  <!-- Filter Bar -->
  <div slot="filters">
    <DirectoryFilterPanel
      search={search}
      sortOptions={filterOptions.sortOptions}
      selectedSort={sortParam}
      showViewToggle={true}
      viewMode={viewMode}
    >
      <div slot="advanced-filters" class="grid grid-cols-1 md:grid-cols-3 gap-4">
        <!-- Region Filter -->
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">Regions</label>
          <MultiSelect
            options={filterOptions.regions}
            selected={selectedRegions}
            name="regions"
            onChange={(values) => {
              document.querySelector('input[name="regions"]').value = values.join(',');
            }}
          />
          <input type="hidden" name="regions" value={selectedRegions.join(',')} />
        </div>
        
        <!-- Therapeutic Areas Filter -->
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">Therapeutic Areas</label>
          <MultiSelect
            options={filterOptions.therapeuticAreas}
            selected={selectedTAs}
            name="tas"
            onChange={(values) => {
              document.querySelector('input[name="tas"]').value = values.join(',');
            }}
          />
          <input type="hidden" name="tas" value={selectedTAs.join(',')} />
        </div>
        
        <!-- Market Cap Filter -->
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">Market Cap Range ($B)</label>
          <RangeSlider
            min={0}
            max={2000}
            step={10}
            minValue={minMarketCap}
            maxValue={maxMarketCap}
            unit="B"
            onChange={(min, max) => {
              document.querySelector('input[name="minMarketCap"]').value = min.toString();
              document.querySelector('input[name="maxMarketCap"]').value = max.toString();
            }}
          />
          <input type="hidden" name="minMarketCap" value={minMarketCap.toString()} />
          <input type="hidden" name="maxMarketCap" value={maxMarketCap.toString()} />
        </div>
      </div>
    </DirectoryFilterPanel>
  </div>

  <!-- Results Count -->
  <div slot="results-count">
    Showing <span class="font-medium">{companies.length > 0 ? (page - 1) * limit + 1 : 0} - {Math.min(page * limit, totalCount)}</span> of <span class="font-medium">{totalCount}</span> companies
  </div>

  <!-- List View (Table) -->
  <div slot="list-view">
    <table class="min-w-full divide-y divide-gray-200">
      <thead class="bg-gray-50">
        <tr>
          <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Company</th>
          <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Location</th>
          <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Market Cap</th>
          <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Therapeutic Areas</th>
          <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
        </tr>
      </thead>
      <tbody class="bg-white divide-y divide-gray-200">
        {companies.length === 0 ? (
          <tr>
            <td colspan="5" class="px-6 py-4 text-center text-sm text-gray-500">
              No companies found matching your criteria.
            </td>
          </tr>
        ) : (
          companies.map((company: Company) => (
            <tr>
              <td class="px-6 py-4 whitespace-nowrap">
                <div class="flex items-center">
                  {company.logoPath ? (
                    <div class="flex-shrink-0 h-10 w-10 mr-3">
                      <img class="h-10 w-10 rounded-full object-contain bg-gray-50 border border-gray-200" src={company.logoPath} alt={company.name} />
                    </div>
                  ) : (
                    <div class="flex-shrink-0 h-10 w-10 rounded-full bg-blue-100 flex items-center justify-center mr-3">
                      <span class="text-lg font-medium text-blue-600">{company.name.charAt(0)}</span>
                    </div>
                  )}
                  <div>
                    <div class="text-sm font-medium text-gray-900">{company.name}</div>
                    {company.ticker && (
                      <div class="text-xs text-gray-500">{company.ticker}</div>
                    )}
                  </div>
                </div>
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                {company.region || company.hqLocation || 'N/A'}
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                {company.marketCap ? `$${(company.marketCap).toLocaleString()}B` : 'N/A'}
              </td>
              <td class="px-6 py-4 whitespace-nowrap">
                <div class="flex flex-wrap gap-1">
                  {company.therapeuticAreas && company.therapeuticAreas.slice(0, 2).map(ta => (
                    <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-blue-100 text-blue-800">
                      {ta}
                    </span>
                  ))}
                  {company.therapeuticAreas && company.therapeuticAreas.length > 2 && (
                    <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-gray-100 text-gray-800">
                      +{company.therapeuticAreas.length - 2}
                    </span>
                  )}
                </div>
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                <a href={`/companies/${company.slug}`} class="text-blue-600 hover:text-blue-900">View</a>
              </td>
            </tr>
          ))
        )}
      </tbody>
    </table>
  </div>

  <!-- Results Grid -->
  <div slot="results">
    {companies.length === 0 ? (
      <div class="p-8 text-center bg-white rounded-lg shadow">
        <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
        <h3 class="mt-2 text-lg font-medium text-gray-900">No companies found</h3>
        <p class="mt-1 text-sm text-gray-500">Try adjusting your filters to find what you're looking for.</p>
        <div class="mt-6">
          <a href="/companies" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
            Reset Filters
          </a>
        </div>
      </div>
    ) : (
      <div class="grid gap-4 grid-cols-1 md:grid-cols-2 xl:grid-cols-3">
        {companies.map((company: Company) => (
          <CompanyCard company={company} />
        ))}
      </div>
    )}
  </div>

  <!-- Pagination -->
  {totalPages > 1 && (
    <div slot="pagination">
      <Pagination
        currentPage={page}
        totalPages={totalPages}
        getPageUrl={(pageNum) => {
          const updatedUrl = new URL(Astro.url);
          updatedUrl.searchParams.set('page', pageNum.toString());
          return updatedUrl.pathname + updatedUrl.search;
        }}
      />
    </div>
  )}

  <!-- Data Source -->
  <div slot="data-source">
    <DataSourceVisualizer />
  </div>
</DirectoryIndexLayout>

<script>
  // Client-side enhancements
  document.addEventListener('DOMContentLoaded', () => {
    // Form is already functional with native browser behavior
    // Additional JS enhancements could be added here if needed
  });

  // Update URL parameters and navigate
  function updateUrlParams(params, currentUrl) {
    const updatedUrl = new URL(currentUrl);
    
    // Special handling for sort parameter to prevent changing view mode
    if (params.sort) {
      // Get sort value and direction
      const [field, direction] = params.sort.split('_');
      
      // Only update sort-related params, preserve the current view
      updatedUrl.searchParams.set('sort', field);
      updatedUrl.searchParams.set('direction', direction || 'asc');
    } else {
      // For non-sort params, update normally
      Object.entries(params).forEach(([key, value]) => {
        if (value === null || value === undefined || value === '') {
          updatedUrl.searchParams.delete(key);
        } else {
          updatedUrl.searchParams.set(key, value.toString());
        }
      });
    }
    
    // Navigate to the new URL
    window.location.href = updatedUrl.pathname + updatedUrl.search;
  }
</script> 
