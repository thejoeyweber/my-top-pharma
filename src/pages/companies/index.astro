---
/**
 * Companies Directory Page
 * 
 * Lists all companies in the pharmaceutical directory with filtering options.
 */
import DashboardLayout from '../../layouts/DashboardLayout.astro';
import Card from '../../components/atoms/Card.astro';
import Button from '../../components/atoms/Button.astro';
import FilterBar from '../../components/organisms/FilterBar.astro';
import MultiSelect from '../../components/molecules/MultiSelect.astro';
import RangeSlider from '../../components/molecules/RangeSlider.astro';
import SortSelect from '../../components/molecules/SortSelect.astro';
import ViewToggle from '../../components/molecules/ViewToggle.astro';
import CompanyCard from '../../components/molecules/CompanyCard.astro';
import DataSourceVisualizer from '../../components/DataSourceVisualizer.astro';
import Pagination from '../../components/molecules/Pagination.astro';

// Import utility functions instead of direct Supabase access
import { getCompanies, getCompanyFilters } from '../../lib/utils/companyUtils';
import { updateUrlParams, getPaginationParams } from '../../lib/utils/urlUtils';
import type { Company } from '../../interfaces/entities';

// Set prerender to false for dynamic content
export const prerender = false;

// Get URL query parameters for filtering and sorting
const url = new URL(Astro.request.url);
const params = url.searchParams;

// Extract filter and sort parameters
const sortParam = params.get('sort') || 'name_asc';
const viewMode = params.get('view') || 'grid';
const search = params.get('search') || '';
const selectedRegions = params.get('regions')?.split(',').filter(Boolean) || [];
const selectedTAs = params.get('tas')?.split(',').filter(Boolean) || [];
const minMarketCap = params.get('minMarketCap') ? parseInt(params.get('minMarketCap')) : 0;
const maxMarketCap = params.get('maxMarketCap') ? parseInt(params.get('maxMarketCap')) : 2000;

// Get pagination parameters
const { page, limit, offset } = getPaginationParams(params);

// Parse sort parameter into sortBy and sortDirection
const [sortField, sortDirection] = sortParam.split('_');

// Fetch companies and filter options using utility functions
const { companies, total: totalCount } = await getCompanies({
  search,
  regions: selectedRegions,
  therapeuticAreaIds: selectedTAs,
  minMarketCap,
  maxMarketCap,
  sortBy: sortField,
  sortDirection: sortDirection as 'asc' | 'desc',
  limit,
  offset
});

// Get filter options (regions, therapeutic areas, sort options)
const filterOptions = await getCompanyFilters();

// Calculate pagination details
const totalPages = Math.ceil(totalCount / limit);

// Generate breadcrumbs for navigation
const breadcrumbs = [
  { label: 'Home', href: '/' },
  { label: 'Companies', href: '/companies', isActive: true },
];

// Set page metadata
const title = "Pharmaceutical Companies | Top Pharma";
const description = "Browse and discover pharmaceutical companies in our database";
---

<DashboardLayout 
  title={title}
  description={description}
  currentPath="/companies"
  breadcrumbs={breadcrumbs}
>
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <!-- Visual header -->
    <div class="mb-6 overflow-hidden">
      <div class="flex border border-gray-100 rounded-lg shadow-sm overflow-hidden">
        <div class="w-3 bg-gradient-to-b from-blue-600 to-blue-700"></div>
        <div class="p-6 flex items-center">
          <div class="bg-white p-3 rounded-full shadow-sm mr-4">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-blue-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4" />
            </svg>
          </div>
          <div>
            <h1 class="text-2xl font-bold text-gray-900">Companies</h1>
            <p class="text-gray-600 text-sm">Browse and discover pharmaceutical companies in our database</p>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Filter Bar -->
    <div class="mb-6">
      <Card>
        <div class="p-4">
          <form id="filter-form" method="get" action="/companies">
            <div class="flex flex-col md:flex-row md:items-center justify-between gap-4 mb-4">
              <!-- Search input -->
              <div class="w-full md:w-1/3">
                <input 
                  type="text" 
                  id="search" 
                  name="search" 
                  value={search}
                  placeholder="Search companies..."
                  class="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                />
              </div>
              
              <!-- View and Sort Options -->
              <div class="flex items-center space-x-3">
                <ViewToggle 
                  options={[
                    { value: 'grid', label: 'Grid', icon: 'grid' },
                    { value: 'list', label: 'List', icon: 'list' }
                  ]}
                  activeOption={viewMode}
                  onChange={(value) => updateUrlParams({ view: value }, url)}
                />
                
                <SortSelect 
                  options={filterOptions.sortOptions}
                  selected={sortParam}
                  onChange={(value) => updateUrlParams({ sort: value }, url)}
                />
              </div>
            </div>
            
            <!-- Advanced Filters (collapsible) -->
            <details class="mt-4">
              <summary class="cursor-pointer text-blue-600 font-medium mb-3">Advanced Filters</summary>
              <div class="grid grid-cols-1 md:grid-cols-3 gap-4 p-4 bg-gray-50 rounded-md">
                <!-- Region Filter -->
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-1">Regions</label>
                  <MultiSelect
                    options={filterOptions.regions}
                    selected={selectedRegions}
                    name="regions"
                    onChange={(values) => {
                      document.querySelector('input[name="regions"]').value = values.join(',');
                    }}
                  />
                  <input type="hidden" name="regions" value={selectedRegions.join(',')} />
                </div>
                
                <!-- Therapeutic Areas Filter -->
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-1">Therapeutic Areas</label>
                  <MultiSelect
                    options={filterOptions.therapeuticAreas}
                    selected={selectedTAs}
                    name="tas"
                    onChange={(values) => {
                      document.querySelector('input[name="tas"]').value = values.join(',');
                    }}
                  />
                  <input type="hidden" name="tas" value={selectedTAs.join(',')} />
                </div>
                
                <!-- Market Cap Filter -->
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-1">Market Cap Range ($B)</label>
                  <RangeSlider
                    min={0}
                    max={2000}
                    step={10}
                    minValue={minMarketCap}
                    maxValue={maxMarketCap}
                    unit="B"
                    onChange={(min, max) => {
                      document.querySelector('input[name="minMarketCap"]').value = min.toString();
                      document.querySelector('input[name="maxMarketCap"]').value = max.toString();
                    }}
                  />
                  <input type="hidden" name="minMarketCap" value={minMarketCap.toString()} />
                  <input type="hidden" name="maxMarketCap" value={maxMarketCap.toString()} />
                </div>
              </div>
              
              <!-- Filter Action Buttons -->
              <div class="flex justify-end mt-4 space-x-2">
                <Button type="submit" variant="primary">Apply Filters</Button>
                <Button 
                  type="button" 
                  variant="outline" 
                  onClick={() => {
                    window.location.href = "/companies";
                  }}
                >
                  Reset
                </Button>
              </div>
            </details>
            
            <!-- Maintain view and sort in form submission -->
            <input type="hidden" name="view" value={viewMode} />
            <input type="hidden" name="sort" value={sortParam} />
            <input type="hidden" name="page" value="1" /> <!-- Reset to page 1 when filtering -->
          </form>
        </div>
      </Card>
    </div>
    
    <!-- Results Count -->
    <div class="mb-4">
      <p class="text-sm text-gray-600">
        Showing <span class="font-medium">{companies.length > 0 ? (page - 1) * limit + 1 : 0} - {Math.min(page * limit, totalCount)}</span> of <span class="font-medium">{totalCount}</span> companies
      </p>
    </div>
    
    <!-- Companies Results -->
    {companies.length === 0 ? (
      <Card>
        <div class="p-8 text-center">
          <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
          <h3 class="mt-2 text-lg font-medium text-gray-900">No companies found</h3>
          <p class="mt-1 text-sm text-gray-500">Try adjusting your filters to find what you're looking for.</p>
          <div class="mt-6">
            <Button 
              href="/companies" 
              variant="primary"
            >
              Reset Filters
            </Button>
          </div>
        </div>
      </Card>
    ) : (
      <div class={`grid gap-4 ${viewMode === 'grid' ? 'grid-cols-1 md:grid-cols-2 xl:grid-cols-3' : 'grid-cols-1'}`}>
        {companies.map((company: Company) => (
          <CompanyCard company={company} />
        ))}
      </div>
    )}
    
    <!-- Pagination -->
    {totalPages > 1 && (
      <div class="flex justify-center mt-8">
        <Pagination
          currentPage={page}
          totalPages={totalPages}
          getPageUrl={(pageNum) => {
            const updatedUrl = new URL(Astro.url);
            updatedUrl.searchParams.set('page', pageNum.toString());
            return updatedUrl.pathname + updatedUrl.search;
          }}
        />
      </div>
    )}
    
    <!-- Data Source Indicator -->
    <div class="mt-8">
      <DataSourceVisualizer />
    </div>
  </div>
</DashboardLayout>

<script>
  // Client-side enhancements
  document.addEventListener('DOMContentLoaded', () => {
    // Form is already functional with native browser behavior
    // Additional JS enhancements could be added here if needed
  });

  // Update URL parameters and navigate
  function updateUrlParams(params, currentUrl) {
    const updatedUrl = new URL(currentUrl);
    
    // Special handling for sort parameter to prevent changing view mode
    if (params.sort) {
      // Get sort value and direction
      const [field, direction] = params.sort.split('_');
      
      // Only update sort-related params, preserve the current view
      updatedUrl.searchParams.set('sort', field);
      updatedUrl.searchParams.set('direction', direction || 'asc');
    } else {
      // For non-sort params, update normally
      Object.entries(params).forEach(([key, value]) => {
        if (value === null || value === undefined || value === '') {
          updatedUrl.searchParams.delete(key);
        } else {
          updatedUrl.searchParams.set(key, value.toString());
        }
      });
    }
    
    // Navigate to the new URL
    window.location.href = updatedUrl.pathname + updatedUrl.search;
  }
</script> 
