---
/**
 * Companies Directory Page (Refactored)
 * 
 * This is an example of how to refactor the companies index page
 * to use the new data utilities instead of direct Supabase queries.
 */
import DashboardLayout from '../../components/templates/DashboardLayout.astro';
import Card from '../../components/atoms/Card.astro';
import Button from '../../components/atoms/Button.astro';
import FilterBar from '../../components/organisms/FilterBar.astro';
import MultiSelect from '../../components/molecules/MultiSelect.astro';
import RangeSlider from '../../components/molecules/RangeSlider.astro';
import SortSelect from '../../components/molecules/SortSelect.astro';
import ViewToggle from '../../components/molecules/ViewToggle.astro';
import CompanyCard from '../../components/molecules/CompanyCard.astro';

// Import the new data utilities instead of Supabase client
import { getCompanies, getCompanyTherapeuticAreas } from '../../lib/utils/companyUtils';
import type { Company } from '../../interfaces/entities';

// Get URL query parameters for filtering and sorting
const url = new URL(Astro.request.url);
const params = url.searchParams;

// Extract filter and sort parameters
const sortParam = params.get('sort') || 'name_asc';
const viewMode = params.get('view') || 'grid';
const search = params.get('search') || '';
const selectedRegions = params.get('regions')?.split(',') || [];
const selectedTAs = params.get('tas')?.split(',') || [];
const minMarketCap = params.get('minMarketCap') ? parseInt(params.get('minMarketCap')) : 0;
const maxMarketCap = params.get('maxMarketCap') ? parseInt(params.get('maxMarketCap')) : 2000;

// Parse sort parameter
const [sortField, sortDirection] = sortParam.split('_') as [string, 'asc' | 'desc'];

// ------- REFACTORED PART BEGINS -------
// Use the new utility functions instead of direct Supabase queries

// Fetch companies using the utility function
const companies = await getCompanies({
  filterText: search,
  sortBy: sortField,
  sortDirection: sortDirection,
  // We'll need to handle therapeutic areas separately due to the many-to-many relationship
});

// Fetch therapeutic areas for the filter options
// Note: This could be moved to a separate utility function in the future
import { supabase } from '../../lib/supabase'; // Still needed for therapeutic areas until we create a utility

const { data: therapeuticAreasData, error: taError } = await supabase
  .from('therapeutic_areas')
  .select('*')
  .order('name');

if (taError) {
  console.error('Error fetching therapeutic areas:', taError);
}

// Create therapeutic areas options for filtering
const therapeuticAreas = (therapeuticAreasData || []).map(area => ({
  value: area.id,
  label: area.name
}));

// Define regions for filtering (static data, could be moved to a constants file)
const regions = [
  { value: 'north-america', label: 'North America' },
  { value: 'europe', label: 'Europe' },
  { value: 'asia', label: 'Asia' },
  { value: 'united-states', label: 'United States' },
  { value: 'switzerland', label: 'Switzerland' },
  { value: 'germany', label: 'Germany' },
  { value: 'japan', label: 'Japan' },
  { value: 'united-kingdom', label: 'United Kingdom' },
  { value: 'france', label: 'France' },
  { value: 'china', label: 'China' },
  { value: 'other', label: 'Other' }
];

// Define sort options
const sortOptions = [
  { value: 'name_asc', label: 'Name (A to Z)' },
  { value: 'name_desc', label: 'Name (Z to A)' },
  { value: 'marketCap_desc', label: 'Market Cap (High to Low)' },
  { value: 'marketCap_asc', label: 'Market Cap (Low to High)' },
  { value: 'founded_desc', label: 'Founded (Newest First)' },
  { value: 'founded_asc', label: 'Founded (Oldest First)' }
];

// Helper function to build URLs with updated parameters
const updateUrlParams = (updates: Record<string, string | string[] | null>) => {
  const newUrl = new URL(Astro.request.url);
  
  Object.entries(updates).forEach(([key, value]) => {
    if (value === null) {
      newUrl.searchParams.delete(key);
    } else if (Array.isArray(value)) {
      if (value.length) {
        newUrl.searchParams.set(key, value.join(','));
      } else {
        newUrl.searchParams.delete(key);
      }
    } else {
      newUrl.searchParams.set(key, value);
    }
  });
  
  return newUrl.pathname + newUrl.search;
};
---

<DashboardLayout title="Pharmaceutical Companies">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <!-- Header that connects to detail page design -->
    <div class="mb-6 overflow-hidden">
      <div class="flex border border-gray-100 rounded-lg shadow-sm overflow-hidden">
        <div class="w-3 bg-gradient-to-b from-blue-600 to-blue-700"></div>
        <div class="p-6 flex items-center">
          <div class="bg-white p-3 rounded-full shadow-sm mr-4">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-blue-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4" />
            </svg>
          </div>
          <div>
            <h1 class="text-2xl font-bold text-gray-900">Companies</h1>
            <p class="text-gray-600 text-sm">Browse and discover pharmaceutical companies in our database</p>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Filter Bar -->
    <div class="mb-6">
      <Card>
        <div class="p-4">
          <form id="filter-form" method="get" action="/companies">
            <div class="flex flex-col md:flex-row md:items-center justify-between gap-4 mb-4">
              <!-- Search input -->
              <div class="w-full md:w-1/3">
                <input 
                  type="text" 
                  id="search" 
                  name="search" 
                  value={search}
                  placeholder="Search companies..."
                  class="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                />
              </div>
              
              <!-- View and Sort Options -->
              <div class="flex items-center space-x-3">
                <ViewToggle 
                  options={[
                    { value: 'grid', label: 'Grid', icon: 'grid' },
                    { value: 'list', label: 'List', icon: 'list' }
                  ]}
                  activeOption={viewMode}
                  onChange={(value) => updateUrlParams({ view: value })}
                />
                
                <SortSelect 
                  options={sortOptions}
                  selected={sortParam}
                  onChange={(value) => updateUrlParams({ sort: value })}
                />
              </div>
            </div>
            
            <!-- Advanced Filters -->
            <details class="mt-4">
              <summary class="cursor-pointer text-blue-600 font-medium">Advanced Filters</summary>
              <div class="mt-4 grid grid-cols-1 md:grid-cols-3 gap-6">
                <!-- Regions filter -->
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-1">Regions</label>
                  <MultiSelect 
                    options={regions}
                    selectedValues={selectedRegions}
                    onChange={(values) => updateUrlParams({ regions: values })}
                    placeholder="Select regions..."
                  />
                </div>
                
                <!-- Therapeutic Areas filter -->
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-1">Therapeutic Areas</label>
                  <MultiSelect 
                    options={therapeuticAreas}
                    selectedValues={selectedTAs}
                    onChange={(values) => updateUrlParams({ tas: values })}
                    placeholder="Select therapeutic areas..."
                  />
                </div>
                
                <!-- Market Cap filter -->
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-1">
                    Market Cap Range (${minMarketCap}B - ${maxMarketCap}B)
                  </label>
                  <RangeSlider 
                    min={0}
                    max={2000}
                    minValue={minMarketCap}
                    maxValue={maxMarketCap}
                    onChange={(min, max) => updateUrlParams({ 
                      minMarketCap: min.toString(),
                      maxMarketCap: max.toString()
                    })}
                  />
                </div>
              </div>
              
              <div class="mt-4 flex justify-end">
                <Button type="submit" variant="primary">Apply Filters</Button>
              </div>
            </details>
          </form>
        </div>
      </Card>
    </div>
    
    <!-- Companies Grid/List View -->
    <div class={`grid ${viewMode === 'grid' ? 'grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6' : 'grid-cols-1 gap-4'}`}>
      {companies.map(company => (
        <CompanyCard 
          company={company}
          viewMode={viewMode}
        />
      ))}
    </div>
    
    {companies.length === 0 && (
      <div class="text-center py-12">
        <p class="text-gray-500">No companies match your filters. Try adjusting your search criteria.</p>
      </div>
    )}
  </div>
</DashboardLayout> 