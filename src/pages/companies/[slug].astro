---
/**
 * Company Detail Page
 * 
 * Displays detailed information about a specific pharmaceutical company.
 */
import EntityDetailLayout from '../../layouts/EntityDetailLayout.astro';
import Card from '../../components/atoms/Card.astro';
import CardHeader from '../../components/atoms/CardHeader.astro';
import CardBody from '../../components/atoms/CardBody.astro';
import CardFooter from '../../components/atoms/CardFooter.astro';
import Button from '../../components/atoms/Button.astro';
import FollowButton from '../../components/molecules/FollowButton.astro';
import KeyMetric from '../../components/molecules/KeyMetric.astro';
import Timeline from '../../components/molecules/Timeline.astro';
import FinancialChart from '../../components/molecules/FinancialChart.astro';
import PipelineChart from '../../components/molecules/PipelineChart.astro';
import DataTable from '../../components/molecules/DataTable.astro';
import DataSourceVisualizer from '../../components/DataSourceVisualizer.astro';
import ProductCard from '../../components/molecules/ProductCard.astro';
import WebsiteCard from '../../components/molecules/WebsiteCard.astro';
import TherapeuticAreaCard from '../../components/molecules/TherapeuticAreaCard.astro';

// Import company utilities
import { 
  getCompanyBySlug,
  getCompanyTherapeuticAreas,
  getCompanyProducts,
  getCompanyWebsites,
  getRelatedCompanies
} from '../../lib/utils/companyUtils';
import type { 
  Company, Product, Website, TherapeuticArea, Milestone, FinancialMetric, RelatedCompany
} from '../../interfaces/entities'; 

// Import other utilities
import { getCompanyLogoUrl } from '../../utils/assetUtils';
import { formatMarketCap } from '../../utils/stringUtils';

export const prerender = false;

// Get company slug from URL parameters
const { slug } = Astro.params;

// Fetch company data
const company: Company | null = await getCompanyBySlug(slug);

// Handle company not found
if (!company) {
  return Astro.redirect('/404');
}

// Fetch related data
const therapeuticAreas = await getCompanyTherapeuticAreas(company.id);
const products = await getCompanyProducts(company.id);
const websites = await getCompanyWebsites(company.id);
const relatedCompanies = await getRelatedCompanies(company.id);

// Mock data for milestones and financials
const milestones: Milestone[] = [];

// Empty financial data array - no longer using mock data
const financialData: FinancialMetric[] = [];

// Prepare pipeline data
let pipelineData = [];
if (products?.length > 0) {
  try {
    const stageCountMap = products.reduce((acc, product) => {
      const stage = product.stage || 'unknown';
      acc[stage] = (acc[stage] || 0) + 1;
      return acc;
    }, {});
    
    pipelineData = Object.entries(stageCountMap).map(([stage, count]) => ({
      stage,
      count
    }));
  } catch (error) {
    console.error('Error creating pipeline data:', error);
  }
}

// Generate URLs and format data
const logoUrl = company.logoPath ? getCompanyLogoUrl(company.logoPath) : null;
const marketCapFormatted = company.marketCap ? formatMarketCap(company.marketCap) : 'N/A';

// Set up breadcrumbs
const breadcrumbs = [
  { label: 'Home', href: '/' },
  { label: 'Companies', href: '/companies' },
  { label: company.name, href: `/companies/${company.slug}`, isActive: true }
];

// Set up tabs with more accurate counts
const tabs = [
  { id: 'overview', label: 'Overview', count: null, icon: '<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>' },
  { id: 'products', label: 'Products', count: products.length > 0 ? products.length : null, icon: '<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19.428 15.428a2 2 0 00-1.022-.547l-2.387-.477a6 6 0 00-3.86.517l-.318.158a6 6 0 01-3.86.517L6.05 15.21a2 2 0 00-1.806.547M8 4h8l-1 1v5.172a2 2 0 00.586 1.414l5 5c1.26 1.26.367 3.414-1.415 3.414H4.828c-1.782 0-2.674-2.154-1.414-3.414l5-5A2 2 0 009 10.172V5L8 4z" /></svg>' },
  { id: 'pipeline', label: 'Pipeline', count: null, icon: '<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19.428 15.428a2 2 0 00-1.022-.547l-2.387-.477a6 6 0 00-3.86.517l-.318.158a6 6 0 01-3.86.517L6.05 15.21a2 2 0 00-1.806.547M8 4h8l-1 1v5.172a2 2 0 00.586 1.414l5 5c1.26 1.26.367 3.414-1.415 3.414H4.828c-1.782 0-2.674-2.154-1.414-3.414l5-5A2 2 0 009 10.172V5L8 4z" /></svg>' },
  { id: 'websites', label: 'Websites', count: websites.length > 0 ? websites.length : null, icon: '<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9a9 9 0 01-9-9m9 9c1.657 0 3-4.03 3-9s-1.343-9-3-9m0 18c-1.657 0-3-4.03-3-9s1.343-9 3-9m-9 9a9 9 0 019-9" /></svg>' },
  { id: 'financials', label: 'Financials', count: financialData.length > 0 ? financialData.length : null, icon: '<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6" /></svg>' },
  { id: 'news', label: 'News & Events', count: milestones.length > 0 ? milestones.length : null, icon: '<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" /></svg>' },
  { id: 'related', label: 'Related Companies', count: relatedCompanies.length > 0 ? relatedCompanies.length : null, icon: '<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4" /></svg>' },
];

// Get active tab from URL or default to 'overview'
const activeTab = Astro.url.searchParams.get('tab') || 'overview';
---

<EntityDetailLayout
  title={`${company.name} | Pharmaceutical Company Profile`}
  description={company.description || `Company profile for ${company.name}`}
  currentPath={`/companies/${company.slug}`}
  breadcrumbs={breadcrumbs}
  gradientFrom="blue-500"
  gradientTo="blue-600"
  tabs={tabs}
  activeTab={activeTab}
  logoUrl={logoUrl}
  entityName={company.name}
  entitySubtitle={company.description}
>
  <!-- Action Buttons -->
  <div slot="action-buttons" class="flex space-x-3">
    <FollowButton companyId={company.id} />
    {company.website && (
      <Button href={company.website} target="_blank" variant="outline" size="sm">
        <svg xmlns="http://www.w3.org/2000/svg" class="-ml-1 mr-2 h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
        </svg>
        Visit Website
      </Button>
    )}
  </div>

  <!-- Entity Badges -->
  <div slot="entity-badges" class="flex flex-wrap gap-2">
    {therapeuticAreas.map(ta => (
      <a href={`/therapeutic-areas/${ta.slug}`} class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800 hover:bg-blue-200 transition-colors">
        {ta.name}
      </a>
    ))}
  </div>

  <!-- Overview Tab Content -->
  <div slot="overview">
    <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
      <!-- Left Column -->
      <div class="md:col-span-2 space-y-6">
        <!-- Key Metrics -->
        <Card>
          <CardHeader>
            <h3 class="text-lg font-medium text-gray-900">Key Metrics</h3>
          </CardHeader>
          <CardBody>
            <div class="grid grid-cols-2 sm:grid-cols-3 gap-6">
              <KeyMetric 
                label="Market Cap" 
                value={marketCapFormatted} 
                icon='<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 6l3 1m0 0l-3 9a5.002 5.002 0 006.001 0M6 7l3 9M6 7l6-2m6 2l3-1m-3 1l-3 9a5.002 5.002 0 006.001 0M18 7l3 9m-3-9l-6-2m0-2v2m0 16V5m0 16H9m3 0h3" /></svg>' 
              />
              <KeyMetric 
                label="Employees" 
                value={company.employeeCount ? company.employeeCount.toLocaleString() : 'N/A'} 
                icon='<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z" /></svg>' 
              />
              <KeyMetric 
                label="Founded" 
                value={company.foundedYear?.toString() || 'N/A'} 
                icon='<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" /></svg>' 
              />
              <KeyMetric 
                label="Products" 
                value={products.length.toString()} 
                icon='<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19.428 15.428a2 2 0 00-1.022-.547l-2.387-.477a6 6 0 00-3.86.517l-.318.158a6 6 0 01-3.86.517L6.05 15.21a2 2 0 00-1.806.547M8 4h8l-1 1v5.172a2 2 0 00.586 1.414l5 5c1.26 1.26.367 3.414-1.415 3.414H4.828c-1.782 0-2.674-2.154-1.414-3.414l5-5A2 2 0 009 10.172V5L8 4z" /></svg>' 
              />
              <KeyMetric 
                label="Websites" 
                value={websites.length.toString()} 
                icon='<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9a9 9 0 01-9-9m9 9c1.657 0 3-4.03 3-9s-1.343-9-3-9m0 18c-1.657 0-3-4.03-3-9s1.343-9 3-9m-9 9a9 9 0 019-9" /></svg>' 
              />
              <KeyMetric 
                label="Therapeutic Areas" 
                value={therapeuticAreas.length.toString()} 
                icon='<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" /></svg>' 
              />
            </div>
          </CardBody>
        </Card>
        
        <!-- Recent Milestones -->
        <Card>
          <CardHeader>
            <h3 class="text-lg font-medium text-gray-900">Recent Milestones</h3>
          </CardHeader>
          <CardBody>
            {milestones.length > 0 ? (
              <Timeline milestones={milestones.slice(0, 5)} />
            ) : (
              <p class="text-gray-500 italic">No recent milestones available.</p>
            )}
          </CardBody>
        </Card>
      </div>

      <!-- Right Column -->
      <div class="space-y-6">
        <!-- Location -->
        <Card>
          <CardHeader>
            <h3 class="text-lg font-medium text-gray-900">Location</h3>
          </CardHeader>
          <CardBody>
            <p class="text-gray-700">{company.address || 'Not specified'}</p>
            <p class="text-gray-700">{company.city}, {company.state} {company.zip}</p>
            <p class="text-gray-700">{company.country}</p>
          </CardBody>
        </Card>

        <!-- Key Therapeutic Areas -->
        <Card>
          <CardHeader>
            <h3 class="text-lg font-medium text-gray-900">Therapeutic Areas</h3>
          </CardHeader>
          <CardBody>
            {therapeuticAreas.length > 0 ? (
              <ul class="space-y-2">
                {therapeuticAreas.slice(0, 5).map(ta => (
                  <li>
                    <a href={`/therapeutic-areas/${ta.slug}`} class="text-blue-600 hover:underline">
                      {ta.name}
                    </a>
                  </li>
                ))}
              </ul>
            ) : (
              <p class="text-gray-500 italic">No therapeutic areas specified.</p>
            )}
          </CardBody>
          {therapeuticAreas.length > 5 && (
            <CardFooter>
              <a href={`/companies/${company.slug}?tab=therapeutic-areas`} class="text-sm text-blue-600 hover:underline">
                View all ({therapeuticAreas.length})
              </a>
            </CardFooter>
          )}
        </Card>
      </div>
    </div>
  </div>
  
  <!-- Products Tab Content -->
  <div slot="products">
    {products.length > 0 ? (
      <Card>
        <CardHeader>
          <h3 class="text-lg font-medium text-gray-900">Company Products</h3>
        </CardHeader>
        <CardBody>
          <DataTable 
            data={products}
            columns={[
              {key: 'name', label: 'Product', render: (value, row) => {
                if (!row || !row.slug || !row.name) return 'Unknown Product';
                return `<a href="/products/${row.slug}" class="text-blue-600 hover:underline">${row.name}</a>`;
              }},
              {key: 'type', label: 'Type'},
              {key: 'stage', label: 'Stage'},
              {key: 'description', label: 'Description', render: (value, row) => {
                if (!row || !row.description) return 'No description';
                return row.description.substring(0, 100) + (row.description.length > 100 ? '...' : '');
              }}
            ]}
          />
        </CardBody>
      </Card>
    ) : (
      <div class="p-8 text-center bg-white rounded-lg shadow">
        <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
        <h3 class="mt-2 text-lg font-medium text-gray-900">No products found</h3>
        <p class="mt-1 text-sm text-gray-500">This company doesn't have any products in our database yet.</p>
      </div>
    )}
  </div>
  
  <!-- Pipeline Tab Content -->
  <div slot="pipeline">
    <div class="space-y-6">
      <Card>
        <CardHeader>
          <h3 class="text-lg font-medium text-gray-900">Pipeline Status</h3>
        </CardHeader>
        <CardBody>
          {pipelineData.length > 0 ? (
            <div class="h-80">
              <PipelineChart data={pipelineData} />
            </div>
          ) : (
            <p class="text-gray-500 italic">No pipeline data available.</p>
          )}
        </CardBody>
      </Card>
      
      <Card>
        <CardHeader>
          <h3 class="text-lg font-medium text-gray-900">Pipeline Products</h3>
        </CardHeader>
        <CardBody>
          {products.length > 0 ? (
            <DataTable 
              data={products}
              columns={[
                {key: 'name', label: 'Product', render: (value, row) => {
                  if (!row || !row.slug || !row.name) return 'Unknown Product';
                  return `<a href="/products/${row.slug}" class="text-blue-600 hover:underline">${row.name}</a>`;
                }},
                {key: 'stage', label: 'Stage'},
                {key: 'description', label: 'Description', render: (value, row) => {
                  if (!row || !row.description) return 'No description';
                  return row.description.substring(0, 100) + (row.description.length > 100 ? '...' : '');
                }}
              ]}
            />
          ) : (
            <p class="text-gray-500 italic">No pipeline products available.</p>
          )}
        </CardBody>
      </Card>
    </div>
  </div>
  
  <!-- Websites Tab Content -->
  <div slot="websites">
    {websites.length > 0 ? (
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {websites.map(website => (
          <WebsiteCard website={website} />
        ))}
      </div>
    ) : (
      <div class="p-8 text-center bg-white rounded-lg shadow">
        <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
        <h3 class="mt-2 text-lg font-medium text-gray-900">No websites found</h3>
        <p class="mt-1 text-sm text-gray-500">This company doesn't have any websites in our database yet.</p>
      </div>
    )}
  </div>
  
  <!-- Financials Tab Content -->
  <div slot="financials">
    {financialData.length > 0 ? (
      <div class="space-y-6">
        <Card>
          <CardHeader>
            <h3 class="text-lg font-medium text-gray-900">Financial Overview</h3>
          </CardHeader>
          <CardBody>
            <div class="h-80">
              <FinancialChart data={financialData} />
            </div>
          </CardBody>
        </Card>
        
        <Card>
          <CardHeader>
            <h3 class="text-lg font-medium text-gray-900">Financial Data</h3>
          </CardHeader>
          <CardBody>
            <DataTable 
              data={financialData}
              columns={[
                {key: 'year', label: 'Year'},
                {key: 'revenue', label: 'Revenue (B)', render: (item) => `$${item.revenue}B`},
                {key: 'earnings', label: 'Earnings (B)', render: (item) => `$${item.earnings}B`}
              ]}
            />
          </CardBody>
        </Card>
      </div>
    ) : (
      <div class="p-8 text-center bg-white rounded-lg shadow">
        <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
        <h3 class="mt-2 text-lg font-medium text-gray-900">No financial data available</h3>
        <p class="mt-1 text-sm text-gray-500">Financial information for this company has not been added yet.</p>
      </div>
    )}
  </div>
  
  <!-- News Tab Content -->
  <div slot="news">
    {milestones.length > 0 ? (
      <Card>
        <CardHeader>
          <h3 class="text-lg font-medium text-gray-900">News & Milestones</h3>
        </CardHeader>
        <CardBody>
          <Timeline milestones={milestones} />
        </CardBody>
      </Card>
    ) : (
      <div class="p-8 text-center bg-white rounded-lg shadow">
        <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
        <h3 class="mt-2 text-lg font-medium text-gray-900">No news or milestones</h3>
        <p class="mt-1 text-sm text-gray-500">There are no news items or milestones available for this company yet.</p>
      </div>
    )}
  </div>
  
  <!-- Related Companies Tab Content -->
  <div slot="related">
    {relatedCompanies.length > 0 ? (
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {relatedCompanies.map(relatedCompany => (
          <a href={`/companies/${relatedCompany.slug}`} class="block">
            <Card className="h-full hover:shadow-lg transition-shadow">
              <CardBody>
                <div class="flex items-center space-x-4">
                  <div class="w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center text-blue-600 font-bold text-lg">
                    {relatedCompany.name.charAt(0)}
                  </div>
                  <div>
                    <h4 class="text-lg font-medium text-gray-900">{relatedCompany.name}</h4>
                    <p class="text-sm text-gray-500">{relatedCompany.relationshipType || 'Related company'}</p>
                  </div>
                </div>
              </CardBody>
            </Card>
          </a>
        ))}
      </div>
    ) : (
      <div class="p-8 text-center bg-white rounded-lg shadow">
        <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
        <h3 class="mt-2 text-lg font-medium text-gray-900">No related companies</h3>
        <p class="mt-1 text-sm text-gray-500">There are no related companies available for this company yet.</p>
      </div>
    )}
  </div>
</EntityDetailLayout>