---
/**
 * Website Detail Page
 * 
 * Displays detailed information about a specific pharmaceutical website,
 * including analytics, content analysis, and related entities.
 */
import EntityDetailLayout from '../../layouts/EntityDetailLayout.astro';
import WebsiteAnalytics from '../../components/organisms/WebsiteAnalytics.astro';
import WebsiteContentAnalysis from '../../components/organisms/WebsiteContentAnalysis.astro';
import WebsiteScreenshots from '../../components/organisms/WebsiteScreenshots.astro';
import WebsiteMetadata from '../../components/organisms/WebsiteMetadata.astro';
import RelatedEntities from '../../components/organisms/RelatedEntities.astro';
import DataSourceVisualizer from '../../components/DataSourceVisualizer.astro';
import Badge from '../../components/atoms/Badge.astro';
import Card from '../../components/atoms/Card.astro';
import CardHeader from '../../components/atoms/CardHeader.astro';
import CardBody from '../../components/atoms/CardBody.astro';

// Import utilities
import { getWebsiteBySlug, getRelatedWebsites } from '../../lib/utils/websiteUtils';
import { getCompanyByWebsiteId } from '../../lib/utils/companyUtils';
import { getProductsByWebsiteId } from '../../lib/utils/productUtils';
import { getTherapeuticAreasByWebsiteId } from '../../lib/utils/therapeuticAreaUtils';
import { formatDate } from '../../lib/utils/dateUtils';
import type { Website } from '../../interfaces/entities';

// Set prerender to false for dynamic content
export const prerender = false;

// Get website slug from URL
const { slug } = Astro.params;
if (!slug) {
  return Astro.redirect('/404');
}

// Fetch website data
const website = await getWebsiteBySlug(slug);
if (!website) {
  return Astro.redirect('/404');
}

// Fetch related entities
const company = await getCompanyByWebsiteId(website.id);
const products = await getProductsByWebsiteId(website.id);
const therapeuticAreas = await getTherapeuticAreasByWebsiteId(website.id);
const relatedWebsites = await getRelatedWebsites(website.id);

// Set up breadcrumbs
const breadcrumbItems = [
  { label: 'Home', href: '/' },
  { label: 'Websites', href: '/websites' },
  { label: website.name || website.url, href: `/websites/${slug}`, isActive: true }
];

// Format website type for display
const websiteTypeDisplay = website.type ? 
  website.type.charAt(0).toUpperCase() + website.type.slice(1).replace(/_/g, ' ') : 
  'Unknown';

// Define tabs with conditional counts
const tabs = [
  { 
    id: 'overview', 
    label: 'Overview', 
    count: null,
    icon: '<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>'
  },
  { 
    id: 'company', 
    label: 'Company', 
    count: company ? 1 : null,
    icon: '<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4" /></svg>'
  },
  { 
    id: 'products', 
    label: 'Products', 
    count: products.length > 0 ? products.length : null,
    icon: '<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19.428 15.428a2 2 0 00-1.022-.547l-2.387-.477a6 6 0 00-3.86.517l-.318.158a6 6 0 01-3.86.517L6.05 15.21a2 2 0 00-1.806.547M8 4h8l-1 1v5.172a2 2 0 00.586 1.414l5 5c1.26 1.26.367 3.414-1.415 3.414H4.828c-1.782 0-2.674-2.154-1.414-3.414l5-5A2 2 0 009 10.172V5L8 4z" /></svg>'
  },
  { 
    id: 'therapeutic-areas', 
    label: 'Therapeutic Areas', 
    count: therapeuticAreas.length > 0 ? therapeuticAreas.length : null,
    icon: '<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 11.5V14m0-2.5v-6a1.5 1.5 0 113 0m-3 6a1.5 1.5 0 00-3 0v2a7.5 7.5 0 0015 0v-5a1.5 1.5 0 013 0m-3-3.5v3m0 0v3m0-3h-3m3 0h3M4 21h16" /></svg>'
  },
  { 
    id: 'related', 
    label: 'Related Websites', 
    count: relatedWebsites.length > 0 ? relatedWebsites.length : null,
    icon: '<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9a9 9 0 01-9-9m9 9c1.657 0 3-4.03 3-9s-1.343-9-3-9m0 18c-1.657 0-3-4.03-3-9s1.343-9 3-9m-9 9a9 9 0 019-9" /></svg>'
  }
];

// Get active tab from URL query parameter or default to 'overview'
const activeTab = Astro.url.searchParams.get('tab') || 'overview';

// Website icon SVG
const websiteIcon = `<svg xmlns="http://www.w3.org/2000/svg" class="h-10 w-10 text-purple-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9a9 9 0 01-9-9m9 9c1.657 0 3-4.03 3-9s-1.343-9-3-9m0 18c-1.657 0-3-4.03-3-9s1.343-9 3-9m-9 9a9 9 0 019-9" />
</svg>`;
---

<EntityDetailLayout
  title={`${website.name || website.url} - Website | MyTopPharma`}
  description={`Detailed information about ${website.name || website.url} website`}
  currentPath={`/websites/${slug}`}
  breadcrumbs={breadcrumbItems}
  gradientFrom="purple-500"
  gradientTo="purple-600"
  tabs={tabs}
  activeTab={activeTab}
  logoUrl={website.screenshotUrl}
  entityName={website.name || website.url}
  entitySubtitle={website.url}
>
  <!-- Action Buttons -->
  <div slot="action-buttons" class="flex space-x-3">
    <a
      href={website.url}
      target="_blank"
      rel="noopener noreferrer"
      class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-purple-600 hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500"
    >
      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
      </svg>
      Visit Website
    </a>
  </div>

  <!-- Entity Badges -->
  <div slot="entity-badges" class="flex flex-wrap gap-2">
    <Badge color="purple">{websiteTypeDisplay}</Badge>
    {website.languages && website.languages.length > 0 && website.languages.map(lang => (
      <Badge color="gray">{lang}</Badge>
    ))}
    {website.lastUpdated && (
      <Badge color="blue">Last Updated: {formatDate(website.lastUpdated)}</Badge>
    )}
  </div>

  <!-- Overview Tab Content -->
  <div slot="overview">
    <div class="space-y-6">
      <Card>
        <CardHeader>
          <h3 class="text-lg font-medium text-gray-900">Website Overview</h3>
        </CardHeader>
        <CardBody>
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <h4 class="text-sm font-medium text-gray-500">URL</h4>
              <p class="text-gray-900 break-all">
                <a href={website.url} target="_blank" rel="noopener noreferrer" class="text-purple-600 hover:text-purple-800 hover:underline">
                  {website.url}
                </a>
              </p>
            </div>
            <div>
              <h4 class="text-sm font-medium text-gray-500">Type</h4>
              <p class="text-gray-900">{websiteTypeDisplay}</p>
            </div>
            {website.languages && website.languages.length > 0 && (
              <div>
                <h4 class="text-sm font-medium text-gray-500">Languages</h4>
                <p class="text-gray-900">{website.languages.join(', ')}</p>
              </div>
            )}
            {website.createdAt && (
              <div>
                <h4 class="text-sm font-medium text-gray-500">Created</h4>
                <p class="text-gray-900">{formatDate(website.createdAt)}</p>
              </div>
            )}
            {website.lastUpdated && (
              <div>
                <h4 class="text-sm font-medium text-gray-500">Last Updated</h4>
                <p class="text-gray-900">{formatDate(website.lastUpdated)}</p>
              </div>
            )}
          </div>
          
          {website.description && (
            <div class="mt-4">
              <h4 class="text-sm font-medium text-gray-500">Description</h4>
              <p class="text-gray-900 mt-1">{website.description}</p>
            </div>
          )}
        </CardBody>
      </Card>
      
      {website.screenshotUrl && (
        <Card>
          <CardHeader>
            <h3 class="text-lg font-medium text-gray-900">Preview</h3>
          </CardHeader>
          <CardBody>
            <div class="aspect-[16/9] bg-gray-100 rounded-lg overflow-hidden">
              <img 
                src={website.screenshotUrl} 
                alt={`Screenshot of ${website.name || website.url}`} 
                class="w-full h-full object-contain"
              />
            </div>
          </CardBody>
        </Card>
      )}
    </div>
  </div>

  <!-- Company Tab Content -->
  <div slot="company">
    {company ? (
      <Card>
        <CardHeader>
          <h3 class="text-lg font-medium text-gray-900">Owner Company</h3>
        </CardHeader>
        <CardBody>
          <div class="flex items-center">
            <div class="flex-shrink-0 mr-4">
              {company.logoUrl ? (
                <img src={company.logoUrl} alt={company.name} class="h-16 w-16 object-contain" />
              ) : (
                <div class="h-16 w-16 bg-blue-100 rounded-lg flex items-center justify-center">
                  <span class="text-blue-600 text-xl font-bold">{company.name.charAt(0)}</span>
                </div>
              )}
            </div>
            <div>
              <h3 class="text-lg font-medium text-gray-900">{company.name}</h3>
              {company.tickerSymbol && (
                <p class="text-sm text-gray-500">
                  {company.tickerSymbol} &bull; {company.stockExchange || 'Stock Exchange'}
                </p>
              )}
              <div class="mt-2">
                <a 
                  href={`/companies/${company.slug}`} 
                  class="inline-flex items-center text-sm text-blue-600 hover:text-blue-800 hover:underline"
                >
                  View Company Details
                </a>
              </div>
            </div>
          </div>
        </CardBody>
      </Card>
    ) : (
      <div class="p-8 text-center bg-white rounded-lg shadow">
        <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
        <h3 class="mt-2 text-lg font-medium text-gray-900">No company information</h3>
        <p class="mt-1 text-sm text-gray-500">There is no company associated with this website yet.</p>
      </div>
    )}
  </div>

  <!-- Products Tab Content -->
  <div slot="products">
    {products.length > 0 ? (
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {products.map(product => (
          <Card>
            <CardBody>
              <h3 class="font-medium text-gray-900">{product.name}</h3>
              {product.description && (
                <p class="mt-1 text-sm text-gray-500 line-clamp-2">{product.description}</p>
              )}
              <div class="mt-4 flex justify-end">
                <a 
                  href={`/products/${product.slug}`} 
                  class="text-sm font-medium text-green-600 hover:text-green-800"
                >
                  View Product &rarr;
                </a>
              </div>
            </CardBody>
          </Card>
        ))}
      </div>
    ) : (
      <div class="p-8 text-center bg-white rounded-lg shadow">
        <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
        <h3 class="mt-2 text-lg font-medium text-gray-900">No products found</h3>
        <p class="mt-1 text-sm text-gray-500">There are no products associated with this website yet.</p>
      </div>
    )}
  </div>

  <!-- Therapeutic Areas Tab Content -->
  <div slot="therapeutic-areas">
    {therapeuticAreas.length > 0 ? (
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {therapeuticAreas.map(area => (
          <Card>
            <CardBody>
              <div class="flex items-center mb-3">
                <div class="h-10 w-10 flex-shrink-0 rounded-full bg-amber-100 flex items-center justify-center mr-3">
                  <span class="text-lg font-medium text-amber-600">{area.name.charAt(0)}</span>
                </div>
                <div>
                  <h3 class="font-medium text-gray-900">{area.name}</h3>
                </div>
              </div>
              {area.description && (
                <p class="text-sm text-gray-500 mb-4 line-clamp-2">{area.description}</p>
              )}
              <div class="flex justify-end">
                <a href={`/therapeutic-areas/${area.slug}`} class="text-sm font-medium text-amber-600 hover:text-amber-800">
                  View Area &rarr;
                </a>
              </div>
            </CardBody>
          </Card>
        ))}
      </div>
    ) : (
      <div class="p-8 text-center bg-white rounded-lg shadow">
        <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
        <h3 class="mt-2 text-lg font-medium text-gray-900">No therapeutic areas found</h3>
        <p class="mt-1 text-sm text-gray-500">There are no therapeutic areas associated with this website yet.</p>
      </div>
    )}
  </div>

  <!-- Related Websites Tab Content -->
  <div slot="related">
    {relatedWebsites.length > 0 ? (
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {relatedWebsites.map(relatedSite => (
          <Card>
            <CardBody>
              <div class="flex items-center mb-3">
                {relatedSite.screenshotUrl ? (
                  <img 
                    src={relatedSite.screenshotUrl} 
                    alt={relatedSite.name || relatedSite.url} 
                    class="h-10 w-10 object-cover rounded-lg mr-3" 
                  />
                ) : (
                  <div class="h-10 w-10 bg-purple-100 rounded-lg flex items-center justify-center mr-3">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-purple-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9a9 9 0 01-9-9m9 9c1.657 0 3-4.03 3-9s-1.343-9-3-9m0 18c-1.657 0-3-4.03-3-9s1.343-9 3-9m-9 9a9 9 0 019-9" />
                    </svg>
                  </div>
                )}
                <div>
                  <h3 class="font-medium text-gray-900">{relatedSite.name || relatedSite.url}</h3>
                  <p class="text-xs text-gray-500 truncate">{relatedSite.url}</p>
                </div>
              </div>
              <div class="flex justify-between mt-2">
                <a 
                  href={relatedSite.url} 
                  target="_blank" 
                  rel="noopener noreferrer" 
                  class="text-xs text-gray-600 hover:text-gray-800"
                >
                  Visit Website
                </a>
                <a 
                  href={`/websites/${relatedSite.slug}`} 
                  class="text-sm font-medium text-purple-600 hover:text-purple-800"
                >
                  View Details &rarr;
                </a>
              </div>
            </CardBody>
          </Card>
        ))}
      </div>
    ) : (
      <div class="p-8 text-center bg-white rounded-lg shadow">
        <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
        <h3 class="mt-2 text-lg font-medium text-gray-900">No related websites found</h3>
        <p class="mt-1 text-sm text-gray-500">There are no related websites for this website yet.</p>
      </div>
    )}
  </div>

  <!-- Data Source Visualizer -->
  <div slot="data-source">
    <DataSourceVisualizer />
  </div>
</EntityDetailLayout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Website-specific functionality can go here
  });
</script> 