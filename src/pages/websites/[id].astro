---
/**
 * Website Detail Page
 * 
 * Displays detailed information about a pharmaceutical website,
 * organized in tabbed sections for overview, technical info, ownership, and content details.
 */
import DashboardLayout from '../../components/templates/DashboardLayout.astro';
import Card from '../../components/atoms/Card.astro';
import Button from '../../components/atoms/Button.astro';
import TabGroup from '../../components/molecules/TabGroup.astro';
import KeyMetric from '../../components/molecules/KeyMetric.astro';
import { websites, getWebsiteById, websiteCategories } from '../../data/websites';
import { getCompanyById } from '../../data/companies';
import { getProductById } from '../../data/products';

// Generate static paths for all websites
export function getStaticPaths() {
  return websites.map(website => ({
    params: { id: website.domain.replace(/[^a-zA-Z0-9-]/g, '-').toLowerCase() }, // URL-safe version of domain
    props: { website }
  }));
}

// Get website from props or by domain-based ID
const { id } = Astro.params;
const website = Astro.props.website || websites.find(w => 
  w.domain.replace(/[^a-zA-Z0-9-]/g, '-').toLowerCase() === id
);

// Handle case when website is not found
if (!website) {
  return new Response(null, {
    status: 302,
    headers: {
      'Location': '/websites'
    }
  });
}

// Get the owning company
const company = getCompanyById(website.companyId);

// Get products associated with this website
const associatedProducts = website.products ? website.products.map(productId => {
  return getProductById(productId);
}).filter(product => product !== undefined) : [];

// Default tab is "overview"
const activeTab = "overview";

// Define tabs with new sections
const tabs = [
  { id: "overview", label: "Overview", icon: '<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>' },
  { id: "technical", label: "Technical Details", icon: '<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 20l4-16m4 4l4 4-4 4M6 16l-4-4 4-4" /></svg>' },
  { id: "features", label: "Features & Functionality", icon: '<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" /></svg>' },
  { id: "ownership", label: "Ownership & Links", icon: '<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" /></svg>' },
  { id: "content", label: "Content & Compliance", icon: '<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z" /></svg>' },
];

// Get category label
const getCategoryLabel = (categoryId: string) => {
  const category = websiteCategories.find(c => c.value === categoryId);
  return category ? category.label : categoryId;
};

// Format date to readable format
const formatDate = (dateString?: string) => {
  if (!dateString) return 'Not available';
  const date = new Date(dateString);
  return new Intl.DateTimeFormat('en-US', { 
    year: 'numeric', 
    month: 'long', 
    day: 'numeric' 
  }).format(date);
};

// Breadcrumbs for website detail page
const breadcrumbs = [
  { label: 'Home', href: '/' },
  { label: 'Websites', href: '/websites' },
  { label: website.domain, href: `/websites/${id}`, isActive: true },
];
---

<DashboardLayout 
  title={`${website.domain} | Website Details | Top Pharma`}
  description={`Detailed information about ${website.domain} pharmaceutical website`}
  currentPath={`/websites/${id}`}
  breadcrumbs={breadcrumbs}
>
  <div class="space-y-6">
    <!-- Page header -->
    <div class="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4 mb-4">
      <div>
        <div class="flex items-center gap-2">
          <h1 class="text-2xl font-bold text-gray-900">{website.domain}</h1>
          <span class="inline-flex items-center rounded-full bg-blue-50 px-2 py-1 text-xs font-medium text-blue-700">
            {getCategoryLabel(website.category)}
          </span>
        </div>
        {website.siteName && (
          <p class="mt-1 text-lg text-gray-700">{website.siteName}</p>
        )}
      </div>
      
      <div class="flex items-center gap-3">
        <a href={`https://${website.domain}`} target="_blank" rel="noopener noreferrer" class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500">
          <svg xmlns="http://www.w3.org/2000/svg" class="-ml-1 mr-2 h-5 w-5 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
          </svg>
          Visit Website
        </a>
        <Button>
          <svg xmlns="http://www.w3.org/2000/svg" class="-ml-1 mr-2 h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
          </svg>
          Refresh Data
        </Button>
      </div>
    </div>
    
    <!-- Mobile Tabs for Summary/Screenshot -->
    <div class="lg:hidden">
      <div class="border-b border-gray-200">
        <nav class="-mb-px flex space-x-8" aria-label="Tabs">
          <button
            class="mobile-tab-button whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm border-primary-500 text-primary-600"
            data-tab="summary"
            aria-selected="true"
          >
            Summary
          </button>
          <button
            class="mobile-tab-button whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300"
            data-tab="screenshot"
            aria-selected="false"
          >
            Screenshot
          </button>
        </nav>
      </div>
    </div>
    
    <!-- Two-column Summary and Screenshot -->
    <Card>
      <div class="p-6">
        <div class="flex flex-col lg:flex-row gap-8">
          <!-- Website Summary (Left Column) -->
          <div class="lg:w-2/3 mobile-tab-content" id="summary-content">
            <h2 class="text-xl font-medium text-gray-900 mb-4">Website Summary</h2>
            
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
              <KeyMetric
                label="Category"
                value={getCategoryLabel(website.category)}
                icon='<svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-blue-500" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z" /></svg>'
              />
              
              <KeyMetric
                label="Region"
                value={website.region || 'Global'}
                icon='<svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-blue-500" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3.055 11H5a2 2 0 012 2v1a2 2 0 002 2 2 2 0 012 2v2.945M8 3.935V5.5A2.5 2.5 0 0010.5 8h.5a2 2 0 012 2 2 2 0 104 0 2 2 0 012-2h1.064M15 20.488V18a2 2 0 012-2h3.064M21 12a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>'
              />
            </div>
            
            <div class="mb-6">
              <h3 class="text-sm font-medium text-gray-900 mb-2">Owning Company</h3>
              <div class="flex items-center mb-4">
                {company?.logoUrl && (
                  <img src={company.logoUrl} alt={`${company.name} logo`} class="h-6 mr-2" />
                )}
                <a href={`/companies/${website.companyId}`} class="text-medium text-blue-600 hover:underline font-medium">
                  {company?.name || website.companyId}
                </a>
              </div>
            </div>
            
            <div>
              <h3 class="text-sm font-medium text-gray-900 mb-2">Description</h3>
              <p class="text-gray-700">{website.description || 'No description available.'}</p>
            </div>
            
            <div class="mt-4 text-xs text-gray-500">
              Last updated: {formatDate(website.lastUpdate || website.lastCrawl)}
            </div>
          </div>
          
          <!-- Website Screenshot (Right Column) -->
          <div class="lg:w-1/3 mobile-tab-content hidden lg:block" id="screenshot-content">
            <div class="flex justify-between items-center mb-4">
              <h2 class="text-xl font-medium text-gray-900">Website Preview</h2>
              {website.screenshotUrl && (
                <button 
                  type="button" 
                  class="text-gray-500 hover:text-gray-700 view-screenshot"
                  aria-label="View full screenshot"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                  </svg>
                </button>
              )}
            </div>
            {website.screenshotUrl ? (
              <div class="relative rounded-lg overflow-hidden border border-gray-200 aspect-[4/3]">
                <img 
                  src={website.screenshotUrl} 
                  alt={`Screenshot of ${website.domain}`}
                  class="object-cover w-full h-full cursor-pointer view-screenshot"
                />
                <div class="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/50 to-transparent p-3">
                  <p class="text-white text-xs">Last captured: {formatDate(website.screenshotDate)}</p>
                </div>
              </div>
            ) : (
              <div class="bg-gray-100 rounded-lg p-8 text-center aspect-[4/3] flex items-center justify-center">
                <p class="text-gray-500">Screenshot not available</p>
              </div>
            )}
          </div>
        </div>
      </div>
    </Card>
    
    <!-- Screenshot Modal -->
    <div id="screenshot-modal" class="fixed inset-0 z-50 hidden">
      <div class="absolute inset-0 bg-black/75 backdrop-blur-sm"></div>
      <div class="absolute inset-x-4 inset-y-16 md:inset-x-16 p-4 bg-white rounded-lg shadow-xl flex flex-col">
        <div class="flex justify-between items-center mb-4 p-2">
          <h3 class="text-lg font-medium text-gray-900">{website.domain}</h3>
          <button class="text-gray-500 hover:text-gray-700 close-modal">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>
        <div class="flex-1 overflow-auto">
          {website.screenshotUrl ? (
            <img 
              src={website.screenshotUrl} 
              alt={`Full screenshot of ${website.domain}`}
              class="max-w-full mx-auto"
            />
          ) : (
            <div class="flex items-center justify-center h-full">
              <p class="text-gray-500">Screenshot not available</p>
            </div>
          )}
        </div>
        <div class="mt-4 text-center text-sm text-gray-500">
          Last captured: {formatDate(website.screenshotDate)}
        </div>
      </div>
    </div>
    
    <!-- Tabs -->
    <TabGroup tabs={tabs} activeTab={activeTab} />
    
    <!-- Tab content -->
    <div id="tab-content">
      <!-- Overview Tab -->
      <div id="tab-content-overview" role="tabpanel" aria-labelledby="tab-overview" class="space-y-6">
        <!-- Website Description -->
        <Card>
          <div class="p-6">
            <h2 class="text-xl font-medium text-gray-900 mb-3">About this Website</h2>
            <p class="text-gray-700">{website.description || 'No description available.'}</p>
            
            <div class="mt-4 grid grid-cols-1 md:grid-cols-3 gap-6">
              <KeyMetric
                label="Category"
                value={getCategoryLabel(website.category)}
                icon='<svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-blue-500" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z" /></svg>'
              />
              
              <KeyMetric
                label="Region"
                value={website.region || 'Global'}
                icon='<svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-blue-500" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3.055 11H5a2 2 0 012 2v1a2 2 0 002 2 2 2 0 012 2v2.945M8 3.935V5.5A2.5 2.5 0 0010.5 8h.5a2 2 0 012 2 2 2 0 104 0 2 2 0 012-2h1.064M15 20.488V18a2 2 0 012-2h3.064M21 12a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>'
              />
              
              <KeyMetric
                label="Last Updated"
                value={website.lastCrawl ? formatDate(website.lastCrawl) : 'Never'}
                icon='<svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-blue-500" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>'
              />
            </div>
          </div>
        </Card>
        
        <!-- Subcategories -->
        {website.subcategories && website.subcategories.length > 0 && (
          <Card>
            <div class="p-6">
              <h2 class="text-xl font-medium text-gray-900 mb-3">Subcategories</h2>
              <div class="flex flex-wrap gap-2">
                {website.subcategories.map(subcategory => (
                  <span class="inline-flex items-center rounded-full bg-gray-100 px-3 py-0.5 text-sm font-medium text-gray-800">
                    {subcategory.replace(/-/g, ' ')}
                  </span>
                ))}
              </div>
            </div>
          </Card>
        )}
        
        <!-- Associated Products -->
        {associatedProducts.length > 0 && (
          <Card>
            <div class="p-6">
              <h2 class="text-xl font-medium text-gray-900 mb-3">Associated Products</h2>
              <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {associatedProducts.map(product => (
                  <div class="bg-white rounded-lg border border-gray-200 shadow-sm overflow-hidden">
                    <div class="p-4">
                      <h3 class="font-medium text-gray-900">{product.name}</h3>
                      {product.genericName && (
                        <p class="text-sm text-gray-500 mb-2">{product.genericName}</p>
                      )}
                      <div class="mt-2">
                        <a href={`/products/${product.id}`} class="text-sm text-blue-600 hover:text-blue-800 font-medium">View details</a>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </Card>
        )}
        
        <!-- Therapeutic Areas -->
        {website.therapeuticAreas && website.therapeuticAreas.length > 0 && (
          <Card>
            <div class="p-6">
              <h2 class="text-xl font-medium text-gray-900 mb-3">Therapeutic Areas</h2>
              <div class="flex flex-wrap gap-2">
                {website.therapeuticAreas.map(area => (
                  <a href={`/therapeutic-areas/${area}`} class="inline-flex items-center rounded-full bg-blue-100 px-3 py-0.5 text-sm font-medium text-blue-800 hover:bg-blue-200">
                    {area.replace(/-/g, ' ')}
                  </a>
                ))}
              </div>
            </div>
          </Card>
        )}
      </div>
      
      <!-- Enhanced Technical Details Tab -->
      <div id="tab-content-technical" role="tabpanel" aria-labelledby="tab-technical" class="space-y-6 hidden">
        <Card>
          <div class="p-6">
            <h2 class="text-xl font-medium text-gray-900 mb-3">Technology Stack</h2>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <h3 class="text-sm font-medium text-gray-900 mb-2">Core Technologies</h3>
                <dl class="space-y-4">
                  <div>
                    <dt class="text-sm font-medium text-gray-500">Content Management System</dt>
                    <dd class="mt-1 text-sm text-gray-900">{website.techStack?.cms || 'Not detected'}</dd>
                  </div>
                  <div>
                    <dt class="text-sm font-medium text-gray-500">Frontend Framework</dt>
                    <dd class="mt-1 text-sm text-gray-900">{website.techStack?.framework || 'Not detected'}</dd>
                  </div>
                  <div>
                    <dt class="text-sm font-medium text-gray-500">Server Technology</dt>
                    <dd class="mt-1 text-sm text-gray-900">{website.techStack?.server || 'Not detected'}</dd>
                  </div>
                </dl>
              </div>
              <div>
                <h3 class="text-sm font-medium text-gray-900 mb-2">Third-Party Services</h3>
                <dl class="space-y-4">
                  <div>
                    <dt class="text-sm font-medium text-gray-500">Analytics Platform</dt>
                    <dd class="mt-1 text-sm text-gray-900">{website.techStack?.analytics || 'Not detected'}</dd>
                  </div>
                  <div>
                    <dt class="text-sm font-medium text-gray-500">Email Service Provider</dt>
                    <dd class="mt-1 text-sm text-gray-900">{website.techStack?.emailService || 'Not detected'}</dd>
                  </div>
                  <div>
                    <dt class="text-sm font-medium text-gray-500">Marketing Automation</dt>
                    <dd class="mt-1 text-sm text-gray-900">{website.techStack?.marketingAutomation || 'Not detected'}</dd>
                  </div>
                </dl>
              </div>
            </div>
          </div>
        </Card>
        
        <Card>
          <div class="p-6">
            <h2 class="text-xl font-medium text-gray-900 mb-3">Hosting Information</h2>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <dl class="space-y-4">
                  <div>
                    <dt class="text-sm font-medium text-gray-500">Provider</dt>
                    <dd class="mt-1 text-sm text-gray-900">{website.hosting?.provider || 'Not available'}</dd>
                  </div>
                  <div>
                    <dt class="text-sm font-medium text-gray-500">IP Address</dt>
                    <dd class="mt-1 text-sm text-gray-900">{website.hosting?.ip || 'Not available'}</dd>
                  </div>
                  <div>
                    <dt class="text-sm font-medium text-gray-500">Registrar</dt>
                    <dd class="mt-1 text-sm text-gray-900">{website.hosting?.registrar || 'Not available'}</dd>
                  </div>
                </dl>
              </div>
              <div>
                <dl class="space-y-4">
                  <div>
                    <dt class="text-sm font-medium text-gray-500">Registration Date</dt>
                    <dd class="mt-1 text-sm text-gray-900">{website.hosting?.registrationDate ? formatDate(website.hosting.registrationDate) : 'Not available'}</dd>
                  </div>
                  <div>
                    <dt class="text-sm font-medium text-gray-500">Expiration Date</dt>
                    <dd class="mt-1 text-sm text-gray-900">{website.hosting?.expirationDate ? formatDate(website.hosting.expirationDate) : 'Not available'}</dd>
                  </div>
                  <div>
                    <dt class="text-sm font-medium text-gray-500">Domain Status</dt>
                    <dd class="mt-1 text-sm text-gray-900">
                      {website.hosting?.expirationDate ? (
                        <span class="inline-flex items-center rounded-full bg-green-100 px-2.5 py-0.5 text-xs font-medium text-green-800">
                          Active
                        </span>
                      ) : (
                        <span class="inline-flex items-center rounded-full bg-gray-100 px-2.5 py-0.5 text-xs font-medium text-gray-800">
                          Unknown
                        </span>
                      )}
                    </dd>
                  </div>
                </dl>
              </div>
            </div>
          </div>
        </Card>
      </div>
      
      <!-- New Features & Functionality Tab -->
      <div id="tab-content-features" role="tabpanel" aria-labelledby="tab-features" class="space-y-6 hidden">
        <Card>
          <div class="p-6">
            <h2 class="text-xl font-medium text-gray-900 mb-3">Core Features</h2>
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {website.features?.map(feature => (
                <div class="bg-gray-50 rounded-lg p-4">
                  <div class="flex items-start">
                    <div class="flex-shrink-0">
                      <svg class="h-6 w-6 text-green-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                      </svg>
                    </div>
                    <div class="ml-3">
                      <h3 class="text-sm font-medium text-gray-900">{feature.name}</h3>
                      <p class="mt-1 text-sm text-gray-500">{feature.description}</p>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </Card>
      </div>
      
      <!-- Ownership Tab -->
      <div id="tab-content-ownership" role="tabpanel" aria-labelledby="tab-ownership" class="space-y-6 hidden">
        <Card>
          <div class="p-6">
            <h2 class="text-xl font-medium text-gray-900 mb-3">Company Information</h2>
            {company ? (
              <div class="flex flex-col md:flex-row gap-6">
                <div class="md:w-1/3">
                  {company.logoUrl && (
                    <img src={company.logoUrl} alt={`${company.name} logo`} class="h-16 mb-4" />
                  )}
                  <h3 class="text-lg font-medium text-gray-900">{company.name}</h3>
                  <p class="text-sm text-gray-500 mt-1">{company.headquarters}</p>
                  
                  <div class="mt-4">
                    <a href={`/companies/${company.id}`} class="inline-flex items-center text-sm font-medium text-blue-600 hover:text-blue-800">
                      View company details
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 ml-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                      </svg>
                    </a>
                  </div>
                </div>
                <div class="md:w-2/3">
                  <p class="text-gray-700">{company.description}</p>
                  
                  <div class="mt-4">
                    <h4 class="text-sm font-medium text-gray-900">Therapeutic Focus</h4>
                    <div class="mt-2 flex flex-wrap gap-2">
                      {company.therapeuticAreas.map(area => (
                        <a href={`/therapeutic-areas/${area}`} class="inline-flex items-center rounded-full bg-blue-100 px-3 py-0.5 text-sm font-medium text-blue-800 hover:bg-blue-200">
                          {area.replace(/-/g, ' ')}
                        </a>
                      ))}
                    </div>
                  </div>
                </div>
              </div>
            ) : (
              <p class="text-gray-700">Company information not available.</p>
            )}
          </div>
        </Card>
        
        {associatedProducts.length > 0 && (
          <Card>
            <div class="p-6">
              <h2 class="text-xl font-medium text-gray-900 mb-3">Associated Products</h2>
              <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {associatedProducts.map(product => (
                  <div class="bg-white rounded-lg border border-gray-200 shadow-sm overflow-hidden">
                    <div class="p-4">
                      <h3 class="font-medium text-gray-900">{product.name}</h3>
                      {product.genericName && (
                        <p class="text-sm text-gray-500 mb-2">{product.genericName}</p>
                      )}
                      <div class="mt-2">
                        <a href={`/products/${product.id}`} class="text-sm text-blue-600 hover:text-blue-800 font-medium">View details</a>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </Card>
        )}
      </div>
      
      <!-- Enhanced Content & Compliance Tab -->
      <div id="tab-content-content" role="tabpanel" aria-labelledby="tab-content" class="space-y-6 hidden">
        <!-- Legal Content Display -->
        <Card>
          <div class="p-6">
            <h2 class="text-xl font-medium text-gray-900 mb-3">Legal Content</h2>
            <div class="space-y-6">
              {website.legalContent?.map(content => (
                <div class="space-y-3">
                  <h3 class="text-sm font-medium text-gray-900">{content.type}</h3>
                  <div class="bg-gray-50 rounded-lg p-4 border border-gray-200">
                    <div class="prose prose-sm max-w-none">
                      {content.text}
                    </div>
                    {content.url && (
                      <div class="mt-3">
                        <a href={content.url} target="_blank" rel="noopener noreferrer" class="text-sm text-blue-600 hover:text-blue-800">
                          View original document →
                        </a>
                      </div>
                    )}
                    <div class="mt-2 text-xs text-gray-500">
                      Last updated: {formatDate(content.lastUpdated)}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </Card>
        
        <Card>
          <div class="p-6">
            <h2 class="text-xl font-medium text-gray-900 mb-3">Content Classification</h2>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <h3 class="text-sm font-medium text-gray-900 mb-2">Primary Category</h3>
                <div class="flex items-center">
                  <span class="inline-flex items-center rounded-full bg-blue-100 px-3 py-0.5 text-sm font-medium text-blue-800">
                    {getCategoryLabel(website.category)}
                  </span>
                </div>
              </div>
              
              <div>
                <h3 class="text-sm font-medium text-gray-900 mb-2">Target Region</h3>
                <div class="flex items-center">
                  <span class="inline-flex items-center rounded-full bg-gray-100 px-3 py-0.5 text-sm font-medium text-gray-800">
                    {website.region || 'Global'}
                  </span>
                </div>
              </div>
            </div>
            
            {website.subcategories && website.subcategories.length > 0 && (
              <div class="mt-6">
                <h3 class="text-sm font-medium text-gray-900 mb-2">Subcategories</h3>
                <div class="flex flex-wrap gap-2">
                  {website.subcategories.map(subcategory => (
                    <span class="inline-flex items-center rounded-full bg-gray-100 px-3 py-0.5 text-sm font-medium text-gray-800">
                      {subcategory.replace(/-/g, ' ')}
                    </span>
                  ))}
                </div>
              </div>
            )}
          </div>
        </Card>
      </div>
    </div>
  </div>
</DashboardLayout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Mobile tab switching
    const mobileTabButtons = document.querySelectorAll('.mobile-tab-button');
    const tabContents = document.querySelectorAll('.mobile-tab-content');
    
    mobileTabButtons.forEach(button => {
      button.addEventListener('click', () => {
        const tabId = button.getAttribute('data-tab');
        
        // Update active button
        mobileTabButtons.forEach(btn => {
          btn.classList.remove('border-primary-500', 'text-primary-600');
          btn.classList.add('border-transparent', 'text-gray-500', 'hover:text-gray-700', 'hover:border-gray-300');
          btn.setAttribute('aria-selected', 'false');
        });
        
        button.classList.remove('border-transparent', 'text-gray-500', 'hover:text-gray-700', 'hover:border-gray-300');
        button.classList.add('border-primary-500', 'text-primary-600');
        button.setAttribute('aria-selected', 'true');
        
        // Show corresponding content
        tabContents.forEach(content => {
          content.classList.add('hidden');
        });
        
        document.getElementById(`${tabId}-content`)?.classList.remove('hidden');
      });
    });
    
    // Screenshot modal functionality
    const modal = document.getElementById('screenshot-modal');
    const viewButtons = document.querySelectorAll('.view-screenshot');
    const closeButtons = document.querySelectorAll('.close-modal');
    
    viewButtons.forEach(button => {
      button.addEventListener('click', () => {
        modal?.classList.remove('hidden');
        document.body.classList.add('overflow-hidden');
      });
    });
    
    function closeModal() {
      modal?.classList.add('hidden');
      document.body.classList.remove('overflow-hidden');
    }
    
    closeButtons.forEach(button => {
      button.addEventListener('click', closeModal);
    });
    
    // Close modal when clicking outside the content
    modal?.addEventListener('click', (e) => {
      if (e.target === modal) {
        closeModal();
      }
    });
    
    // Close modal with escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        closeModal();
      }
    });
    
    // Tab switching functionality
    const tabLinks = document.querySelectorAll('[role="tab"]');
    const tabPanels = document.querySelectorAll('[role="tabpanel"]');
    
    tabLinks.forEach(tabLink => {
      tabLink.addEventListener('click', (e) => {
        e.preventDefault();
        
        // Get the tab ID from the href attribute
        const tabId = tabLink.getAttribute('href')?.substring(1);
        
        // Hide all tab panels
        tabPanels.forEach(panel => {
          panel.classList.add('hidden');
          
          // Remove aria-selected from all tabs
          tabLinks.forEach(link => {
            link.setAttribute('aria-selected', 'false');
            link.setAttribute('tabindex', '-1');
            link.classList.remove('border-primary-500', 'text-primary-600');
            link.classList.add('border-transparent', 'text-gray-500', 'hover:text-gray-700', 'hover:border-gray-300');
          });
        });
        
        // Show the selected tab panel
        const selectedPanel = document.getElementById(`tab-content-${tabId}`);
        if (selectedPanel) {
          selectedPanel.classList.remove('hidden');
        }
        
        // Update the selected tab attributes
        tabLink.setAttribute('aria-selected', 'true');
        tabLink.setAttribute('tabindex', '0');
        tabLink.classList.remove('border-transparent', 'text-gray-500', 'hover:text-gray-700', 'hover:border-gray-300');
        tabLink.classList.add('border-primary-500', 'text-primary-600');
      });
    });
  });
</script> 