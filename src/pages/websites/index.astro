---
/**
 * Websites List Page
 * 
 * Displays a searchable, filterable grid of pharmaceutical websites
 * with options to sort and filter by various criteria.
 */
import DashboardLayout from '../../components/templates/DashboardLayout.astro';
import WebsiteCard from '../../components/molecules/WebsiteCard.astro';
import FilterBar from '../../components/molecules/FilterBar.astro';
import SortSelect from '../../components/molecules/SortSelect.astro';
import Card from '../../components/atoms/Card.astro';

// Import utilities instead of direct Supabase access
import { getWebsites, getWebsiteFilters } from '../../lib/utils/websiteUtils';
import type { WebsiteFilters } from '../../interfaces/filters';

// Explicitly set to false to avoid warnings about getStaticPaths being ignored
export const prerender = false;

// Get URL search parameters for filtering
const { searchParams } = Astro.url;
const search = searchParams.get('search') || '';
const companyParam = searchParams.get('company');
const companyId = companyParam ? parseInt(companyParam) : null;
const typeParam = searchParams.get('type');
const therapeuticAreaParam = searchParams.get('area');
const therapeuticAreaId = therapeuticAreaParam ? parseInt(therapeuticAreaParam) : null;
const sortParam = searchParams.get('sort') || 'name_asc';

// Fetch websites with filtering and pagination
const filters: WebsiteFilters = {
  search: search || undefined,
  companyId: companyId || undefined,
  websiteType: typeParam || undefined,
  therapeuticAreaId: therapeuticAreaId || undefined
};

// Get websites with filtering
const { websites, totalCount } = await getWebsites(filters, sortParam, 1, 50);

// Get filter options (companies, website types, therapeutic areas)
const filterOptions = await getWebsiteFilters();

// Set up sort options
const sortOptions = [
  { value: 'name_asc', label: 'Name (A-Z)' },
  { value: 'name_desc', label: 'Name (Z-A)' },
  { value: 'created_at_desc', label: 'Newest first' },
  { value: 'created_at_asc', label: 'Oldest first' }
];

// Helper function to update URL search params
const updateUrlParams = (params: Record<string, string | null>) => {
  const newParams = new URLSearchParams(searchParams.toString());
  
  // Update params
  Object.entries(params).forEach(([key, value]) => {
    if (value === null) {
      newParams.delete(key);
    } else {
      newParams.set(key, value);
    }
  });
  
  return newParams.toString();
};

// Set up breadcrumbs
const breadcrumbItems = [
  { label: 'Home', href: '/' },
  { label: 'Websites', href: '/websites', isActive: true }
];
---

<DashboardLayout 
  title="Pharmaceutical Websites | MyTopPharma"
  description="Browse and search for pharmaceutical company websites, product sites, and disease awareness portals."
  currentPath="/websites"
  breadcrumbs={breadcrumbItems}
>
  <div class="space-y-6">
    <!-- Page Header -->
    <div class="flex flex-col md:flex-row md:items-center justify-between gap-4">
      <div>
        <h1 class="text-2xl font-bold text-gray-900">Pharmaceutical Websites</h1>
        <p class="mt-1 text-sm text-gray-500">
          Browse corporate, healthcare professional, patient and campaign websites from top pharmaceutical companies
        </p>
      </div>
    </div>
    
    <!-- Filter Section -->
    <Card>
      <div class="p-4">
        <FilterBar>
          <!-- Search Field -->
          <div class="col-span-12 sm:col-span-6 lg:col-span-4">
            <label for="search" class="block text-sm font-medium text-gray-700">Search</label>
            <div class="mt-1 relative rounded-md shadow-sm">
              <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                </svg>
              </div>
              <input
                type="text"
                name="search"
                id="search"
                class="focus:ring-indigo-500 focus:border-indigo-500 block w-full pl-10 sm:text-sm border-gray-300 rounded-md"
                placeholder="Search websites..."
                value={search}
                onchange="window.location.href = '?' + new URLSearchParams(Object.assign(
                  Object.fromEntries(new URLSearchParams(window.location.search)),
                  {search: this.value || null}
                )).toString()"
              />
            </div>
          </div>
          
          <!-- Company Filter -->
          <div class="col-span-12 sm:col-span-6 lg:col-span-2">
            <label for="company" class="block text-sm font-medium text-gray-700">Company</label>
            <select
              id="company"
              name="company"
              class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md"
              onchange="window.location.href = '?' + new URLSearchParams(Object.assign(
                Object.fromEntries(new URLSearchParams(window.location.search)),
                {company: this.value || null}
              )).toString()"
            >
              <option value="">All Companies</option>
              {filterOptions.companies.map(company => (
                <option value={company.id} selected={companyId === company.id}>
                  {company.name} ({company.count})
                </option>
              ))}
            </select>
          </div>
          
          <!-- Website Type Filter -->
          <div class="col-span-12 sm:col-span-6 lg:col-span-2">
            <label for="type" class="block text-sm font-medium text-gray-700">Website Type</label>
            <select
              id="type"
              name="type"
              class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md"
              onchange="window.location.href = '?' + new URLSearchParams(Object.assign(
                Object.fromEntries(new URLSearchParams(window.location.search)),
                {type: this.value || null}
              )).toString()"
            >
              <option value="">All Types</option>
              {filterOptions.websiteTypes.map(type => (
                <option value={type.id} selected={typeParam === type.id}>
                  {type.name} ({type.count})
                </option>
              ))}
            </select>
          </div>
          
          <!-- Therapeutic Area Filter -->
          <div class="col-span-12 sm:col-span-6 lg:col-span-2">
            <label for="area" class="block text-sm font-medium text-gray-700">Therapeutic Area</label>
            <select
              id="area"
              name="area"
              class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md"
              onchange="window.location.href = '?' + new URLSearchParams(Object.assign(
                Object.fromEntries(new URLSearchParams(window.location.search)),
                {area: this.value || null}
              )).toString()"
            >
              <option value="">All Therapeutic Areas</option>
              {filterOptions.therapeuticAreas.map(area => (
                <option value={area.id} selected={therapeuticAreaId === area.id}>
                  {area.name} ({area.count})
                </option>
              ))}
            </select>
          </div>
          
          <!-- Sort Order -->
          <div class="col-span-12 sm:col-span-6 lg:col-span-2">
            <label for="sort" class="block text-sm font-medium text-gray-700">Sort By</label>
            <SortSelect
              id="sort"
              name="sort"
              options={sortOptions}
              selectedValue={sortParam}
            />
          </div>
        </FilterBar>
      </div>
    </Card>
    
    <!-- Results Count and Clear Filters -->
    <div class="flex justify-between items-center">
      <p class="text-sm text-gray-500">
        Showing <span class="font-medium">{websites.length}</span> of <span class="font-medium">{totalCount}</span> websites
      </p>
      
      {(search || companyId || typeParam || therapeuticAreaId) && (
        <a href="/websites" class="inline-flex items-center px-3 py-1 border border-gray-300 text-sm leading-5 font-medium rounded-md text-gray-700 bg-white hover:text-gray-500 focus:outline-none focus:border-blue-300 focus:shadow-outline-blue active:text-gray-800 active:bg-gray-50 transition ease-in-out duration-150">
          <svg class="mr-2 h-4 w-4 text-gray-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
          Clear filters
        </a>
      )}
    </div>
    
    <!-- Websites Grid -->
    {websites.length > 0 ? (
      <div class="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6">
        {websites.map(website => (
          <WebsiteCard website={website} />
        ))}
      </div>
    ) : (
      <Card>
        <div class="p-8 text-center">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 mx-auto text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9a9 9 0 01-9-9m9 9c1.657 0 3-4.03 3-9s-1.343-9-3-9m0 18c-1.657 0-3-4.03-3-9s1.343-9 3-9m-9 9a9 9 0 019-9" />
          </svg>
          <h3 class="mt-2 text-lg font-medium text-gray-900">No websites found</h3>
          <p class="mt-1 text-gray-500">Try adjusting your search or filter criteria</p>
          <div class="mt-6">
            <a href="/websites" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-purple-600 hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500">
              View all websites
            </a>
          </div>
        </div>
      </Card>
    )}
    
    <!-- Pagination (future enhancement) -->
    <!-- This would be implemented in a future iteration -->
  </div>
</DashboardLayout>

<script>
  // Client-side enhancement for form submission
  document.addEventListener('DOMContentLoaded', () => {
    // No JavaScript needed for basic functionality
    // Form submits naturally via GET method
  });
</script> 