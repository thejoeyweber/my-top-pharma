---
/**
 * Therapeutic Area Detail Page
 * 
 * Displays all content related to a specific therapeutic area,
 * including companies, products, and websites.
 */
import DashboardLayout from '../../components/templates/DashboardLayout.astro';
import Card from '../../components/atoms/Card.astro';
import Button from '../../components/atoms/Button.astro';
import TabGroup from '../../components/molecules/TabGroup.astro';
import KeyMetric from '../../components/molecules/KeyMetric.astro';
import CompanyCard from '../../components/molecules/CompanyCard.astro';
import ProductCard from '../../components/molecules/ProductCard.astro';
import { therapeuticAreas } from '../../data/companies';
import { getCompaniesByTherapeuticArea } from '../../data/companies';
import { getProductsByTherapeuticArea, getWebsitesByTherapeuticArea } from '../../utils/crossReferenceUtils';
import { websiteCategories } from '../../data/websites';
import { getCompanyLogoUrl, getWebsiteScreenshotUrl } from '../../utils/assetUtils';

// Generate static paths for all therapeutic areas
export function getStaticPaths() {
  return therapeuticAreas.map(area => ({
    params: { id: area.id },
    props: { areaName: area.name }
  }));
}

// Get therapeutic area ID from URL parameters
const { id } = Astro.params;
const { areaName } = Astro.props;

// Get display name for the therapeutic area
const getAreaName = () => {
  if (areaName) return areaName;
  const area = therapeuticAreas.find(a => a.id === id);
  return area ? area.name : id?.replace(/-/g, ' ');
};

// Get all companies that work in this therapeutic area
const relatedCompanies = getCompaniesByTherapeuticArea(id as string);

// Get all products related to this therapeutic area
const relatedProducts = getProductsByTherapeuticArea(id as string);

// Get all websites related to this therapeutic area
const relatedWebsites = getWebsitesByTherapeuticArea(id as string);

// Function to get category label
const getCategoryLabel = (categoryId: string) => {
  const category = websiteCategories.find(c => c.value === categoryId);
  return category ? category.label : categoryId;
};

// Default tab is "overview"
const activeTab = "overview";

// Define tabs
const tabs = [
  { id: "overview", label: "Overview", icon: '<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>' },
  { id: "companies", label: "Companies", icon: '<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4" /></svg>' },
  { id: "products", label: "Products", icon: '<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19.428 15.428a2 2 0 00-1.022-.547l-2.387-.477a6 6 0 00-3.86.517l-.318.158a6 6 0 01-3.86.517L6.05 15.21a2 2 0 00-1.806.547M8 4h8l-1 1v5.172a2 2 0 00.586 1.414l5 5c1.26 1.26.367 3.414-1.415 3.414H4.828c-1.782 0-2.674-2.154-1.414-3.414l5-5A2 2 0 009 10.172V5L8 4z" /></svg>' },
  { id: "websites", label: "Websites", icon: '<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9a9 9 0 01-9-9m9 9c1.657 0 3-4.03 3-9s-1.343-9-3-9m0 18c-1.657 0-3-4.03-3-9s1.343-9 3-9m-9 9a9 9 0 019-9" /></svg>' },
];

// Breadcrumbs for navigation
const breadcrumbs = [
  { label: 'Home', href: '/' },
  { label: 'Therapeutic Areas', href: '/therapeutic-areas' },
  { label: getAreaName(), href: `/therapeutic-areas/${id}`, isActive: true },
];
---

<DashboardLayout 
  title={`${getAreaName()} | Therapeutic Area | Top Pharma`}
  description={`Information about ${getAreaName()} therapeutic area including companies, products, and websites`}
  currentPath={`/therapeutic-areas/${id}`}
  breadcrumbs={breadcrumbs}
>
  <div class="space-y-6">
    <!-- Page header -->
    <div class="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4 mb-4">
      <div>
        <h1 class="text-2xl font-bold text-gray-900">{getAreaName()}</h1>
        <p class="mt-1 text-lg text-gray-500">Therapeutic Area</p>
      </div>
      <div class="flex gap-3">
        <Button>
          <svg xmlns="http://www.w3.org/2000/svg" class="-ml-1 mr-2 h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
          </svg>
          Follow
        </Button>
      </div>
    </div>
    
    <!-- Stats -->
    <Card>
      <div class="p-6">
        <div class="grid grid-cols-1 sm:grid-cols-3 gap-6">
          <KeyMetric 
            label="Companies"
            value={relatedCompanies.length.toString()}
            icon='<svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-blue-500" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4" /></svg>'
          />
          <KeyMetric 
            label="Products"
            value={relatedProducts.length.toString()}
            icon='<svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-blue-500" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19.428 15.428a2 2 0 00-1.022-.547l-2.387-.477a6 6 0 00-3.86.517l-.318.158a6 6 0 01-3.86.517L6.05 15.21a2 2 0 00-1.806.547M8 4h8l-1 1v5.172a2 2 0 00.586 1.414l5 5c1.26 1.26.367 3.414-1.415 3.414H4.828c-1.782 0-2.674-2.154-1.414-3.414l5-5A2 2 0 009 10.172V5L8 4z" /></svg>'
          />
          <KeyMetric 
            label="Websites"
            value={relatedWebsites.length.toString()}
            icon='<svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-blue-500" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9a9 9 0 01-9-9m9 9c1.657 0 3-4.03 3-9s-1.343-9-3-9m0 18c-1.657 0-3-4.03-3-9s1.343-9 3-9m-9 9a9 9 0 019-9" /></svg>'
          />
        </div>
      </div>
    </Card>
    
    <!-- Tabs -->
    <TabGroup tabs={tabs} activeTab={activeTab} />
    
    <!-- Tab content -->
    <div id="tab-content">
      <!-- Overview Tab -->
      <div id="tab-content-overview" role="tabpanel" aria-labelledby="tab-overview" class="space-y-6">
        <!-- Companies -->
        {relatedCompanies.length > 0 && (
          <Card>
            <div class="p-6">
              <div class="flex items-center justify-between mb-4">
                <h2 class="text-xl font-medium text-gray-900">Top Companies</h2>
                <a href="#tab-companies" class="text-sm text-blue-600 hover:text-blue-800" onclick="switchTab('companies')">
                  View all
                </a>
              </div>
              <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {relatedCompanies.slice(0, 3).map(company => (
                  <CompanyCard company={company} />
                ))}
                
                {relatedCompanies.length > 3 && (
                  <div class="bg-gray-50 rounded-lg border border-gray-200 shadow-sm overflow-hidden flex items-center justify-center">
                    <a href="#tab-companies" class="p-4 text-blue-600 hover:text-blue-800 font-medium text-center" onclick="switchTab('companies')">
                      View {relatedCompanies.length - 3} more companies
                    </a>
                  </div>
                )}
              </div>
            </div>
          </Card>
        )}
        
        <!-- Products -->
        {relatedProducts.length > 0 && (
          <Card>
            <div class="p-6">
              <div class="flex items-center justify-between mb-4">
                <h2 class="text-xl font-medium text-gray-900">Key Products</h2>
                <a href="#tab-products" class="text-sm text-blue-600 hover:text-blue-800" onclick="switchTab('products')">
                  View all
                </a>
              </div>
              <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {relatedProducts.slice(0, 3).map(product => (
                  <ProductCard product={product} />
                ))}
                
                {relatedProducts.length > 3 && (
                  <div class="bg-gray-50 rounded-lg border border-gray-200 shadow-sm overflow-hidden flex items-center justify-center">
                    <a href="#tab-products" class="p-4 text-blue-600 hover:text-blue-800 font-medium text-center" onclick="switchTab('products')">
                      View {relatedProducts.length - 3} more products
                    </a>
                  </div>
                )}
              </div>
            </div>
          </Card>
        )}
        
        <!-- Websites -->
        {relatedWebsites.length > 0 && (
          <Card>
            <div class="p-6">
              <div class="flex items-center justify-between mb-4">
                <h2 class="text-xl font-medium text-gray-900">Related Websites</h2>
                <a href="#tab-websites" class="text-sm text-blue-600 hover:text-blue-800" onclick="switchTab('websites')">
                  View all
                </a>
              </div>
              <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                {relatedWebsites.slice(0, 3).map(website => (
                  <div class="bg-white rounded-lg border border-gray-200 shadow-sm overflow-hidden">
                    <div class="p-4">
                      <div class="flex justify-between items-start">
                        <h4 class="font-medium text-gray-900 mb-1">{website.domain}</h4>
                        <span class="inline-flex items-center rounded-full bg-blue-50 px-2 py-1 text-xs font-medium text-blue-700">
                          {getCategoryLabel(website.category)}
                        </span>
                      </div>
                      
                      <div class="flex justify-between items-center mt-3">
                        <a 
                          href={`/websites/${website.domain.replace(/[^a-zA-Z0-9-]/g, '-').toLowerCase()}`} 
                          class="text-sm text-blue-600 hover:text-blue-800 font-medium"
                        >
                          View details
                        </a>
                        
                        <a 
                          href={`https://${website.domain}`} 
                          target="_blank" 
                          rel="noopener noreferrer" 
                          class="inline-flex items-center text-sm text-gray-500 hover:text-gray-700"
                        >
                          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
                          </svg>
                          Visit site
                        </a>
                      </div>
                    </div>
                  </div>
                ))}
                
                {relatedWebsites.length > 3 && (
                  <div class="bg-gray-50 rounded-lg border border-gray-200 shadow-sm overflow-hidden flex items-center justify-center">
                    <a href="#tab-websites" class="p-4 text-blue-600 hover:text-blue-800 font-medium text-center" onclick="switchTab('websites')">
                      View {relatedWebsites.length - 3} more websites
                    </a>
                  </div>
                )}
              </div>
            </div>
          </Card>
        )}
      </div>
      
      <!-- Companies Tab -->
      <div id="tab-content-companies" role="tabpanel" aria-labelledby="tab-companies" class="space-y-6 hidden">
        {relatedCompanies.length === 0 ? (
          <Card>
            <div class="p-6 text-center">
              <p class="text-gray-500">No companies found in this therapeutic area.</p>
            </div>
          </Card>
        ) : (
          <Card>
            <div class="p-6">
              <h2 class="text-xl font-medium text-gray-900 mb-4">Companies in {getAreaName()}</h2>
              <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {relatedCompanies.map(company => (
                  <CompanyCard company={company} />
                ))}
              </div>
            </div>
          </Card>
        )}
      </div>
      
      <!-- Products Tab -->
      <div id="tab-content-products" role="tabpanel" aria-labelledby="tab-products" class="space-y-6 hidden">
        {relatedProducts.length === 0 ? (
          <Card>
            <div class="p-6 text-center">
              <p class="text-gray-500">No products found in this therapeutic area.</p>
            </div>
          </Card>
        ) : (
          <Card>
            <div class="p-6">
              <h2 class="text-xl font-medium text-gray-900 mb-4">Products in {getAreaName()}</h2>
              <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {relatedProducts.map(product => (
                  <ProductCard product={product} />
                ))}
              </div>
            </div>
          </Card>
        )}
      </div>
      
      <!-- Websites Tab -->
      <div id="tab-content-websites" role="tabpanel" aria-labelledby="tab-websites" class="space-y-6 hidden">
        {relatedWebsites.length === 0 ? (
          <Card>
            <div class="p-6 text-center">
              <p class="text-gray-500">No websites found for this therapeutic area.</p>
            </div>
          </Card>
        ) : (
          <Card>
            <div class="p-6">
              <h2 class="text-xl font-medium text-gray-900 mb-4">Websites in {getAreaName()}</h2>
              <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                {relatedWebsites.map(website => (
                  <div class="bg-white rounded-lg border border-gray-200 shadow-sm overflow-hidden">
                    <div class="flex flex-col md:flex-row">
                      {website.screenshotUrl && (
                        <div class="md:w-1/3 relative h-40 md:h-auto">
                          <img 
                            src={getWebsiteScreenshotUrl(website.domain)} 
                            alt={`Screenshot of ${website.domain}`}
                            class="absolute inset-0 w-full h-full object-cover"
                          />
                        </div>
                      )}
                      <div class={`p-4 ${website.screenshotUrl ? 'md:w-2/3' : 'w-full'}`}>
                        <div class="flex justify-between items-start">
                          <h4 class="font-medium text-gray-900 mb-1">{website.domain}</h4>
                          <span class="inline-flex items-center rounded-full bg-blue-50 px-2 py-1 text-xs font-medium text-blue-700">
                            {getCategoryLabel(website.category)}
                          </span>
                        </div>
                        
                        {website.siteName && (
                          <p class="text-sm text-gray-500 mb-2">{website.siteName}</p>
                        )}
                        
                        <p class="text-sm text-gray-700 line-clamp-2 mb-3">
                          {website.description || 'No description available.'}
                        </p>
                        
                        <div class="flex justify-between items-center mt-auto">
                          <a 
                            href={`/websites/${website.domain.replace(/[^a-zA-Z0-9-]/g, '-').toLowerCase()}`} 
                            class="text-sm text-blue-600 hover:text-blue-800 font-medium"
                          >
                            View details
                          </a>
                          
                          <a 
                            href={`https://${website.domain}`} 
                            target="_blank" 
                            rel="noopener noreferrer" 
                            class="inline-flex items-center text-sm text-gray-500 hover:text-gray-700"
                          >
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
                            </svg>
                            Visit site
                          </a>
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </Card>
        )}
      </div>
    </div>
  </div>
</DashboardLayout>

<script>
// Add tab switching function
function switchTab(tabId) {
  // Find the tab link and simulate a click
  const tabLink = document.querySelector(`[href="#${tabId}"]`);
  if (tabLink) {
    tabLink.click();
  }
}

// Add this function to the global scope
document.addEventListener('DOMContentLoaded', () => {
  window.switchTab = switchTab;
});
</script> 