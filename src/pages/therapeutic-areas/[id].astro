---
/**
 * Therapeutic Area Detail Page
 * 
 * Displays detailed information for a specific therapeutic area,
 * including related companies, products, and websites.
 */
import { supabase } from '../../lib/supabase';
import DashboardLayout from '../../components/templates/DashboardLayout.astro';
import Breadcrumb from '../../components/molecules/Breadcrumb.astro';
import TabGroup from '../../components/molecules/TabGroup.astro';
import CompanyCard from '../../components/molecules/CompanyCard.astro';
import ProductCard from '../../components/molecules/ProductCard.astro';
import WebsiteCard from '../../components/molecules/WebsiteCard.astro';
import { dbCompanyToCompany } from '../../interfaces/entities/Company';
import { dbProductToProduct } from '../../interfaces/entities/Product';
import { dbWebsiteToWebsite } from '../../interfaces/entities/Website';
import { dbTherapeuticAreaToTherapeuticArea } from '../../interfaces/entities/TherapeuticArea';
import type { TherapeuticArea } from '../../interfaces/entities';

// Function to generate static paths for all therapeutic areas
export async function getStaticPaths() {
  const { data: therapeuticAreas } = await supabase
    .from('therapeutic_areas')
    .select('id, slug, name');
  
  if (!therapeuticAreas) {
    return [];
  }
  
  return therapeuticAreas.map(ta => ({
    params: { id: ta.slug },
    props: { therapeuticAreaId: ta.id }
  }));
}

// Get the therapeutic area ID from the URL
const { id } = Astro.params;
const { therapeuticAreaId } = Astro.props;

// Fetch the therapeutic area data - first try by ID from props, then by slug
let taData;

if (therapeuticAreaId) {
  const { data } = await supabase
    .from('therapeutic_areas')
    .select('*')
    .eq('id', therapeuticAreaId)
    .single();
  
  taData = data;
}

// If not found or ID not provided, try by slug
if (!taData) {
  const { data } = await supabase
    .from('therapeutic_areas')
    .select('*')
    .eq('slug', id)
    .single();
  
  taData = data;
  
  // Last resort, try by ID
  if (!taData) {
    const { data } = await supabase
      .from('therapeutic_areas')
      .select('*')
      .eq('id', id)
      .single();
    
    taData = data;
  }
}

// Redirect to the therapeutic areas list if the therapeutic area is not found
if (!taData) {
  return Astro.redirect('/therapeutic-areas');
}

const therapeuticArea: TherapeuticArea = dbTherapeuticAreaToTherapeuticArea(taData);

// Fetch companies related to this therapeutic area
const { data: companiesData } = await supabase
  .from('companies')
  .select('*')
  .contains('therapeutic_area_ids', [therapeuticArea.id]);

const companies = companiesData ? companiesData.map(dbCompanyToCompany) : [];

// Fetch products related to this therapeutic area
const { data: productsData } = await supabase
  .from('products')
  .select('*')
  .contains('therapeutic_area_ids', [therapeuticArea.id]);

const products = productsData ? productsData.map(dbProductToProduct) : [];

// Fetch websites related to this therapeutic area
const { data: websitesData } = await supabase
  .from('websites')
  .select('*')
  .contains('therapeutic_area_ids', [therapeuticArea.id]);

const websites = websitesData ? websitesData.map(dbWebsiteToWebsite) : [];

// Set up breadcrumbs
const breadcrumbItems = [
  { label: 'Home', href: '/' },
  { label: 'Therapeutic Areas', href: '/therapeutic-areas' },
  { label: therapeuticArea.name, href: `/therapeutic-areas/${id}`, isActive: true }
];

// Set up tabs
const tabs = [
  { 
    id: 'overview', 
    label: 'Overview', 
    count: null
  },
  { 
    id: 'companies', 
    label: 'Companies', 
    count: companies.length
  },
  { 
    id: 'products', 
    label: 'Products', 
    count: products.length
  },
  { 
    id: 'websites', 
    label: 'Websites', 
    count: websites.length
  }
];

// Get active tab from URL query parameter or default to 'overview'
const activeTab = Astro.url.searchParams.get('tab') || 'overview';
---

<DashboardLayout title={`${therapeuticArea.name} - Therapeutic Area | MyTopPharma`}>
  <div class="container mx-auto px-4 py-8">
    <Breadcrumb items={breadcrumbItems} />
    
    <div class="bg-white rounded-lg shadow-md p-6 mt-6">
      <div class="flex flex-col md:flex-row md:items-center justify-between mb-6">
        <div>
          <h1 class="text-2xl font-bold text-gray-900">{therapeuticArea.name}</h1>
          {therapeuticArea.description && (
            <p class="text-gray-600 mt-2">{therapeuticArea.description}</p>
          )}
        </div>
      </div>
      
      <TabGroup tabs={tabs} activeTab={activeTab} baseUrl={`/therapeutic-areas/${id}`} />
      
      <!-- Tab Content -->
      <div class="mt-6">
        {activeTab === 'overview' && (
          <div>
            <p>Overview content for {therapeuticArea.name}</p>
          </div>
        )}
        
        {activeTab === 'companies' && (
          <div>
            {companies.length > 0 ? (
              <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {companies.map(company => (
                  <CompanyCard company={company} />
                ))}
              </div>
            ) : (
              <p class="text-gray-500">No companies found for this therapeutic area.</p>
            )}
          </div>
        )}
        
        {activeTab === 'products' && (
          <div>
            {products.length > 0 ? (
              <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {products.map(product => (
                  <ProductCard product={product} />
                ))}
              </div>
            ) : (
              <p class="text-gray-500">No products found for this therapeutic area.</p>
            )}
          </div>
        )}
        
        {activeTab === 'websites' && (
          <div>
            {websites.length > 0 ? (
              <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {websites.map(website => (
                  <WebsiteCard website={website} />
                ))}
              </div>
            ) : (
              <p class="text-gray-500">No websites found for this therapeutic area.</p>
            )}
          </div>
        )}
      </div>
    </div>
  </div>
</DashboardLayout> 