---
/**
 * Database Connection Test Page
 * 
 * Displays connection status to Supabase instance based on environment configuration.
 */
import DashboardLayout from '../../../components/templates/DashboardLayout.astro';
import Card from '../../../components/atoms/Card.astro';
import { createClient } from '@supabase/supabase-js';

// Get Supabase connection details from environment
const SUPABASE_URL = import.meta.env.PUBLIC_SUPABASE_URL || '';
const SUPABASE_ANON_KEY = import.meta.env.PUBLIC_SUPABASE_ANON_KEY || '';

// Breadcrumbs for navigation
const breadcrumbs = [
  { label: 'Home', href: '/' },
  { label: 'Admin', href: '/admin' },
  { label: 'Data Feeds', href: '/admin/data-feeds' },
  { label: 'Connection Test', href: '/admin/data-feeds/connection-test', isActive: true },
];

// Function to test connection
async function testConnection(url: string, key: string) {
  // Validate connection details
  if (!url || !key) {
    return {
      success: false,
      error: 'Missing connection details',
      tables: [],
      metadata: null
    };
  }

  try {
    // Create a client for testing only
    const supabase = createClient(url, key, {
      auth: {
        autoRefreshToken: false,
        persistSession: false
      }
    });
    
    // Test connection by querying version information
    // We use pg_version() which is a built-in Postgres function
    const { data: versionData, error: versionError } = await supabase
      .rpc('pg_version')
      .select('*');
    
    // If getting version via RPC fails, try a simple query to verify connection
    if (versionError) {
      // Test connection with a simple query
      const { data: testData, error: testError } = await supabase
        .from('companies')
        .select('id')
        .limit(1);
        
      if (testError) {
        throw testError;
      }
    }
    
    // Get table information
    const { data: tableData, error: tableError } = await supabase
      .from('pg_tables')
      .select('tablename')
      .eq('schemaname', 'public');
    
    // If we can't access system tables, try to get tables another way
    let tables = [];
    if (tableError || !tableData) {
      // Try to query a list of known tables to see which ones exist
      const knownTables = ['companies', 'products', 'therapeutic_areas', 'websites'];
      const tablePromises = knownTables.map(table => 
        supabase.from(table).select('id', { count: 'exact', head: true })
      );
      
      const results = await Promise.all(tablePromises);
      tables = knownTables.filter((_, index) => !results[index].error);
    } else {
      tables = tableData.map(t => t.tablename);
    }
    
    // Get counts for key tables
    const keyTables = ['companies', 'products', 'therapeutic_areas', 'websites'];
    const tableCounts = await Promise.all(
      keyTables.map(table => 
        supabase.from(table).select('*', { count: 'exact', head: true })
      )
    );
    
    // Format results
    const keyTablesData = keyTables.map((name, index) => ({
      name,
      count: tableCounts[index].count || 0,
      error: tableCounts[index].error?.message
    }));
    
    // Determine Postgres version through alternative means if RPC failed
    let version = "Unknown";
    if (versionData) {
      version = versionData;
    }
    
    return {
      success: true,
      error: null,
      tables,
      keyTablesData,
      version: { version }
    };
  } catch (error) {
    return {
      success: false,
      error: error.message || String(error),
      tables: [],
      keyTablesData: []
    };
  }
}

// Test connection
const connectionResult = await testConnection(SUPABASE_URL, SUPABASE_ANON_KEY);
---

<DashboardLayout title="Connection Test | Admin | Top Pharma">
  <div class="min-h-screen bg-gray-100">
    <header class="bg-white shadow">
      <div class="mx-auto max-w-7xl px-4 py-6 sm:px-6 lg:px-8">
        <div class="flex items-center">
          <a href="/admin/audit" class="mr-2 text-gray-400 hover:text-gray-600">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-5 h-5">
              <path fill-rule="evenodd" d="M11.03 3.97a.75.75 0 0 1 0 1.06l-6.22 6.22H21a.75.75 0 0 1 0 1.5H4.81l6.22 6.22a.75.75 0 1 1-1.06 1.06l-7.5-7.5a.75.75 0 0 1 0-1.06l7.5-7.5a.75.75 0 0 1 1.06 0Z" clip-rule="evenodd" />
            </svg>
          </a>
          <h1 class="text-2xl font-bold text-gray-900">Database Connection Test</h1>
        </div>
        <p class="mt-2 text-sm text-gray-500">
          Test the current Supabase connection configuration
        </p>
      </div>
    </header>
    
    <main class="py-6">
      <div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
        <!-- Connection Information -->
        <div class="mb-6">
          <Card>
            <div class="p-6">
              <h2 class="text-lg font-medium mb-4">Connection Configuration</h2>
              
              <div class="bg-white p-4 rounded-lg border border-gray-200 mb-4">
                <div>
                  <h3 class="text-base font-medium">Supabase Connection</h3>
                  <p class="text-sm text-gray-500 mt-1">
                    Connection is now managed through environment variables (.env and .env.local):
                  </p>
                  <pre class="mt-2 text-xs font-mono bg-gray-50 p-2 rounded">
PUBLIC_SUPABASE_URL={SUPABASE_URL}
                  </pre>
                </div>
              </div>
              
              <div class={`p-4 rounded-lg border ${connectionResult.success ? 'bg-green-50 border-green-200' : 'bg-red-50 border-red-200'}`}>
                <div class="flex">
                  <div class="flex-shrink-0">
                    {connectionResult.success ? (
                      <svg class="h-5 w-5 text-green-600" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                      </svg>
                    ) : (
                      <svg class="h-5 w-5 text-red-600" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
                      </svg>
                    )}
                  </div>
                  <div class="ml-3">
                    <h3 class={`text-sm font-medium ${connectionResult.success ? 'text-green-800' : 'text-red-800'}`}>
                      {connectionResult.success ? 'Connection Successful' : 'Connection Failed'}
                    </h3>
                    <div class={`mt-2 text-sm ${connectionResult.success ? 'text-green-700' : 'text-red-700'}`}>
                      {connectionResult.success ? (
                        <p>Successfully connected to Supabase at {SUPABASE_URL}</p>
                      ) : (
                        <p>Error: {connectionResult.error}</p>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </Card>
        </div>
        
        {connectionResult.success && (
          <div class="mb-6">
            <Card>
              <div class="p-6">
                <h2 class="text-lg font-medium mb-4">Database Tables</h2>
                
                <div class="overflow-x-auto">
                  <table class="min-w-full divide-y divide-gray-200">
                    <thead class="bg-gray-50">
                      <tr>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Table Name</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Record Count</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                      </tr>
                    </thead>
                    <tbody class="bg-white divide-y divide-gray-200">
                      {connectionResult.keyTablesData.map((table) => (
                        <tr>
                          <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">{table.name}</td>
                          <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{table.count}</td>
                          <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                            {table.error ? (
                              <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800">
                                Error
                              </span>
                            ) : (
                              <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                                OK
                              </span>
                            )}
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              </div>
            </Card>
          </div>
        )}
      </div>
    </main>
  </div>
</DashboardLayout> 