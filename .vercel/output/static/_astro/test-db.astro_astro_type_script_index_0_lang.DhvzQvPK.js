const C={ASSETS_PREFIX:void 0,BASE_URL:"/",DEV:!1,MODE:"production",PROD:!0,PUBLIC_LOCAL_SUPABASE_ANON_KEY:"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0",PUBLIC_LOCAL_SUPABASE_SERVICE_ROLE_KEY:"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImV4cCI6MTk4MzgxMjk5Nn0.EGIM96RAZx35lJzdJsyH-qQwv8Hdp7fsn3W0YpN81IU",PUBLIC_LOCAL_SUPABASE_URL:"http://localhost:54321",PUBLIC_SUPABASE_ANON_KEY:"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9jZ2xub2NreG52bXFqd3p1cWZiIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDIyMjU5MzIsImV4cCI6MjA1NzgwMTkzMn0.omJljVbLgAkvyqINJJrZgcK8qZyrSUOxiOSXTwWVQiI",PUBLIC_SUPABASE_URL:"https://ocglnockxnvmqjwzuqfb.supabase.co",PUBLIC_USE_LOCAL_DATABASE:"true",SITE:void 0,SSR:!1};document.addEventListener("DOMContentLoaded",()=>{const L=document.getElementById("test-connection"),g=document.getElementById("test-results"),o=document.getElementById("test-title"),r=document.getElementById("test-message"),x=document.getElementById("detailed-results"),E=document.getElementById("credentials-results"),I=document.getElementById("companies-results"),a=document.getElementById("admin-results"),d=document.getElementById("schema-results"),h=document.getElementById("raw-results"),p=document.getElementById("env-var-table"),m=document.getElementById("test-loading-icon"),u=document.getElementById("test-success-icon"),v=document.getElementById("test-error-icon");async function y(){if(!p)return;const c=[{name:"PUBLIC_SUPABASE_URL",description:"Supabase project URL"},{name:"PUBLIC_SUPABASE_ANON_KEY",description:"Supabase anonymous key"},{name:"SUPABASE_SERVICE_ROLE_KEY",description:"Supabase service role key (for admin operations)"},{name:"PUBLIC_FMP_API_KEY",description:"Financial Modeling Prep API key"}];p.innerHTML="";for(const e of c){const n=!!C[e.name],s=document.createElement("tr");s.innerHTML=`
          <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">${e.name}</td>
          <td class="px-6 py-4 whitespace-nowrap text-sm">
            <span class="inline-flex rounded-full px-2 text-xs font-semibold leading-5 ${n?"bg-green-100 text-green-800":"bg-red-100 text-red-800"}">
              ${n?"Configured":"Missing"}
            </span>
          </td>
          <td class="px-6 py-4 text-sm text-gray-500">${e.description}</td>
        `,p.appendChild(s)}}y(),L&&L.addEventListener("click",async()=>{if(!(!g||!o||!r)){g.classList.remove("hidden"),m.classList.remove("hidden"),u.classList.add("hidden"),v.classList.add("hidden"),x.classList.add("hidden"),o.textContent="Testing connection...",r.textContent="Connecting to Supabase...";try{const e=await(await fetch("/api/test-db-connection")).json();if(h.textContent=JSON.stringify(e,null,2),e.success)m.classList.add("hidden"),u.classList.remove("hidden"),v.classList.add("hidden"),o.textContent="Connection successful",r.textContent=e.message;else if(m.classList.add("hidden"),u.classList.add("hidden"),v.classList.remove("hidden"),o.textContent="Connection failed",r.textContent=e.error||e.message||"Unknown error",e.error&&e.stack){const l=document.createElement("div");l.className="mt-2 text-xs text-red-500",l.textContent=e.stack.split(`
`)[0],r.appendChild(l)}x.classList.remove("hidden");const t=e.credentials;t&&(E.innerHTML=`
              <div class="${t.url.provided?"text-green-700":"text-red-700"}">
                URL: ${t.url.provided?"Provided":"Missing"}
              </div>
              <div class="${t.key.provided?"text-green-700":"text-red-700"}">
                Key: ${t.key.provided?"Provided":"Missing"} 
                ${t.key.provided?`(${t.key.length} characters)`:""}
              </div>
              <div class="${t.serviceRole?.provided?"text-green-700":"text-red-700"}">
                Service Role Key: ${t.serviceRole?.provided?"Provided":"Missing"} 
                ${t.serviceRole?.provided?`(${t.serviceRole.length} characters)`:""}
              </div>
            `);const n=e.companies;n&&(I.innerHTML=n.success?`<div class="text-green-700">Table exists with ${n.count} records</div>`:`<div class="text-red-700">Error: ${n.error?.message||"Unknown error"}</div>`,n.error?.code&&(I.innerHTML+=`<div class="text-gray-600">Code: ${n.error.code}</div>`),n.error?.hint&&(I.innerHTML+=`<div class="text-blue-600">Hint: ${n.error.hint}</div>`));const s=e.admin;s?s.tested?(a.innerHTML=s.success?`<div class="text-green-700">Admin client working (${s.count} records)</div>`:`<div class="text-red-700">Error: ${s.error?.message||"Unknown error"}</div>`,s.error?.code&&(a.innerHTML+=`<div class="text-gray-600">Code: ${s.error.code}</div>`),s.error?.hint&&(a.innerHTML+=`<div class="text-blue-600">Hint: ${s.error.hint}</div>`)):a.innerHTML='<div class="text-yellow-600">Admin client not tested (service role key missing)</div>':a.innerHTML='<div class="text-gray-600">Admin client test not available</div>';const i=e.schema;i&&(d.innerHTML=i.success?'<div class="text-green-700">Schema access successful</div>':`<div class="text-red-700">Error: ${i.error?.message||"Unknown error"}</div>`,i.tables&&i.tables.length>0?(d.innerHTML+='<div class="mt-1">Public tables:</div>',d.innerHTML+='<ul class="list-disc pl-5">',i.tables.forEach(l=>{d.innerHTML+=`<li>${l.tablename}</li>`}),d.innerHTML+="</ul>"):i.success&&(d.innerHTML+='<div class="text-yellow-600">No public tables found</div>'),i.error?.message?.includes("does not exist")&&(d.innerHTML+='<div class="text-blue-600 mt-1">Note: pg_tables access is restricted with anonymous key (expected)</div>'))}catch(c){console.error("Test connection error:",c),m.classList.add("hidden"),u.classList.add("hidden"),v.classList.remove("hidden"),o.textContent="Test failed",r.textContent=c instanceof Error?c.message:"An unknown error occurred while testing the connection"}}})});
