/**
 * Generate TypeScript Types Script
 * 
 * This script uses the Supabase CLI to generate TypeScript types
 * from your Supabase database schema. The types will be saved to
 * src/types/supabase.ts for use throughout your application.
 * 
 * Usage:
 * node scripts/generate-types.js
 */

import { execSync } from 'child_process';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

// Get proper __dirname equivalent in ESM
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Configuration
const TYPES_DIR = path.join(__dirname, '../src/types');
const OUTPUT_FILE = path.join(TYPES_DIR, 'supabase.ts');

// Ensure the types directory exists
if (!fs.existsSync(TYPES_DIR)) {
  try {
    fs.mkdirSync(TYPES_DIR, { recursive: true });
    console.log(`Created types directory: ${TYPES_DIR}`);
  } catch (err) {
    console.error(`Error creating types directory: ${err.message}`);
    process.exit(1);
  }
}

try {
  // Check if Supabase CLI is installed
  try {
    const versionOutput = execSync('npx supabase --version', { stdio: 'pipe', encoding: 'utf8' });
    console.log('Supabase CLI version:', versionOutput.trim());
  } catch (error) {
    console.log('Supabase CLI not found. Installing...');
    execSync('npm install -g supabase', { stdio: 'inherit' });
  }

  console.log('Generating TypeScript types from Supabase schema...');
  
  // Get the project ID from environment variable or use default
  const projectId = process.env.SUPABASE_PROJECT_ID || 'teycvirevxhmuaurroxm';
  
  // Generate types with the correct command syntax
  console.log(`Generating types for project ${projectId}...`);
  try {
    // Create a temporary file to hold the command output
    const tempOutputFile = `${OUTPUT_FILE}.tmp`;
    
    // Generate types and redirect to a temporary file
    execSync(`npx supabase gen types typescript --project-id ${projectId} > "${tempOutputFile}"`, { 
      stdio: 'inherit',
      cwd: process.cwd() 
    });
    
    // If the temporary file exists, add header and move to final location
    if (fs.existsSync(tempOutputFile)) {
      const fileContent = fs.readFileSync(tempOutputFile, 'utf8');
      const headerContent = `/**
 * This file was automatically generated by the Supabase CLI.
 * DO NOT MODIFY THIS FILE DIRECTLY.
 *
 * To regenerate this file, run:
 * npm run db:types
 */

`;
      
      fs.writeFileSync(OUTPUT_FILE, headerContent + fileContent);
      fs.unlinkSync(tempOutputFile); // Remove the temporary file
      console.log(`âœ… TypeScript types generated at: ${OUTPUT_FILE}`);
    } else {
      throw new Error(`Failed to generate types: output file not found at ${tempOutputFile}`);
    }
  } catch (error) {
    console.error('Error generating types:');
    console.error(error.message);
    
    console.log('\nPlease try running the command manually:');
    console.log(`npx supabase gen types typescript --project-id ${projectId} > src/types/supabase.ts`);
    process.exit(1);
  }
} catch (error) {
  console.error('Error generating TypeScript types:');
  console.error(error.message);
  process.exit(1);
} 